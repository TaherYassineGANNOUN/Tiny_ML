
Tiny_ML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c1bc  0800fe80  0800fe80  0001fe80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c03c  0801c03c  00030d88  2**0
                  CONTENTS
  4 .ARM          00000008  0801c03c  0801c03c  0002c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c044  0801c044  00030d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c044  0801c044  0002c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c048  0801c048  0002c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d88  20000000  0801c04c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030d88  2**0
                  CONTENTS
 10 .bss          000027dc  20000d88  20000d88  00030d88  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20003564  20003564  00030d88  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030d88  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030db8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c7e1  00000000  00000000  00030dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a06  00000000  00000000  0004d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001718  00000000  00000000  00051fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001197  00000000  00000000  00053700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027c1a  00000000  00000000  00054897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fbca  00000000  00000000  0007c4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd1f2  00000000  00000000  0009c07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007150  00000000  00000000  00179270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001803c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000d88 	.word	0x20000d88
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe50 	.word	0x0800fe50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000d8c 	.word	0x20000d8c
 80001cc:	0800fe50 	.word	0x0800fe50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000eb2:	f000 ff41 	bl	8001d38 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000ebc:	f107 030f 	add.w	r3, r7, #15
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 ff95 	bl	8001df4 <ACCELERO_IO_Write>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000eea:	f000 ff25 	bl	8001d38 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 ffaf 	bl	8001e58 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000f12:	f107 030f 	add.w	r3, r7, #15
 8000f16:	2201      	movs	r2, #1
 8000f18:	2121      	movs	r1, #33	; 0x21
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 ff9c 	bl	8001e58 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2121      	movs	r1, #33	; 0x21
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 ff59 	bl	8001df4 <ACCELERO_IO_Write>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2138      	movs	r1, #56	; 0x38
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 ff7a 	bl	8001e58 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000f7a:	f107 030f 	add.w	r3, r7, #15
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2138      	movs	r1, #56	; 0x38
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 ff36 	bl	8001df4 <ACCELERO_IO_Write>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 8000f9a:	f000 fefb 	bl	8001d94 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffcc 	bl	8000f4a <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 8000fb2:	233f      	movs	r3, #63	; 0x3f
 8000fb4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2122      	movs	r1, #34	; 0x22
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 ff19 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 8000fc2:	2350      	movs	r3, #80	; 0x50
 8000fc4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2138      	movs	r1, #56	; 0x38
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 ff11 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 8000fd2:	23aa      	movs	r3, #170	; 0xaa
 8000fd4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	2201      	movs	r2, #1
 8000fda:	213b      	movs	r1, #59	; 0x3b
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 ff09 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	2201      	movs	r2, #1
 8000fea:	213c      	movs	r1, #60	; 0x3c
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 ff01 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 8000ff2:	234c      	movs	r3, #76	; 0x4c
 8000ff4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2130      	movs	r1, #48	; 0x30
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fef9 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 8001002:	2303      	movs	r3, #3
 8001004:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	2201      	movs	r2, #1
 800100a:	213d      	movs	r1, #61	; 0x3d
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fef1 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 8001012:	237f      	movs	r3, #127	; 0x7f
 8001014:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	2201      	movs	r2, #1
 800101a:	213e      	movs	r1, #62	; 0x3e
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fee9 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8001022:	237f      	movs	r3, #127	; 0x7f
 8001024:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	2201      	movs	r2, #1
 800102a:	213f      	movs	r1, #63	; 0x3f
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fee1 	bl	8001df4 <ACCELERO_IO_Write>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	2201      	movs	r2, #1
 8001048:	2139      	movs	r1, #57	; 0x39
 800104a:	4618      	mov	r0, r3
 800104c:	f000 ff04 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2206      	movs	r2, #6
 8001056:	2127      	movs	r1, #39	; 0x27
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fefd 	bl	8001e58 <ACCELERO_IO_Read>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	2201      	movs	r2, #1
 8001070:	2121      	movs	r1, #33	; 0x21
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fef0 	bl	8001e58 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	b2db      	uxtb	r3, r3
 8001080:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	2201      	movs	r2, #1
 8001086:	2121      	movs	r1, #33	; 0x21
 8001088:	4618      	mov	r0, r3
 800108a:	f000 feb3 	bl	8001df4 <ACCELERO_IO_Write>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b088      	sub	sp, #32
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 800109e:	2312      	movs	r3, #18
 80010a0:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80010a6:	f107 030f 	add.w	r3, r7, #15
 80010aa:	2201      	movs	r2, #1
 80010ac:	2120      	movs	r1, #32
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fed2 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	2206      	movs	r2, #6
 80010ba:	2129      	movs	r1, #41	; 0x29
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fecb 	bl	8001e58 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	77bb      	strb	r3, [r7, #30]
 80010c6:	e00f      	b.n	80010e8 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80010c8:	7fbb      	ldrb	r3, [r7, #30]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3320      	adds	r3, #32
 80010ce:	443b      	add	r3, r7
 80010d0:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80010d4:	7fbb      	ldrb	r3, [r7, #30]
 80010d6:	b212      	sxth	r2, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	3320      	adds	r3, #32
 80010dc:	443b      	add	r3, r7
 80010de:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80010e2:	7fbb      	ldrb	r3, [r7, #30]
 80010e4:	3301      	adds	r3, #1
 80010e6:	77bb      	strb	r3, [r7, #30]
 80010e8:	7fbb      	ldrb	r3, [r7, #30]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d9ec      	bls.n	80010c8 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <LIS302DL_ReadACC+0x68>
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d003      	beq.n	8001104 <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 80010fc:	e005      	b.n	800110a <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80010fe:	2312      	movs	r3, #18
 8001100:	77fb      	strb	r3, [r7, #31]
    break;
 8001102:	e002      	b.n	800110a <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8001104:	2348      	movs	r3, #72	; 0x48
 8001106:	77fb      	strb	r3, [r7, #31]
    break;
 8001108:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	77bb      	strb	r3, [r7, #30]
 800110e:	e014      	b.n	800113a <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	3320      	adds	r3, #32
 8001116:	443b      	add	r3, r7
 8001118:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800111c:	b29a      	uxth	r2, r3
 800111e:	7ffb      	ldrb	r3, [r7, #31]
 8001120:	b29b      	uxth	r3, r3
 8001122:	fb12 f303 	smulbb	r3, r2, r3
 8001126:	b299      	uxth	r1, r3
 8001128:	7fbb      	ldrb	r3, [r7, #30]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	b20a      	sxth	r2, r1
 8001132:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001134:	7fbb      	ldrb	r3, [r7, #30]
 8001136:	3301      	adds	r3, #1
 8001138:	77bb      	strb	r3, [r7, #30]
 800113a:	7fbb      	ldrb	r3, [r7, #30]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d9e7      	bls.n	8001110 <LIS302DL_ReadACC+0x7a>
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8001158:	f000 fdee 	bl	8001d38 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001162:	f107 030f 	add.w	r3, r7, #15
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fe42 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 800117a:	f107 030f 	add.w	r3, r7, #15
 800117e:	2201      	movs	r2, #1
 8001180:	2124      	movs	r1, #36	; 0x24
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fe36 	bl	8001df4 <ACCELERO_IO_Write>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80011a8:	f000 fdc6 	bl	8001d38 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	2201      	movs	r2, #1
 80011b0:	210f      	movs	r1, #15
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fe50 	bl	8001e58 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80011de:	4313      	orrs	r3, r2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80011e4:	f107 030f 	add.w	r3, r7, #15
 80011e8:	2201      	movs	r2, #1
 80011ea:	2123      	movs	r1, #35	; 0x23
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fe01 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8001200:	f107 030f 	add.w	r3, r7, #15
 8001204:	2201      	movs	r2, #1
 8001206:	2121      	movs	r1, #33	; 0x21
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fdf3 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8001216:	4313      	orrs	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800121c:	f107 030f 	add.w	r3, r7, #15
 8001220:	2201      	movs	r2, #1
 8001222:	2122      	movs	r1, #34	; 0x22
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fde5 	bl	8001df4 <ACCELERO_IO_Write>
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001238:	2300      	movs	r3, #0
 800123a:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 800123c:	f000 fdaa 	bl	8001d94 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8001244:	2300      	movs	r3, #0
 8001246:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8001250:	2301      	movs	r3, #1
 8001252:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8001254:	2300      	movs	r3, #0
 8001256:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8001258:	463b      	mov	r3, r7
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffb1 	bl	80011c2 <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8001260:	2303      	movs	r3, #3
 8001262:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	2201      	movs	r2, #1
 8001268:	2152      	movs	r1, #82	; 0x52
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fdc2 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8001270:	23c8      	movs	r3, #200	; 0xc8
 8001272:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	2201      	movs	r2, #1
 8001278:	2154      	movs	r1, #84	; 0x54
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fdba 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8001280:	2345      	movs	r3, #69	; 0x45
 8001282:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	2201      	movs	r2, #1
 8001288:	2156      	movs	r1, #86	; 0x56
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fdb2 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8001290:	23fc      	movs	r3, #252	; 0xfc
 8001292:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	2201      	movs	r2, #1
 8001298:	215a      	movs	r1, #90	; 0x5a
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fdaa 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80012a0:	23a1      	movs	r3, #161	; 0xa1
 80012a2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	2201      	movs	r2, #1
 80012a8:	215b      	movs	r1, #91	; 0x5b
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fda2 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0x01; 
 80012b0:	2301      	movs	r3, #1
 80012b2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	2201      	movs	r2, #1
 80012b8:	215c      	movs	r1, #92	; 0x5c
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fd9a 	bl	8001df4 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	2201      	movs	r2, #1
 80012c4:	217b      	movs	r1, #123	; 0x7b
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fd94 	bl	8001df4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80012cc:	1dfb      	adds	r3, r7, #7
 80012ce:	2201      	movs	r2, #1
 80012d0:	2160      	movs	r1, #96	; 0x60
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd8e 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0x06; 
 80012d8:	2306      	movs	r3, #6
 80012da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	2201      	movs	r2, #1
 80012e0:	2161      	movs	r1, #97	; 0x61
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fd86 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0x28; 
 80012e8:	2328      	movs	r3, #40	; 0x28
 80012ea:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	2201      	movs	r2, #1
 80012f0:	2162      	movs	r1, #98	; 0x62
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd7e 	bl	8001df4 <ACCELERO_IO_Write>
  ctrl=0x11; 
 80012f8:	2311      	movs	r3, #17
 80012fa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	2201      	movs	r2, #1
 8001300:	2163      	movs	r1, #99	; 0x63
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd76 	bl	8001df4 <ACCELERO_IO_Write>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	2201      	movs	r2, #1
 800131a:	2125      	movs	r1, #37	; 0x25
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fd9b 	bl	8001e58 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001328:	b2db      	uxtb	r3, r3
 800132a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	2201      	movs	r2, #1
 8001330:	2125      	movs	r1, #37	; 0x25
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd5e 	bl	8001df4 <ACCELERO_IO_Write>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800134c:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <LIS3DSH_ReadACC+0x1a0>)
 800134e:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8001356:	f107 030b 	add.w	r3, r7, #11
 800135a:	2201      	movs	r2, #1
 800135c:	2124      	movs	r1, #36	; 0x24
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fd7a 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2201      	movs	r2, #1
 800136a:	2128      	movs	r1, #40	; 0x28
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fd73 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	3301      	adds	r3, #1
 8001378:	2201      	movs	r2, #1
 800137a:	2129      	movs	r1, #41	; 0x29
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fd6b 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	3302      	adds	r3, #2
 8001388:	2201      	movs	r2, #1
 800138a:	212a      	movs	r1, #42	; 0x2a
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fd63 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	3303      	adds	r3, #3
 8001398:	2201      	movs	r2, #1
 800139a:	212b      	movs	r1, #43	; 0x2b
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd5b 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	3304      	adds	r3, #4
 80013a8:	2201      	movs	r2, #1
 80013aa:	212c      	movs	r1, #44	; 0x2c
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd53 	bl	8001e58 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	3305      	adds	r3, #5
 80013b8:	2201      	movs	r2, #1
 80013ba:	212d      	movs	r1, #45	; 0x2d
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fd4b 	bl	8001e58 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013c8:	2b20      	cmp	r3, #32
 80013ca:	d854      	bhi.n	8001476 <LIS3DSH_ReadACC+0x136>
 80013cc:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <LIS3DSH_ReadACC+0x94>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	08001459 	.word	0x08001459
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	0800145f 	.word	0x0800145f
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001477 	.word	0x08001477
 8001410:	08001477 	.word	0x08001477
 8001414:	08001465 	.word	0x08001465
 8001418:	08001477 	.word	0x08001477
 800141c:	08001477 	.word	0x08001477
 8001420:	08001477 	.word	0x08001477
 8001424:	08001477 	.word	0x08001477
 8001428:	08001477 	.word	0x08001477
 800142c:	08001477 	.word	0x08001477
 8001430:	08001477 	.word	0x08001477
 8001434:	0800146b 	.word	0x0800146b
 8001438:	08001477 	.word	0x08001477
 800143c:	08001477 	.word	0x08001477
 8001440:	08001477 	.word	0x08001477
 8001444:	08001477 	.word	0x08001477
 8001448:	08001477 	.word	0x08001477
 800144c:	08001477 	.word	0x08001477
 8001450:	08001477 	.word	0x08001477
 8001454:	08001471 	.word	0x08001471
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <LIS3DSH_ReadACC+0x1a0>)
 800145a:	61bb      	str	r3, [r7, #24]
    break;
 800145c:	e00c      	b.n	8001478 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <LIS3DSH_ReadACC+0x1a4>)
 8001460:	61bb      	str	r3, [r7, #24]
    break;
 8001462:	e009      	b.n	8001478 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <LIS3DSH_ReadACC+0x1a8>)
 8001466:	61bb      	str	r3, [r7, #24]
    break;
 8001468:	e006      	b.n	8001478 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <LIS3DSH_ReadACC+0x1ac>)
 800146c:	61bb      	str	r3, [r7, #24]
    break;
 800146e:	e003      	b.n	8001478 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <LIS3DSH_ReadACC+0x1b0>)
 8001472:	61bb      	str	r3, [r7, #24]
    break;
 8001474:	e000      	b.n	8001478 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8001476:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001478:	2300      	movs	r3, #0
 800147a:	77fb      	strb	r3, [r7, #31]
 800147c:	e027      	b.n	80014ce <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3301      	adds	r3, #1
 8001484:	3320      	adds	r3, #32
 8001486:	443b      	add	r3, r7
 8001488:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	7ffa      	ldrb	r2, [r7, #31]
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	3220      	adds	r2, #32
 8001494:	443a      	add	r2, r7
 8001496:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 800149a:	4413      	add	r3, r2
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80014a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ac:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c0:	ee17 2a90 	vmov	r2, s15
 80014c4:	b212      	sxth	r2, r2
 80014c6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	3301      	adds	r3, #1
 80014cc:	77fb      	strb	r3, [r7, #31]
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d9d4      	bls.n	800147e <LIS3DSH_ReadACC+0x13e>
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	3d75c28f 	.word	0x3d75c28f
 80014e4:	3df5c28f 	.word	0x3df5c28f
 80014e8:	3e3851ec 	.word	0x3e3851ec
 80014ec:	3e75c28f 	.word	0x3e75c28f
 80014f0:	3f3ae148 	.word	0x3f3ae148

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f000 fff3 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f8ab 	bl	8001658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f000 f9cf 	bl	80018a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001506:	f008 fcf5 	bl	8009ef4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800150a:	f000 f90f 	bl	800172c <MX_I2C1_Init>
  MX_I2S3_Init();
 800150e:	f000 f93b 	bl	8001788 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001512:	f000 f967 	bl	80017e4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001516:	f000 f99b 	bl	8001850 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if (BSP_ACCELERO_Init()!= ACCELERO_OK)
 800151a:	f000 fcd7 	bl	8001ecc <BSP_ACCELERO_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <main+0x4a>
  {
	  while(1){
		  CDC_Transmit_FS("ACC_Init_Error\r\n",16);
 8001524:	2110      	movs	r1, #16
 8001526:	4842      	ldr	r0, [pc, #264]	; (8001630 <main+0x13c>)
 8001528:	f008 fda2 	bl	800a070 <CDC_Transmit_FS>
		  HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 800152c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001530:	4840      	ldr	r0, [pc, #256]	; (8001634 <main+0x140>)
 8001532:	f001 fc17 	bl	8002d64 <HAL_GPIO_ReadPin>
		  HAL_Delay(100);
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f001 f846 	bl	80025c8 <HAL_Delay>
	  while(1){
 800153c:	e7f2      	b.n	8001524 <main+0x30>
	  }
  }
  AI_Init();
 800153e:	f000 fa9d 	bl	8001a7c <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	  BSP_ACCELERO_GetXYZ(accData);
 8001546:	483c      	ldr	r0, [pc, #240]	; (8001638 <main+0x144>)
 8001548:	f000 fd4c 	bl	8001fe4 <BSP_ACCELERO_GetXYZ>

	      /*CDC_Transmit_FS("Hello\r\n",7);
	  	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);*/
	  	 /* Normalize data to [-1; 1] and accumulate into input buffer */
	  	      /* Note: window overlapping can be managed here */
	  aiInData[write_index + 0] = (float) accData[0] / 4000.0f;
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <main+0x144>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800163c <main+0x148>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	4a37      	ldr	r2, [pc, #220]	; (8001640 <main+0x14c>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	edc3 7a00 	vstr	s15, [r3]
	  aiInData[write_index + 1] = (float) accData[1] / 4000.0f;
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <main+0x144>)
 8001570:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3301      	adds	r3, #1
 8001580:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800163c <main+0x148>
 8001584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <main+0x14c>)
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	edc3 7a00 	vstr	s15, [r3]
	  aiInData[write_index + 2] = (float) accData[2] / 4000.0f;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <main+0x144>)
 8001594:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3302      	adds	r3, #2
 80015a4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800163c <main+0x148>
 80015a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ac:	4a24      	ldr	r2, [pc, #144]	; (8001640 <main+0x14c>)
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	edc3 7a00 	vstr	s15, [r3]
	  write_index += 3;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3303      	adds	r3, #3
 80015ba:	60fb      	str	r3, [r7, #12]
	  if (write_index == AI_NETWORK_IN_1_SIZE) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b4e      	cmp	r3, #78	; 0x4e
 80015c0:	d12c      	bne.n	800161c <main+0x128>
		write_index = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
		printf("Running inference\r\n");
 80015c6:	481f      	ldr	r0, [pc, #124]	; (8001644 <main+0x150>)
 80015c8:	f00c fbec 	bl	800dda4 <puts>
		AI_Run(aiInData, aiOutData);
 80015cc:	491e      	ldr	r1, [pc, #120]	; (8001648 <main+0x154>)
 80015ce:	481c      	ldr	r0, [pc, #112]	; (8001640 <main+0x14c>)
 80015d0:	f000 fa90 	bl	8001af4 <AI_Run>
		/* Output results */
		for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	e00f      	b.n	80015fa <main+0x106>
		  printf("%8.6f ", aiOutData[i]);         }
 80015da:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <main+0x154>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4817      	ldr	r0, [pc, #92]	; (800164c <main+0x158>)
 80015f0:	f00c fb72 	bl	800dcd8 <iprintf>
		for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d9ec      	bls.n	80015da <main+0xe6>
		uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001600:	2103      	movs	r1, #3
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <main+0x154>)
 8001604:	f000 faae 	bl	8001b64 <argmax>
 8001608:	6078      	str	r0, [r7, #4]
		printf(": %d - %s\r\n", (int) class, activities[class]);         }
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <main+0x15c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	461a      	mov	r2, r3
 8001616:	480f      	ldr	r0, [pc, #60]	; (8001654 <main+0x160>)
 8001618:	f00c fb5e 	bl	800dcd8 <iprintf>
	  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <main+0x140>)
 8001622:	f001 fbd0 	bl	8002dc6 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001626:	2032      	movs	r0, #50	; 0x32
 8001628:	f000 ffce 	bl	80025c8 <HAL_Delay>
	  BSP_ACCELERO_GetXYZ(accData);
 800162c:	e78b      	b.n	8001546 <main+0x52>
 800162e:	bf00      	nop
 8001630:	0800fe9c 	.word	0x0800fe9c
 8001634:	40020c00 	.word	0x40020c00
 8001638:	20000ee0 	.word	0x20000ee0
 800163c:	457a0000 	.word	0x457a0000
 8001640:	20000eec 	.word	0x20000eec
 8001644:	0800feb0 	.word	0x0800feb0
 8001648:	20001024 	.word	0x20001024
 800164c:	0800fec4 	.word	0x0800fec4
 8001650:	20000068 	.word	0x20000068
 8001654:	0800fecc 	.word	0x0800fecc

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	; 0x50
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	2230      	movs	r2, #48	; 0x30
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f00c fc7c 	bl	800df64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <SystemClock_Config+0xcc>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <SystemClock_Config+0xcc>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <SystemClock_Config+0xcc>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <SystemClock_Config+0xd0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <SystemClock_Config+0xd0>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <SystemClock_Config+0xd0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c8:	2304      	movs	r3, #4
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016cc:	23a8      	movs	r3, #168	; 0xa8
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016d4:	2307      	movs	r3, #7
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fbc3 	bl	8004e68 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e8:	f000 fa82 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2105      	movs	r1, #5
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fe24 	bl	8005358 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001716:	f000 fa6b 	bl	8001bf0 <Error_Handler>
  }
}
 800171a:	bf00      	nop
 800171c:	3750      	adds	r7, #80	; 0x50
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_I2C1_Init+0x50>)
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <MX_I2C1_Init+0x54>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_I2C1_Init+0x50>)
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_I2C1_Init+0x58>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_I2C1_Init+0x50>)
 800174a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_I2C1_Init+0x50>)
 800176a:	f001 fb47 	bl	8002dfc <HAL_I2C_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001774:	f000 fa3c 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000da4 	.word	0x20000da4
 8001780:	40005400 	.word	0x40005400
 8001784:	000186a0 	.word	0x000186a0

08001788 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_I2S3_Init+0x54>)
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <MX_I2S3_Init+0x58>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2S3_Init+0x54>)
 8001794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001798:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_I2S3_Init+0x54>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_I2S3_Init+0x54>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_I2S3_Init+0x54>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_I2S3_Init+0x54>)
 80017ae:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80017b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_I2S3_Init+0x54>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_I2S3_Init+0x54>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_I2S3_Init+0x54>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_I2S3_Init+0x54>)
 80017c8:	f001 fc5c 	bl	8003084 <HAL_I2S_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80017d2:	f000 fa0d 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000df8 	.word	0x20000df8
 80017e0:	40003c00 	.word	0x40003c00

080017e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_SPI1_Init+0x64>)
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <MX_SPI1_Init+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_SPI1_Init+0x64>)
 80017f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_SPI1_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_SPI1_Init+0x64>)
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_SPI1_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_SPI1_Init+0x64>)
 8001830:	220a      	movs	r2, #10
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_SPI1_Init+0x64>)
 8001836:	f004 f8f1 	bl	8005a1c <HAL_SPI_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001840:	f000 f9d6 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000e40 	.word	0x20000e40
 800184c:	40013000 	.word	0x40013000

08001850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART3_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_USART3_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_USART3_UART_Init+0x4c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART3_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART3_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART3_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART3_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART3_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART3_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART3_UART_Init+0x4c>)
 8001888:	f004 fc0c 	bl	80060a4 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001892:	f000 f9ad 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000e98 	.word	0x20000e98
 80018a0:	40004800 	.word	0x40004800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a68      	ldr	r2, [pc, #416]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a61      	ldr	r2, [pc, #388]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a53      	ldr	r2, [pc, #332]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <MX_GPIO_Init+0x1c0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2108      	movs	r1, #8
 8001966:	4840      	ldr	r0, [pc, #256]	; (8001a68 <MX_GPIO_Init+0x1c4>)
 8001968:	f001 fa14 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2101      	movs	r1, #1
 8001970:	483e      	ldr	r0, [pc, #248]	; (8001a6c <MX_GPIO_Init+0x1c8>)
 8001972:	f001 fa0f 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001976:	2200      	movs	r2, #0
 8001978:	f24f 0110 	movw	r1, #61456	; 0xf010
 800197c:	483c      	ldr	r0, [pc, #240]	; (8001a70 <MX_GPIO_Init+0x1cc>)
 800197e:	f001 fa09 	bl	8002d94 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001982:	2308      	movs	r3, #8
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	4833      	ldr	r0, [pc, #204]	; (8001a68 <MX_GPIO_Init+0x1c4>)
 800199a:	f000 ff4b 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800199e:	2301      	movs	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	482d      	ldr	r0, [pc, #180]	; (8001a6c <MX_GPIO_Init+0x1c8>)
 80019b6:	f000 ff3d 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019ba:	2308      	movs	r3, #8
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ca:	2305      	movs	r3, #5
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4825      	ldr	r0, [pc, #148]	; (8001a6c <MX_GPIO_Init+0x1c8>)
 80019d6:	f000 ff2d 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4821      	ldr	r0, [pc, #132]	; (8001a74 <MX_GPIO_Init+0x1d0>)
 80019f0:	f000 ff20 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019f4:	2304      	movs	r3, #4
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	481c      	ldr	r0, [pc, #112]	; (8001a78 <MX_GPIO_Init+0x1d4>)
 8001a08:	f000 ff14 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a0c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a10:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <MX_GPIO_Init+0x1cc>)
 8001a26:	f000 ff05 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_GPIO_Init+0x1cc>)
 8001a3e:	f000 fef9 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_GPIO_Init+0x1c4>)
 8001a58:	f000 feec 	bl	8002834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400

08001a7c <AI_Init>:

/* USER CODE BEGIN 4 */
static void AI_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <AI_Init+0x64>)
 8001a84:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001a86:	463b      	mov	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <AI_Init+0x68>)
 8001a8e:	f009 f8dd 	bl	800ac4c <ai_network_create_and_init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8001a96:	793b      	ldrb	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00a      	beq.n	8001ab2 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001a9c:	793b      	ldrb	r3, [r7, #4]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <AI_Init+0x6c>)
 8001aaa:	f00c f915 	bl	800dcd8 <iprintf>
    Error_Handler();
 8001aae:	f000 f89f 	bl	8001bf0 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <AI_Init+0x68>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f009 f945 	bl	800ad48 <ai_network_inputs_get>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <AI_Init+0x70>)
 8001ac2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <AI_Init+0x68>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f009 f956 	bl	800ad7c <ai_network_outputs_get>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <AI_Init+0x74>)
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20001030 	.word	0x20001030
 8001ae4:	20000ee8 	.word	0x20000ee8
 8001ae8:	0800fed8 	.word	0x0800fed8
 8001aec:	20001710 	.word	0x20001710
 8001af0:	20001714 	.word	0x20001714

08001af4 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <AI_Run+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <AI_Run+0x64>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <AI_Run+0x68>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <AI_Run+0x60>)
 8001b14:	6811      	ldr	r1, [r2, #0]
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <AI_Run+0x64>)
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f009 f984 	bl	800ae28 <ai_network_run>
 8001b20:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d011      	beq.n	8001b4c <AI_Run+0x58>
    err = ai_network_get_error(network);
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <AI_Run+0x68>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f009 f86b 	bl	800ac08 <ai_network_get_error>
 8001b32:	4603      	mov	r3, r0
 8001b34:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001b36:	7a3b      	ldrb	r3, [r7, #8]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001b40:	461a      	mov	r2, r3
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <AI_Run+0x6c>)
 8001b44:	f00c f8c8 	bl	800dcd8 <iprintf>
    Error_Handler();
 8001b48:	f000 f852 	bl	8001bf0 <Error_Handler>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20001710 	.word	0x20001710
 8001b58:	20001714 	.word	0x20001714
 8001b5c:	20000ee8 	.word	0x20000ee8
 8001b60:	0800ff04 	.word	0x0800ff04

08001b64 <argmax>:
static uint32_t argmax(const float * values, uint32_t len)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001b78:	2301      	movs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e017      	b.n	8001bae <argmax+0x4a>
    if (values[i] > max_value) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d507      	bpl.n	8001ba8 <argmax+0x44>
      max_value = values[i];
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]
      max_index = i;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3e3      	bcc.n	8001b7e <argmax+0x1a>
    }
  }
  return max_index;
 8001bb6:	693b      	ldr	r3, [r7, #16]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_write>:


int _write(int fd, char * ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <_write+0x28>)
 8001bdc:	f004 fab2 	bl	8006144 <HAL_UART_Transmit>
  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000e98 	.word	0x20000e98

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <SPIx_Init+0x6c>)
 8001c02:	f004 f965 	bl	8005ed0 <HAL_SPI_GetState>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d12a      	bne.n	8001c62 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <SPIx_Init+0x6c>)
 8001c0e:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <SPIx_Init+0x70>)
 8001c10:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <SPIx_Init+0x6c>)
 8001c14:	2218      	movs	r2, #24
 8001c16:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <SPIx_Init+0x6c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <SPIx_Init+0x6c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <SPIx_Init+0x6c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <SPIx_Init+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <SPIx_Init+0x6c>)
 8001c32:	2207      	movs	r2, #7
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <SPIx_Init+0x6c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <SPIx_Init+0x6c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <SPIx_Init+0x6c>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <SPIx_Init+0x6c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SPIx_Init+0x6c>)
 8001c52:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c56:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8001c58:	f000 f836 	bl	8001cc8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <SPIx_Init+0x6c>)
 8001c5e:	f003 fedd 	bl	8005a1c <HAL_SPI_Init>
  }
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20001718 	.word	0x20001718
 8001c6c:	40013000 	.word	0x40013000

08001c70 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <SPIx_WriteRead+0x38>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f107 020f 	add.w	r2, r7, #15
 8001c86:	1df9      	adds	r1, r7, #7
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <SPIx_WriteRead+0x3c>)
 8001c8e:	f003 ff76 	bl	8005b7e <HAL_SPI_TransmitReceive>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001c98:	f000 f80a 	bl	8001cb0 <SPIx_Error>
  }
  
  return receivedbyte;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000074 	.word	0x20000074
 8001cac:	20001718 	.word	0x20001718

08001cb0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <SPIx_Error+0x14>)
 8001cb6:	f003 ff3a 	bl	8005b2e <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 8001cba:	f7ff ff9f 	bl	8001bfc <SPIx_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20001718 	.word	0x20001718

08001cc8 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <SPIx_MspInit+0x68>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <SPIx_MspInit+0x68>)
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <SPIx_MspInit+0x68>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <SPIx_MspInit+0x68>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <SPIx_MspInit+0x68>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <SPIx_MspInit+0x68>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 8001d06:	23e0      	movs	r3, #224	; 0xe0
 8001d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001d16:	2305      	movs	r3, #5
 8001d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <SPIx_MspInit+0x6c>)
 8001d22:	f000 fd87 	bl	8002834 <HAL_GPIO_Init>
}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <ACCELERO_IO_Init+0x54>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <ACCELERO_IO_Init+0x54>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <ACCELERO_IO_Init+0x54>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001d66:	2301      	movs	r3, #1
 8001d68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4808      	ldr	r0, [pc, #32]	; (8001d90 <ACCELERO_IO_Init+0x58>)
 8001d70:	f000 fd60 	bl	8002834 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001d74:	2201      	movs	r2, #1
 8001d76:	2108      	movs	r1, #8
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <ACCELERO_IO_Init+0x58>)
 8001d7a:	f001 f80b 	bl	8002d94 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8001d7e:	f7ff ff3d 	bl	8001bfc <SPIx_Init>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40021000 	.word	0x40021000

08001d94 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <ACCELERO_IO_ITConfig+0x58>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <ACCELERO_IO_ITConfig+0x58>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <ACCELERO_IO_ITConfig+0x58>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8001db6:	2302      	movs	r3, #2
 8001db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001dba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <ACCELERO_IO_ITConfig+0x5c>)
 8001dce:	f000 fd31 	bl	8002834 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	210f      	movs	r1, #15
 8001dd6:	2007      	movs	r0, #7
 8001dd8:	f000 fcf5 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8001ddc:	2007      	movs	r0, #7
 8001dde:	f000 fd0e 	bl	80027fe <HAL_NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40021000 	.word	0x40021000

08001df4 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
 8001e00:	4613      	mov	r3, r2
 8001e02:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001e04:	883b      	ldrh	r3, [r7, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d903      	bls.n	8001e12 <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001e12:	2200      	movs	r2, #0
 8001e14:	2108      	movs	r1, #8
 8001e16:	480f      	ldr	r0, [pc, #60]	; (8001e54 <ACCELERO_IO_Write+0x60>)
 8001e18:	f000 ffbc 	bl	8002d94 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff26 	bl	8001c70 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001e24:	e00a      	b.n	8001e3c <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff20 	bl	8001c70 <SPIx_WriteRead>
    NumByteToWrite--;
 8001e30:	883b      	ldrh	r3, [r7, #0]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001e3c:	883b      	ldrh	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f1      	bne.n	8001e26 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001e42:	2201      	movs	r2, #1
 8001e44:	2108      	movs	r1, #8
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <ACCELERO_IO_Write+0x60>)
 8001e48:	f000 ffa4 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000

08001e58 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
 8001e64:	4613      	mov	r3, r2
 8001e66:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001e68:	883b      	ldrh	r3, [r7, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d904      	bls.n	8001e78 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001e74:	70fb      	strb	r3, [r7, #3]
 8001e76:	e003      	b.n	8001e80 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e7e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001e80:	2200      	movs	r2, #0
 8001e82:	2108      	movs	r1, #8
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <ACCELERO_IO_Read+0x70>)
 8001e86:	f000 ff85 	bl	8002d94 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff feef 	bl	8001c70 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001e92:	e00c      	b.n	8001eae <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff feeb 	bl	8001c70 <SPIx_WriteRead>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001ea2:	883b      	ldrh	r3, [r7, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001eae:	883b      	ldrh	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ef      	bne.n	8001e94 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2108      	movs	r1, #8
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <ACCELERO_IO_Read+0x70>)
 8001eba:	f000 ff6b 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 8001eda:	2300      	movs	r3, #0
 8001edc:	723b      	strb	r3, [r7, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	727b      	strb	r3, [r7, #9]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <BSP_ACCELERO_Init+0x10c>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4798      	blx	r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b3b      	cmp	r3, #59	; 0x3b
 8001ef0:	d138      	bne.n	8001f64 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <BSP_ACCELERO_Init+0x110>)
 8001ef4:	4a38      	ldr	r2, [pc, #224]	; (8001fd8 <BSP_ACCELERO_Init+0x10c>)
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8001ef8:	2340      	movs	r3, #64	; 0x40
 8001efa:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 8001efc:	2300      	movs	r3, #0
 8001efe:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8001f00:	2307      	movs	r3, #7
 8001f02:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001f0c:	7b7a      	ldrb	r2, [r7, #13]
 8001f0e:	7b3b      	ldrb	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8001f1a:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001f28:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <BSP_ACCELERO_Init+0x110>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	8aba      	ldrh	r2, [r7, #20]
 8001f30:	4610      	mov	r0, r2
 8001f32:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 8001f34:	2320      	movs	r3, #32
 8001f36:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001f40:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 8001f42:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 8001f48:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <BSP_ACCELERO_Init+0x110>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	8aba      	ldrh	r2, [r7, #20]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
 8001f62:	e034      	b.n	8001fce <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <BSP_ACCELERO_Init+0x114>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4798      	blx	r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f6e:	d12c      	bne.n	8001fca <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <BSP_ACCELERO_Init+0x110>)
 8001f72:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <BSP_ACCELERO_Init+0x114>)
 8001f74:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 8001f76:	2360      	movs	r3, #96	; 0x60
 8001f78:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8001f86:	2300      	movs	r3, #0
 8001f88:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001f8e:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001f90:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001f98:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001fa0:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 8001fa6:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	8abb      	ldrh	r3, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <BSP_ACCELERO_Init+0x110>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	8aba      	ldrh	r2, [r7, #20]
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
 8001fc8:	e001      	b.n	8001fce <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20001770 	.word	0x20001770
 8001fe0:	20000034 	.word	0x20000034

08001fe4 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <BSP_ACCELERO_GetXYZ+0x50>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d018      	beq.n	800202c <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <BSP_ACCELERO_GetXYZ+0x50>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <BSP_ACCELERO_GetXYZ+0x50>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <BSP_ACCELERO_GetXYZ+0x54>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10e      	bne.n	800202c <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	425b      	negs	r3, r3
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3302      	adds	r3, #2
 8002028:	b212      	sxth	r2, r2
 800202a:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20001770 	.word	0x20001770
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_MspInit+0x4c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_MspInit+0x4c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_MspInit+0x4c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x4c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x4c>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x4c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800207a:	2007      	movs	r0, #7
 800207c:	f000 fb98 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_I2C_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12c      	bne.n	8002108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80020ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d0:	2312      	movs	r3, #18
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020dc:	2304      	movs	r3, #4
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <HAL_I2C_MspInit+0x8c>)
 80020e8:	f000 fba4 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_I2C_MspInit+0x88>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400

0800211c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <HAL_I2S_MspInit+0x110>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d16b      	bne.n	8002224 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fb1b 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002168:	f7ff fd42 	bl	8001bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_I2S_MspInit+0x114>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <HAL_I2S_MspInit+0x114>)
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_I2S_MspInit+0x114>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_I2S_MspInit+0x114>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_I2S_MspInit+0x114>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_I2S_MspInit+0x114>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_I2S_MspInit+0x114>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4a20      	ldr	r2, [pc, #128]	; (8002230 <HAL_I2S_MspInit+0x114>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_I2S_MspInit+0x114>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80021c0:	2310      	movs	r3, #16
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d0:	2306      	movs	r3, #6
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	4619      	mov	r1, r3
 80021da:	4816      	ldr	r0, [pc, #88]	; (8002234 <HAL_I2S_MspInit+0x118>)
 80021dc:	f000 fb2a 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80021e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f2:	2306      	movs	r3, #6
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	480e      	ldr	r0, [pc, #56]	; (8002238 <HAL_I2S_MspInit+0x11c>)
 80021fe:	f000 fb19 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8002214:	2305      	movs	r3, #5
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <HAL_I2S_MspInit+0x11c>)
 8002220:	f000 fb08 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3738      	adds	r7, #56	; 0x38
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40003c00 	.word	0x40003c00
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020800 	.word	0x40020800

0800223c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_SPI_MspInit+0x84>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12b      	bne.n	80022b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002296:	23e0      	movs	r3, #224	; 0xe0
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_SPI_MspInit+0x8c>)
 80022b2:	f000 fabf 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40013000 	.word	0x40013000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000

080022cc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_SPI_MspDeInit+0x30>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d109      	bne.n	80022f2 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_SPI_MspDeInit+0x34>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_SPI_MspDeInit+0x34>)
 80022e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80022ea:	21e0      	movs	r1, #224	; 0xe0
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_SPI_MspDeInit+0x38>)
 80022ee:	f000 fc3d 	bl	8002b6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40013000 	.word	0x40013000
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_UART_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12c      	bne.n	8002384 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0x88>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002362:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002374:	2307      	movs	r3, #7
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4619      	mov	r1, r3
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_UART_MspInit+0x8c>)
 8002380:	f000 fa58 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40004800 	.word	0x40004800
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 f8d0 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <OTG_FS_IRQHandler+0x10>)
 80023f2:	f001 fc2b 	bl	8003c4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20002c5c 	.word	0x20002c5c

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f00b fdfa 	bl	800e028 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2001c000 	.word	0x2001c000
 8002460:	00000800 	.word	0x00000800
 8002464:	20001774 	.word	0x20001774
 8002468:	20003568 	.word	0x20003568

0800246c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002494:	f7ff ffea 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800249a:	490d      	ldr	r1, [pc, #52]	; (80024d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b0:	4c0a      	ldr	r4, [pc, #40]	; (80024dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024be:	f00b fdb9 	bl	800e034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c2:	f7ff f817 	bl	80014f4 <main>
  bx  lr    
 80024c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024c8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	20000d88 	.word	0x20000d88
  ldr r2, =_sidata
 80024d4:	0801c04c 	.word	0x0801c04c
  ldr r2, =_sbss
 80024d8:	20000d88 	.word	0x20000d88
  ldr r4, =_ebss
 80024dc:	20003564 	.word	0x20003564

080024e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_Init+0x40>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_Init+0x40>)
 80024ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_Init+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <HAL_Init+0x40>)
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_Init+0x40>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f000 f94f 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002512:	2000      	movs	r0, #0
 8002514:	f000 f808 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002518:	f7ff fd90 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023c00 	.word	0x40023c00

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_InitTick+0x54>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x58>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f967 	bl	800281a <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d80a      	bhi.n	8002572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f000 f92f 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <HAL_InitTick+0x5c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000078 	.word	0x20000078
 8002580:	20000080 	.word	0x20000080
 8002584:	2000007c 	.word	0x2000007c

08002588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x20>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x24>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_IncTick+0x24>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000080 	.word	0x20000080
 80025ac:	20001778 	.word	0x20001778

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20001778 	.word	0x20001778

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff ffee 	bl	80025b0 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000080 	.word	0x20000080

08002610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff29 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff3e 	bl	8002658 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff8e 	bl	8002704 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5d 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff31 	bl	8002674 <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa2 	bl	800276c <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e16b      	b.n	8002b28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 815a 	bne.w	8002b22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d005      	beq.n	8002886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	2b02      	cmp	r3, #2
 8002884:	d130      	bne.n	80028e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d017      	beq.n	8002924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d123      	bne.n	8002978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80b4 	beq.w	8002b22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b60      	ldr	r3, [pc, #384]	; (8002b40 <HAL_GPIO_Init+0x30c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a5f      	ldr	r2, [pc, #380]	; (8002b40 <HAL_GPIO_Init+0x30c>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_GPIO_Init+0x30c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d6:	4a5b      	ldr	r2, [pc, #364]	; (8002b44 <HAL_GPIO_Init+0x310>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_GPIO_Init+0x314>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02b      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_GPIO_Init+0x318>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d025      	beq.n	8002a56 <HAL_GPIO_Init+0x222>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <HAL_GPIO_Init+0x31c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01f      	beq.n	8002a52 <HAL_GPIO_Init+0x21e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4f      	ldr	r2, [pc, #316]	; (8002b54 <HAL_GPIO_Init+0x320>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d019      	beq.n	8002a4e <HAL_GPIO_Init+0x21a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_GPIO_Init+0x324>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_GPIO_Init+0x216>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4d      	ldr	r2, [pc, #308]	; (8002b5c <HAL_GPIO_Init+0x328>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00d      	beq.n	8002a46 <HAL_GPIO_Init+0x212>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x32c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <HAL_GPIO_Init+0x20e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_GPIO_Init+0x330>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_GPIO_Init+0x20a>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00e      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a3e:	2308      	movs	r3, #8
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x228>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6c:	4935      	ldr	r1, [pc, #212]	; (8002b44 <HAL_GPIO_Init+0x310>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9e:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac8:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af2:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b1c:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae90 	bls.w	8002850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40021400 	.word	0x40021400
 8002b60:	40021800 	.word	0x40021800
 8002b64:	40021c00 	.word	0x40021c00
 8002b68:	40013c00 	.word	0x40013c00

08002b6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e0cd      	b.n	8002d24 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	f040 80bd 	bne.w	8002d1e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <HAL_GPIO_DeInit+0x1d0>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a5d      	ldr	r2, [pc, #372]	; (8002d40 <HAL_GPIO_DeInit+0x1d4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <HAL_GPIO_DeInit+0xba>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a5c      	ldr	r2, [pc, #368]	; (8002d44 <HAL_GPIO_DeInit+0x1d8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d025      	beq.n	8002c22 <HAL_GPIO_DeInit+0xb6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a5b      	ldr	r2, [pc, #364]	; (8002d48 <HAL_GPIO_DeInit+0x1dc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01f      	beq.n	8002c1e <HAL_GPIO_DeInit+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a5a      	ldr	r2, [pc, #360]	; (8002d4c <HAL_GPIO_DeInit+0x1e0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <HAL_GPIO_DeInit+0xae>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a59      	ldr	r2, [pc, #356]	; (8002d50 <HAL_GPIO_DeInit+0x1e4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_DeInit+0xaa>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_GPIO_DeInit+0x1e8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00d      	beq.n	8002c12 <HAL_GPIO_DeInit+0xa6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_GPIO_DeInit+0x1ec>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_DeInit+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a56      	ldr	r2, [pc, #344]	; (8002d5c <HAL_GPIO_DeInit+0x1f0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_GPIO_DeInit+0x9e>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00e      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	e00c      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c0e:	2306      	movs	r3, #6
 8002c10:	e00a      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e008      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e004      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_DeInit+0xbc>
 8002c26:	2300      	movs	r3, #0
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	f002 0203 	and.w	r2, r2, #3
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	4093      	lsls	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d132      	bne.n	8002c9e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c38:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4947      	ldr	r1, [pc, #284]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	4944      	ldr	r1, [pc, #272]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c54:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4940      	ldr	r1, [pc, #256]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	493d      	ldr	r1, [pc, #244]	; (8002d60 <HAL_GPIO_DeInit+0x1f4>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c80:	4a2e      	ldr	r2, [pc, #184]	; (8002d3c <HAL_GPIO_DeInit+0x1d0>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	482a      	ldr	r0, [pc, #168]	; (8002d3c <HAL_GPIO_DeInit+0x1d0>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	400a      	ands	r2, r1
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	08da      	lsrs	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3208      	adds	r2, #8
 8002cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	08d2      	lsrs	r2, r2, #3
 8002cd4:	4019      	ands	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3208      	adds	r2, #8
 8002cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2103      	movs	r1, #3
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	401a      	ands	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f af2e 	bls.w	8002b88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40021400 	.word	0x40021400
 8002d58:	40021800 	.word	0x40021800
 8002d5c:	40021c00 	.word	0x40021c00
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	041a      	lsls	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff f932 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f002 fc72 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	; (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	; (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	; (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	; (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e128      	b.n	80032e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <HAL_I2S_Init+0x26c>)
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff f833 	bl	800211c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030cc:	f023 030f 	bic.w	r3, r3, #15
 80030d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d060      	beq.n	80031a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030ea:	2310      	movs	r3, #16
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030f0:	2320      	movs	r3, #32
 80030f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d802      	bhi.n	8003102 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003102:	2001      	movs	r0, #1
 8003104:	f002 fc2a 	bl	800595c <HAL_RCCEx_GetPeriphCLKFreq>
 8003108:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d125      	bne.n	8003160 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	fbb2 f2f3 	udiv	r2, r2, r3
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	3305      	adds	r3, #5
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e01f      	b.n	800317e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	3305      	adds	r3, #5
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e00e      	b.n	800317e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	3305      	adds	r3, #5
 800317c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4a5c      	ldr	r2, [pc, #368]	; (80032f4 <HAL_I2S_Init+0x270>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	e003      	b.n	80031ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031a4:	2302      	movs	r3, #2
 80031a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d902      	bls.n	80031b8 <HAL_I2S_Init+0x134>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2bff      	cmp	r3, #255	; 0xff
 80031b6:	d907      	bls.n	80031c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e08f      	b.n	80032e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	430a      	orrs	r2, r1
 80031da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6851      	ldr	r1, [r2, #4]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6892      	ldr	r2, [r2, #8]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68d2      	ldr	r2, [r2, #12]
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6992      	ldr	r2, [r2, #24]
 80031fe:	430a      	orrs	r2, r1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d161      	bne.n	80032d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <HAL_I2S_Init+0x274>)
 8003218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a37      	ldr	r2, [pc, #220]	; (80032fc <HAL_I2S_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_I2S_Init+0x1a4>
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_I2S_Init+0x27c>)
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x1a8>
 8003228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4932      	ldr	r1, [pc, #200]	; (80032fc <HAL_I2S_Init+0x278>)
 8003234:	428a      	cmp	r2, r1
 8003236:	d101      	bne.n	800323c <HAL_I2S_Init+0x1b8>
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <HAL_I2S_Init+0x27c>)
 800323a:	e001      	b.n	8003240 <HAL_I2S_Init+0x1bc>
 800323c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003240:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003244:	f023 030f 	bic.w	r3, r3, #15
 8003248:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_I2S_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_I2S_Init+0x1d4>
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_I2S_Init+0x27c>)
 8003256:	e001      	b.n	800325c <HAL_I2S_Init+0x1d8>
 8003258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325c:	2202      	movs	r2, #2
 800325e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_I2S_Init+0x278>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_I2S_Init+0x1ea>
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_I2S_Init+0x27c>)
 800326c:	e001      	b.n	8003272 <HAL_I2S_Init+0x1ee>
 800326e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327e:	d003      	beq.n	8003288 <HAL_I2S_Init+0x204>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e001      	b.n	8003294 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800329e:	4313      	orrs	r3, r2
 80032a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_I2S_Init+0x278>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_I2S_Init+0x24c>
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_I2S_Init+0x27c>)
 80032ce:	e001      	b.n	80032d4 <HAL_I2S_Init+0x250>
 80032d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d4:	897a      	ldrh	r2, [r7, #10]
 80032d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	080033fb 	.word	0x080033fb
 80032f4:	cccccccd 	.word	0xcccccccd
 80032f8:	08003511 	.word	0x08003511
 80032fc:	40003800 	.word	0x40003800
 8003300:	40003400 	.word	0x40003400

08003304 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003384:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffb8 	bl	8003304 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	b292      	uxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10e      	bne.n	80033f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff93 	bl	8003318 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b04      	cmp	r3, #4
 8003414:	d13a      	bne.n	800348c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d109      	bne.n	8003434 <I2S_IRQHandler+0x3a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d102      	bne.n	8003434 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffb4 	bl	800339c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d126      	bne.n	800348c <I2S_IRQHandler+0x92>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d11f      	bne.n	800348c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800345a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff50 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d136      	bne.n	8003506 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d109      	bne.n	80034b6 <I2S_IRQHandler+0xbc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d102      	bne.n	80034b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff45 	bl	8003340 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d122      	bne.n	8003506 <I2S_IRQHandler+0x10c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d11b      	bne.n	8003506 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff13 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a92      	ldr	r2, [pc, #584]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800352a:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a8b      	ldr	r2, [pc, #556]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354a:	e001      	b.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355c:	d004      	beq.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8099 	bne.w	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d107      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f925 	bl	80037cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9c8 	bl	800392c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d13a      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d035      	beq.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035ce:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fe88 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	f040 80c3 	bne.w	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80bd 	beq.w	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003642:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a49      	ldr	r2, [pc, #292]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003650:	e001      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4944      	ldr	r1, [pc, #272]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365e:	428b      	cmp	r3, r1
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe4a 	bl	800332c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003698:	e089      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d107      	bne.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8be 	bl	8003830 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f8fd 	bl	80038c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d12f      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02a      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036fe:	e001      	b.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4919      	ldr	r1, [pc, #100]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370c:	428b      	cmp	r3, r1
 800370e:	d101      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003712:	e001      	b.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fdfa 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b08      	cmp	r3, #8
 8003740:	d136      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d031      	beq.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4902      	ldr	r1, [pc, #8]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003766:	428b      	cmp	r3, r1
 8003768:	d106      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800376a:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376c:	e006      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800376e:	bf00      	nop
 8003770:	40003800 	.word	0x40003800
 8003774:	40003400 	.word	0x40003400
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003790:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fdc0 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ac:	e000      	b.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ae:	bf00      	nop
}
 80037b0:	bf00      	nop
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c99      	adds	r1, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6251      	str	r1, [r2, #36]	; 0x24
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffc9 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6251      	str	r1, [r2, #36]	; 0x24
 8003842:	8819      	ldrh	r1, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <I2SEx_TxISR_I2SExt+0x22>
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003850:	e001      	b.n	8003856 <I2SEx_TxISR_I2SExt+0x26>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	460a      	mov	r2, r1
 8003858:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d121      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <I2SEx_TxISR_I2SExt+0x50>
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 800387e:	e001      	b.n	8003884 <I2SEx_TxISR_I2SExt+0x54>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	490d      	ldr	r1, [pc, #52]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d101      	bne.n	8003894 <I2SEx_TxISR_I2SExt+0x64>
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003892:	e001      	b.n	8003898 <I2SEx_TxISR_I2SExt+0x68>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff81 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40003800 	.word	0x40003800
 80038c4:	40003400 	.word	0x40003400

080038c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68d8      	ldr	r0, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	1c99      	adds	r1, r3, #2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038e0:	b282      	uxth	r2, r0
 80038e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800390a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff4a 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a20      	ldr	r2, [pc, #128]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <I2SEx_RxISR_I2SExt+0x16>
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 8003940:	e001      	b.n	8003946 <I2SEx_RxISR_I2SExt+0x1a>
 8003942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003946:	68d8      	ldr	r0, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	1c99      	adds	r1, r3, #2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003952:	b282      	uxth	r2, r0
 8003954:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d121      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <I2SEx_RxISR_I2SExt+0x50>
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 800397a:	e001      	b.n	8003980 <I2SEx_RxISR_I2SExt+0x54>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d101      	bne.n	8003990 <I2SEx_RxISR_I2SExt+0x64>
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 800398e:	e001      	b.n	8003994 <I2SEx_RxISR_I2SExt+0x68>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003998:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff03 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40003800 	.word	0x40003800
 80039c0:	40003400 	.word	0x40003400

080039c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e101      	b.n	8003bda <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f006 fc85 	bl	800a300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a04:	d102      	bne.n	8003a0c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 f86a 	bl	8006aea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7c1a      	ldrb	r2, [r3, #16]
 8003a1e:	f88d 2000 	strb.w	r2, [sp]
 8003a22:	3304      	adds	r3, #4
 8003a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a26:	f002 ff49 	bl	80068bc <USB_CoreInit>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0ce      	b.n	8003bda <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 f862 	bl	8006b0c <USB_SetCurrentMode>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0bf      	b.n	8003bda <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e04a      	b.n	8003af6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3315      	adds	r3, #21
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3314      	adds	r3, #20
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	b298      	uxth	r0, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	332e      	adds	r3, #46	; 0x2e
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	3318      	adds	r3, #24
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	331c      	adds	r3, #28
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3320      	adds	r3, #32
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	3301      	adds	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	791b      	ldrb	r3, [r3, #4]
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3af      	bcc.n	8003a60 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e044      	b.n	8003b90 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	791b      	ldrb	r3, [r3, #4]
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3b5      	bcc.n	8003b06 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7c1a      	ldrb	r2, [r3, #16]
 8003ba2:	f88d 2000 	strb.w	r2, [sp]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003baa:	f002 fffb 	bl	8006ba4 <USB_DevInit>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e00c      	b.n	8003bda <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 f845 	bl	8007c62 <USB_DevDisconnect>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_Start+0x1c>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e022      	b.n	8003c44 <HAL_PCD_Start+0x62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 ff4c 	bl	8006ac8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f003 fff3 	bl	8007c20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b08d      	sub	sp, #52	; 0x34
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 f8b1 	bl	8007dca <USB_GetMode>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 848c 	bne.w	8004588 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f004 f815 	bl	8007ca4 <USB_ReadInterrupts>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8482 	beq.w	8004586 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 f802 	bl	8007ca4 <USB_ReadInterrupts>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f002 0202 	and.w	r2, r2, #2
 8003cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fff0 	bl	8007ca4 <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d161      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0210 	bic.w	r2, r2, #16
 8003cdc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	0c5b      	lsrs	r3, r3, #17
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d124      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d035      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	6a38      	ldr	r0, [r7, #32]
 8003d2a:	f003 fe27 	bl	800797c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3a:	441a      	add	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d4c:	441a      	add	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	615a      	str	r2, [r3, #20]
 8003d52:	e016      	b.n	8003d82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	0c5b      	lsrs	r3, r3, #17
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d110      	bne.n	8003d82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d66:	2208      	movs	r2, #8
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6a38      	ldr	r0, [r7, #32]
 8003d6c:	f003 fe06 	bl	800797c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7c:	441a      	add	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0210 	orr.w	r2, r2, #16
 8003d90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 ff84 	bl	8007ca4 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da6:	f040 80a7 	bne.w	8003ef8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 ff89 	bl	8007cca <USB_ReadDevAllOutEpInterrupt>
 8003db8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003dba:	e099      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 808e 	beq.w	8003ee4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 ffad 	bl	8007d32 <USB_ReadDevOutEPInterrupt>
 8003dd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	461a      	mov	r2, r3
 8003df2:	2301      	movs	r3, #1
 8003df4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fea3 	bl	8004b44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2308      	movs	r3, #8
 8003e18:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 ff79 	bl	8004d14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d030      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d109      	bne.n	8003e68 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e66:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	78db      	ldrb	r3, [r3, #3]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d108      	bne.n	8003e98 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f006 fb48 	bl	800a528 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f47f af62 	bne.w	8003dbc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 fed1 	bl	8007ca4 <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f0c:	f040 80db 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f003 fef2 	bl	8007cfe <USB_ReadDevAllInEpInterrupt>
 8003f1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f20:	e0cd      	b.n	80040be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80c2 	beq.w	80040b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f003 ff18 	bl	8007d6e <USB_ReadDevInEPInterrupt>
 8003f3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d057      	beq.n	8003ffa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2201      	movs	r2, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	799b      	ldrb	r3, [r3, #6]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d132      	bne.n	8003fee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3320      	adds	r3, #32
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4403      	add	r3, r0
 8003fa8:	331c      	adds	r3, #28
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4419      	add	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4403      	add	r3, r0
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d113      	bne.n	8003fee <HAL_PCD_IRQHandler+0x3a2>
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3324      	adds	r3, #36	; 0x24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f003 ff1f 	bl	8007e2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f006 fa12 	bl	800a41e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2308      	movs	r3, #8
 8004014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	2310      	movs	r3, #16
 8004030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405a:	6a38      	ldr	r0, [r7, #32]
 800405c:	f002 ff06 	bl	8006e6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3310      	adds	r3, #16
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f006 fa5f 	bl	800a54c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	461a      	mov	r2, r3
 800409c:	2302      	movs	r3, #2
 800409e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fcbd 	bl	8004a2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	3301      	adds	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af2e 	bne.w	8003f22 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fdea 	bl	8007ca4 <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040da:	d122      	bne.n	8004122 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004102:	2100      	movs	r1, #0
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fea3 	bl	8004e50 <HAL_PCDEx_LPM_Callback>
 800410a:	e002      	b.n	8004112 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f006 f9fd 	bl	800a50c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f003 fdbc 	bl	8007ca4 <USB_ReadInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d112      	bne.n	800415e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f006 f9b9 	bl	800a4c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800415c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f003 fd9e 	bl	8007ca4 <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	f040 80b7 	bne.w	80042e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2110      	movs	r1, #16
 8004190:	4618      	mov	r0, r3
 8004192:	f002 fe6b 	bl	8006e6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419a:	e046      	b.n	800422a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004202:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800421e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004222:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	3301      	adds	r3, #1
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	4293      	cmp	r3, r2
 8004234:	d3b2      	bcc.n	800419c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004244:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004248:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7bdb      	ldrb	r3, [r3, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004262:	f043 030b 	orr.w	r3, r3, #11
 8004266:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	f043 030b 	orr.w	r3, r3, #11
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	e015      	b.n	80042ac <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004292:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004296:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a6:	f043 030b 	orr.w	r3, r3, #11
 80042aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f003 fdac 	bl	8007e2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 fcdb 	bl	8007ca4 <USB_ReadInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f8:	d123      	bne.n	8004342 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 fd71 	bl	8007de6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f002 fe28 	bl	8006f5e <USB_GetDevSpeed>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681c      	ldr	r4, [r3, #0]
 800431a:	f001 fa09 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 800431e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004324:	461a      	mov	r2, r3
 8004326:	4620      	mov	r0, r4
 8004328:	f002 fb2c 	bl	8006984 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f006 f89e 	bl	800a46e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004340:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f003 fcac 	bl	8007ca4 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f006 f87b 	bl	800a452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 0208 	and.w	r2, r2, #8
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f003 fc97 	bl	8007ca4 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d123      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	e014      	b.n	80043bc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb0a 	bl	80049ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	791b      	ldrb	r3, [r3, #4]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d3e4      	bcc.n	8004392 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f003 fc69 	bl	8007ca4 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043dc:	d13c      	bne.n	8004458 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043de:	2301      	movs	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e02b      	b.n	800443c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	3318      	adds	r3, #24
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d115      	bne.n	8004436 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800440a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	da12      	bge.n	8004436 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3317      	adds	r3, #23
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 faca 	bl	80049ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	3301      	adds	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	791b      	ldrb	r3, [r3, #4]
 8004440:	461a      	mov	r2, r3
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	4293      	cmp	r3, r2
 8004446:	d3cd      	bcc.n	80043e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f003 fc21 	bl	8007ca4 <USB_ReadInterrupts>
 8004462:	4603      	mov	r3, r0
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446c:	d156      	bne.n	800451c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800446e:	2301      	movs	r3, #1
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	e045      	b.n	8004500 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d12e      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da2b      	bge.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80044ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d121      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f6:	6053      	str	r3, [r2, #4]
            break;
 80044f8:	e008      	b.n	800450c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	791b      	ldrb	r3, [r3, #4]
 8004504:	461a      	mov	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	4293      	cmp	r3, r2
 800450a:	d3b3      	bcc.n	8004474 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800451a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f003 fbbf 	bl	8007ca4 <USB_ReadInterrupts>
 8004526:	4603      	mov	r3, r0
 8004528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d10a      	bne.n	8004548 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f006 f81c 	bl	800a570 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f003 fba9 	bl	8007ca4 <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d115      	bne.n	8004588 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f006 f80c 	bl	800a58c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	e000      	b.n	8004588 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004586:	bf00      	nop
    }
  }
}
 8004588:	3734      	adds	r7, #52	; 0x34
 800458a:	46bd      	mov	sp, r7
 800458c:	bd90      	pop	{r4, r7, pc}

0800458e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_PCD_SetAddress+0x1a>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e012      	b.n	80045ce <HAL_PCD_SetAddress+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f003 fb08 	bl	8007bd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	461a      	mov	r2, r3
 80045e4:	4603      	mov	r3, r0
 80045e6:	70fb      	strb	r3, [r7, #3]
 80045e8:	460b      	mov	r3, r1
 80045ea:	803b      	strh	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da0f      	bge.n	800461c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	3310      	adds	r3, #16
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	3304      	adds	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	705a      	strb	r2, [r3, #1]
 800461a:	e00f      	b.n	800463c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	3304      	adds	r3, #4
 8004634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004648:	883b      	ldrh	r3, [r7, #0]
 800464a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	78ba      	ldrb	r2, [r7, #2]
 8004656:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800466a:	78bb      	ldrb	r3, [r7, #2]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d102      	bne.n	8004676 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_PCD_EP_Open+0xae>
 8004680:	2302      	movs	r3, #2
 8004682:	e00e      	b.n	80046a2 <HAL_PCD_EP_Open+0xcc>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	4618      	mov	r0, r3
 8004694:	f002 fc88 	bl	8006fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80046a0:	7afb      	ldrb	r3, [r7, #11]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da0f      	bge.n	80046de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	3310      	adds	r3, #16
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	705a      	strb	r2, [r3, #1]
 80046dc:	e00f      	b.n	80046fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	3304      	adds	r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_PCD_EP_Close+0x6e>
 8004714:	2302      	movs	r3, #2
 8004716:	e00e      	b.n	8004736 <HAL_PCD_EP_Close+0x8c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	4618      	mov	r0, r3
 8004728:	f002 fcc6 	bl	80070b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	460b      	mov	r3, r1
 800474c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	f003 020f 	and.w	r2, r3, #15
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	3304      	adds	r3, #4
 8004766:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	b2da      	uxtb	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	799b      	ldrb	r3, [r3, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d102      	bne.n	800479a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	799b      	ldrb	r3, [r3, #6]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	f002 fd63 	bl	8007270 <USB_EPStartXfer>

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 020f 	and.w	r2, r3, #15
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	460b      	mov	r3, r1
 80047f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	3310      	adds	r3, #16
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2201      	movs	r2, #1
 8004822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	b2da      	uxtb	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	799b      	ldrb	r3, [r3, #6]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d102      	bne.n	800483e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	799b      	ldrb	r3, [r3, #6]
 8004846:	461a      	mov	r2, r3
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	f002 fd11 	bl	8007270 <USB_EPStartXfer>

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	7912      	ldrb	r2, [r2, #4]
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e04f      	b.n	8004916 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487a:	2b00      	cmp	r3, #0
 800487c:	da0f      	bge.n	800489e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 020f 	and.w	r2, r3, #15
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	3310      	adds	r3, #16
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	3304      	adds	r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	705a      	strb	r2, [r3, #1]
 800489c:	e00d      	b.n	80048ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_PCD_EP_SetStall+0x82>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e01d      	b.n	8004916 <HAL_PCD_EP_SetStall+0xbe>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f003 f89f 	bl	8007a2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7999      	ldrb	r1, [r3, #6]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004906:	461a      	mov	r2, r3
 8004908:	f003 fa90 	bl	8007e2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	7912      	ldrb	r2, [r2, #4]
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e042      	b.n	80049c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800493c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004940:	2b00      	cmp	r3, #0
 8004942:	da0f      	bge.n	8004964 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	f003 020f 	and.w	r2, r3, #15
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	3310      	adds	r3, #16
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4413      	add	r3, r2
 8004958:	3304      	adds	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	705a      	strb	r2, [r3, #1]
 8004962:	e00f      	b.n	8004984 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	f003 020f 	and.w	r2, r3, #15
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	3304      	adds	r3, #4
 800497c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_PCD_EP_ClrStall+0x86>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e00e      	b.n	80049c2 <HAL_PCD_EP_ClrStall+0xa4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 f8a8 	bl	8007b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da0c      	bge.n	80049f8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	3310      	adds	r3, #16
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	3304      	adds	r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e00c      	b.n	8004a12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f002 fec7 	bl	80077ac <USB_EPStopXfer>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a22:	7afb      	ldrb	r3, [r7, #11]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	3310      	adds	r3, #16
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d901      	bls.n	8004a64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e06b      	b.n	8004b3c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d902      	bls.n	8004a80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3303      	adds	r3, #3
 8004a84:	089b      	lsrs	r3, r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a88:	e02a      	b.n	8004ae0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d902      	bls.n	8004aa6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3303      	adds	r3, #3
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68d9      	ldr	r1, [r3, #12]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f002 ff1c 	bl	8007900 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	441a      	add	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d809      	bhi.n	8004b0a <PCD_WriteEmptyTxFifo+0xde>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d203      	bcs.n	8004b0a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1bf      	bne.n	8004a8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d811      	bhi.n	8004b3a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	6939      	ldr	r1, [r7, #16]
 8004b32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b36:	4013      	ands	r3, r2
 8004b38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	333c      	adds	r3, #60	; 0x3c
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	799b      	ldrb	r3, [r3, #6]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d17b      	bne.n	8004c72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4a61      	ldr	r2, [pc, #388]	; (8004d0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	f240 80b9 	bls.w	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80b3 	beq.w	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	e0a7      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2320      	movs	r3, #32
 8004bca:	6093      	str	r3, [r2, #8]
 8004bcc:	e098      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 8093 	bne.w	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4a4b      	ldr	r2, [pc, #300]	; (8004d0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d90f      	bls.n	8004c02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfe:	6093      	str	r3, [r2, #8]
 8004c00:	e07e      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	0159      	lsls	r1, r3, #5
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	440b      	add	r3, r1
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d114      	bne.n	8004c64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2101      	movs	r1, #1
 8004c50:	f003 f8ec 	bl	8007e2c <USB_EP0_OutStart>
 8004c54:	e006      	b.n	8004c64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	441a      	add	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f005 fbbc 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
 8004c70:	e046      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d124      	bne.n	8004cc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c96:	6093      	str	r3, [r2, #8]
 8004c98:	e032      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f005 fb93 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
 8004cc2:	e01d      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d114      	bne.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d108      	bne.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004cec:	461a      	mov	r2, r3
 8004cee:	2100      	movs	r1, #0
 8004cf0:	f003 f89c 	bl	8007e2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f005 fb74 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	4f54300a 	.word	0x4f54300a
 8004d10:	4f54310a 	.word	0x4f54310a

08004d14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	333c      	adds	r3, #60	; 0x3c
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d90e      	bls.n	8004d68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f005 fb2b 	bl	800a3c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d90c      	bls.n	8004d90 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	799b      	ldrb	r3, [r3, #6]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	f003 f84e 	bl	8007e2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	4f54300a 	.word	0x4f54300a

08004da0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
 8004dac:	4613      	mov	r3, r2
 8004dae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dbe:	883b      	ldrh	r3, [r7, #0]
 8004dc0:	0419      	lsls	r1, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28
 8004dcc:	e028      	b.n	8004e20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]
 8004de0:	e00d      	b.n	8004dfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	3340      	adds	r3, #64	; 0x40
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4413      	add	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3ec      	bcc.n	8004de2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e08:	883b      	ldrh	r3, [r7, #0]
 8004e0a:	0418      	lsls	r0, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	4302      	orrs	r2, r0
 8004e18:	3340      	adds	r3, #64	; 0x40
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e267      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d075      	beq.n	8004f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e86:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d00c      	beq.n	8004eac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e92:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d112      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9e:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05b      	beq.n	8004f70 <HAL_RCC_OscConfig+0x108>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d157      	bne.n	8004f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e242      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d106      	bne.n	8004edc <HAL_RCC_OscConfig+0x74>
 8004ece:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e01d      	b.n	8004f18 <HAL_RCC_OscConfig+0xb0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x98>
 8004ee6:	4b70      	ldr	r3, [pc, #448]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a6f      	ldr	r2, [pc, #444]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b6d      	ldr	r3, [pc, #436]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6c      	ldr	r2, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0xb0>
 8004f00:	4b69      	ldr	r3, [pc, #420]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a68      	ldr	r2, [pc, #416]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b66      	ldr	r3, [pc, #408]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a65      	ldr	r2, [pc, #404]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd fb46 	bl	80025b0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd fb42 	bl	80025b0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e207      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b5b      	ldr	r3, [pc, #364]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0xc0>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd fb32 	bl	80025b0 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd fb2e 	bl	80025b0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e1f3      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0xe8>
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d063      	beq.n	8005046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f96:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d116      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	4b41      	ldr	r3, [pc, #260]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_RCC_OscConfig+0x152>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d001      	beq.n	8004fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e1c7      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fba:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4937      	ldr	r1, [pc, #220]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	e03a      	b.n	8005046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d020      	beq.n	800501a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd8:	4b34      	ldr	r3, [pc, #208]	; (80050ac <HAL_RCC_OscConfig+0x244>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fd fae7 	bl	80025b0 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe6:	f7fd fae3 	bl	80025b0 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1a8      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4925      	ldr	r1, [pc, #148]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]
 8005018:	e015      	b.n	8005046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <HAL_RCC_OscConfig+0x244>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fd fac6 	bl	80025b0 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005028:	f7fd fac2 	bl	80025b0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e187      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d036      	beq.n	80050c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <HAL_RCC_OscConfig+0x248>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fd faa6 	bl	80025b0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005068:	f7fd faa2 	bl	80025b0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e167      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCC_OscConfig+0x240>)
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x200>
 8005086:	e01b      	b.n	80050c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_OscConfig+0x248>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508e:	f7fd fa8f 	bl	80025b0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	e00e      	b.n	80050b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005096:	f7fd fa8b 	bl	80025b0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d907      	bls.n	80050b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e150      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
 80050a8:	40023800 	.word	0x40023800
 80050ac:	42470000 	.word	0x42470000
 80050b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	4b88      	ldr	r3, [pc, #544]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ea      	bne.n	8005096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8097 	beq.w	80051fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d2:	4b81      	ldr	r3, [pc, #516]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	4a7c      	ldr	r2, [pc, #496]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6413      	str	r3, [r2, #64]	; 0x40
 80050ee:	4b7a      	ldr	r3, [pc, #488]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fe:	4b77      	ldr	r3, [pc, #476]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d118      	bne.n	800513c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510a:	4b74      	ldr	r3, [pc, #464]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a73      	ldr	r2, [pc, #460]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005116:	f7fd fa4b 	bl	80025b0 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fd fa47 	bl	80025b0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e10c      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	4b6a      	ldr	r3, [pc, #424]	; (80052dc <HAL_RCC_OscConfig+0x474>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d106      	bne.n	8005152 <HAL_RCC_OscConfig+0x2ea>
 8005144:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	4a63      	ldr	r2, [pc, #396]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6713      	str	r3, [r2, #112]	; 0x70
 8005150:	e01c      	b.n	800518c <HAL_RCC_OscConfig+0x324>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b05      	cmp	r3, #5
 8005158:	d10c      	bne.n	8005174 <HAL_RCC_OscConfig+0x30c>
 800515a:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	4a5e      	ldr	r2, [pc, #376]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	6713      	str	r3, [r2, #112]	; 0x70
 8005166:	4b5c      	ldr	r3, [pc, #368]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4a5b      	ldr	r2, [pc, #364]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6713      	str	r3, [r2, #112]	; 0x70
 8005172:	e00b      	b.n	800518c <HAL_RCC_OscConfig+0x324>
 8005174:	4b58      	ldr	r3, [pc, #352]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a54      	ldr	r2, [pc, #336]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005186:	f023 0304 	bic.w	r3, r3, #4
 800518a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d015      	beq.n	80051c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fd fa0c 	bl	80025b0 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fd fa08 	bl	80025b0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e0cb      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b2:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ee      	beq.n	800519c <HAL_RCC_OscConfig+0x334>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c0:	f7fd f9f6 	bl	80025b0 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fd f9f2 	bl	80025b0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0b5      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051de:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1ee      	bne.n	80051c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f0:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	4a38      	ldr	r2, [pc, #224]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80051f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a1 	beq.w	8005348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005206:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b08      	cmp	r3, #8
 8005210:	d05c      	beq.n	80052cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d141      	bne.n	800529e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	4b31      	ldr	r3, [pc, #196]	; (80052e0 <HAL_RCC_OscConfig+0x478>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fd f9c6 	bl	80025b0 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005228:	f7fd f9c2 	bl	80025b0 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e087      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	491b      	ldr	r1, [pc, #108]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 800526c:	4313      	orrs	r3, r2
 800526e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x478>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005276:	f7fd f99b 	bl	80025b0 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527e:	f7fd f997 	bl	80025b0 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e05c      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x416>
 800529c:	e054      	b.n	8005348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_RCC_OscConfig+0x478>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fd f984 	bl	80025b0 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fd f980 	bl	80025b0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e045      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCC_OscConfig+0x470>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x444>
 80052ca:	e03d      	b.n	8005348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e038      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40007000 	.word	0x40007000
 80052e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <HAL_RCC_OscConfig+0x4ec>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d028      	beq.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d121      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d11a      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800531a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531c:	4293      	cmp	r3, r2
 800531e:	d111      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	3b01      	subs	r3, #1
 800532e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d107      	bne.n	8005344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0cc      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b68      	ldr	r3, [pc, #416]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d90c      	bls.n	8005394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b65      	ldr	r3, [pc, #404]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b63      	ldr	r3, [pc, #396]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0b8      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a58      	ldr	r2, [pc, #352]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c4:	4b53      	ldr	r3, [pc, #332]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a52      	ldr	r2, [pc, #328]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b50      	ldr	r3, [pc, #320]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	494d      	ldr	r1, [pc, #308]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d044      	beq.n	8005478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b47      	ldr	r3, [pc, #284]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d119      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d003      	beq.n	8005416 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005412:	2b03      	cmp	r3, #3
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e06f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005426:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e067      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f023 0203 	bic.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4934      	ldr	r1, [pc, #208]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005448:	f7fd f8b2 	bl	80025b0 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fd f8ae 	bl	80025b0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e04f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 020c 	and.w	r2, r3, #12
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	429a      	cmp	r2, r3
 8005476:	d1eb      	bne.n	8005450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005478:	4b25      	ldr	r3, [pc, #148]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d20c      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b22      	ldr	r3, [pc, #136]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e032      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4916      	ldr	r1, [pc, #88]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054de:	f000 f821 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490a      	ldr	r1, [pc, #40]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd f812 	bl	8002528 <HAL_InitTick>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023c00 	.word	0x40023c00
 8005514:	40023800 	.word	0x40023800
 8005518:	0800ffa8 	.word	0x0800ffa8
 800551c:	20000078 	.word	0x20000078
 8005520:	2000007c 	.word	0x2000007c

08005524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005528:	b094      	sub	sp, #80	; 0x50
 800552a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800553c:	4b79      	ldr	r3, [pc, #484]	; (8005724 <HAL_RCC_GetSysClockFreq+0x200>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	2b08      	cmp	r3, #8
 8005546:	d00d      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x40>
 8005548:	2b08      	cmp	r3, #8
 800554a:	f200 80e1 	bhi.w	8005710 <HAL_RCC_GetSysClockFreq+0x1ec>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0x34>
 8005552:	2b04      	cmp	r3, #4
 8005554:	d003      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x3a>
 8005556:	e0db      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005558:	4b73      	ldr	r3, [pc, #460]	; (8005728 <HAL_RCC_GetSysClockFreq+0x204>)
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800555c:	e0db      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555e:	4b73      	ldr	r3, [pc, #460]	; (800572c <HAL_RCC_GetSysClockFreq+0x208>)
 8005560:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005562:	e0d8      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005564:	4b6f      	ldr	r3, [pc, #444]	; (8005724 <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800556e:	4b6d      	ldr	r3, [pc, #436]	; (8005724 <HAL_RCC_GetSysClockFreq+0x200>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d063      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800557a:	4b6a      	ldr	r3, [pc, #424]	; (8005724 <HAL_RCC_GetSysClockFreq+0x200>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	099b      	lsrs	r3, r3, #6
 8005580:	2200      	movs	r2, #0
 8005582:	63bb      	str	r3, [r7, #56]	; 0x38
 8005584:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558c:	633b      	str	r3, [r7, #48]	; 0x30
 800558e:	2300      	movs	r3, #0
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005596:	4622      	mov	r2, r4
 8005598:	462b      	mov	r3, r5
 800559a:	f04f 0000 	mov.w	r0, #0
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	0159      	lsls	r1, r3, #5
 80055a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a8:	0150      	lsls	r0, r2, #5
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4621      	mov	r1, r4
 80055b0:	1a51      	subs	r1, r2, r1
 80055b2:	6139      	str	r1, [r7, #16]
 80055b4:	4629      	mov	r1, r5
 80055b6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c8:	4659      	mov	r1, fp
 80055ca:	018b      	lsls	r3, r1, #6
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055d2:	4651      	mov	r1, sl
 80055d4:	018a      	lsls	r2, r1, #6
 80055d6:	4651      	mov	r1, sl
 80055d8:	ebb2 0801 	subs.w	r8, r2, r1
 80055dc:	4659      	mov	r1, fp
 80055de:	eb63 0901 	sbc.w	r9, r3, r1
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f6:	4690      	mov	r8, r2
 80055f8:	4699      	mov	r9, r3
 80055fa:	4623      	mov	r3, r4
 80055fc:	eb18 0303 	adds.w	r3, r8, r3
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	462b      	mov	r3, r5
 8005604:	eb49 0303 	adc.w	r3, r9, r3
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005616:	4629      	mov	r1, r5
 8005618:	024b      	lsls	r3, r1, #9
 800561a:	4621      	mov	r1, r4
 800561c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005620:	4621      	mov	r1, r4
 8005622:	024a      	lsls	r2, r1, #9
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562a:	2200      	movs	r2, #0
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
 800562e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005634:	f7fb fab8 	bl	8000ba8 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005640:	e058      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005642:	4b38      	ldr	r3, [pc, #224]	; (8005724 <HAL_RCC_GetSysClockFreq+0x200>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	099b      	lsrs	r3, r3, #6
 8005648:	2200      	movs	r2, #0
 800564a:	4618      	mov	r0, r3
 800564c:	4611      	mov	r1, r2
 800564e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005652:	623b      	str	r3, [r7, #32]
 8005654:	2300      	movs	r3, #0
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
 8005658:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	f04f 0000 	mov.w	r0, #0
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	0159      	lsls	r1, r3, #5
 800566a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800566e:	0150      	lsls	r0, r2, #5
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4641      	mov	r1, r8
 8005676:	ebb2 0a01 	subs.w	sl, r2, r1
 800567a:	4649      	mov	r1, r9
 800567c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800568c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005690:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005694:	ebb2 040a 	subs.w	r4, r2, sl
 8005698:	eb63 050b 	sbc.w	r5, r3, fp
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	00eb      	lsls	r3, r5, #3
 80056a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056aa:	00e2      	lsls	r2, r4, #3
 80056ac:	4614      	mov	r4, r2
 80056ae:	461d      	mov	r5, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	18e3      	adds	r3, r4, r3
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	464b      	mov	r3, r9
 80056b8:	eb45 0303 	adc.w	r3, r5, r3
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ca:	4629      	mov	r1, r5
 80056cc:	028b      	lsls	r3, r1, #10
 80056ce:	4621      	mov	r1, r4
 80056d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d4:	4621      	mov	r1, r4
 80056d6:	028a      	lsls	r2, r1, #10
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056de:	2200      	movs	r2, #0
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	61fa      	str	r2, [r7, #28]
 80056e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e8:	f7fb fa5e 	bl	8000ba8 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4613      	mov	r3, r2
 80056f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	3301      	adds	r3, #1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800570e:	e002      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCC_GetSysClockFreq+0x204>)
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005718:	4618      	mov	r0, r3
 800571a:	3750      	adds	r7, #80	; 0x50
 800571c:	46bd      	mov	sp, r7
 800571e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	00f42400 	.word	0x00f42400
 800572c:	007a1200 	.word	0x007a1200

08005730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_RCC_GetHCLKFreq+0x14>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000078 	.word	0x20000078

08005748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800574c:	f7ff fff0 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0a9b      	lsrs	r3, r3, #10
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <HAL_RCC_GetPCLK1Freq+0x24>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	0800ffb8 	.word	0x0800ffb8

08005770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005774:	f7ff ffdc 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0b5b      	lsrs	r3, r3, #13
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	; (8005794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	0800ffb8 	.word	0x0800ffb8

08005798 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d035      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057c0:	4b62      	ldr	r3, [pc, #392]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c6:	f7fc fef3 	bl	80025b0 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057ce:	f7fc feef 	bl	80025b0 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e0b0      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057e0:	4b5b      	ldr	r3, [pc, #364]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f0      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	019a      	lsls	r2, r3, #6
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	071b      	lsls	r3, r3, #28
 80057f8:	4955      	ldr	r1, [pc, #340]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005800:	4b52      	ldr	r3, [pc, #328]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005806:	f7fc fed3 	bl	80025b0 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800580e:	f7fc fecf 	bl	80025b0 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e090      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005820:	4b4b      	ldr	r3, [pc, #300]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8083 	beq.w	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b44      	ldr	r3, [pc, #272]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a43      	ldr	r2, [pc, #268]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005856:	4b3f      	ldr	r3, [pc, #252]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a3e      	ldr	r2, [pc, #248]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005860:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005862:	f7fc fea5 	bl	80025b0 <HAL_GetTick>
 8005866:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005868:	e008      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586a:	f7fc fea1 	bl	80025b0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e062      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800587c:	4b35      	ldr	r3, [pc, #212]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005888:	4b31      	ldr	r3, [pc, #196]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005890:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d02f      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d028      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b0:	4b29      	ldr	r3, [pc, #164]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058b6:	4b28      	ldr	r3, [pc, #160]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058bc:	4a24      	ldr	r2, [pc, #144]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058c2:	4b23      	ldr	r3, [pc, #140]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d114      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fc fe6f 	bl	80025b0 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d4:	e00a      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f7fc fe6b 	bl	80025b0 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d901      	bls.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e02a      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ec:	4b18      	ldr	r3, [pc, #96]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ee      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005904:	d10d      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591a:	490d      	ldr	r1, [pc, #52]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591c:	4313      	orrs	r3, r2
 800591e:	608b      	str	r3, [r1, #8]
 8005920:	e005      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005928:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800592c:	6093      	str	r3, [r2, #8]
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593a:	4905      	ldr	r1, [pc, #20]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	670b      	str	r3, [r1, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	42470068 	.word	0x42470068
 8005950:	40023800 	.word	0x40023800
 8005954:	40007000 	.word	0x40007000
 8005958:	42470e40 	.word	0x42470e40

0800595c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d13f      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005990:	d12f      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005992:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005994:	617b      	str	r3, [r7, #20]
          break;
 8005996:	e02f      	b.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005998:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a4:	d108      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059a6:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ae:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e007      	b.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ce:	099b      	lsrs	r3, r3, #6
 80059d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e2:	0f1b      	lsrs	r3, r3, #28
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	617b      	str	r3, [r7, #20]
          break;
 80059f0:	e002      	b.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
          break;
 80059f6:	bf00      	nop
        }
      }
      break;
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80059fa:	bf00      	nop
    }
  }
  return frequency;
 80059fc:	697b      	ldr	r3, [r7, #20]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	00bb8000 	.word	0x00bb8000
 8005a14:	007a1200 	.word	0x007a1200
 8005a18:	00f42400 	.word	0x00f42400

08005a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e07b      	b.n	8005b26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d108      	bne.n	8005a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3e:	d009      	beq.n	8005a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	61da      	str	r2, [r3, #28]
 8005a46:	e005      	b.n	8005a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fc fbe4 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	ea42 0103 	orr.w	r1, r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	0c1b      	lsrs	r3, r3, #16
 8005af2:	f003 0104 	and.w	r1, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f003 0210 	and.w	r2, r3, #16
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e01a      	b.n	8005b76 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fc fbb7 	bl	80022cc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08a      	sub	sp, #40	; 0x28
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b90:	f7fc fd0e 	bl	80025b0 <HAL_GetTick>
 8005b94:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b9c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ba4:	887b      	ldrh	r3, [r7, #2]
 8005ba6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ba8:	7ffb      	ldrb	r3, [r7, #31]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d00c      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x4a>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb4:	d106      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x46>
 8005bbe:	7ffb      	ldrb	r3, [r7, #31]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d001      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e17f      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x5c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x5c>
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e174      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_SPI_TransmitReceive+0x6e>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e16d      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d003      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2205      	movs	r2, #5
 8005c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	887a      	ldrh	r2, [r7, #2]
 8005c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	887a      	ldrh	r2, [r7, #2]
 8005c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	887a      	ldrh	r2, [r7, #2]
 8005c2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	887a      	ldrh	r2, [r7, #2]
 8005c30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b40      	cmp	r3, #64	; 0x40
 8005c4a:	d007      	beq.n	8005c5c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c64:	d17e      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0xf6>
 8005c6e:	8afb      	ldrh	r3, [r7, #22]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d16c      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	881a      	ldrh	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	1c9a      	adds	r2, r3, #2
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c98:	e059      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d11b      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x162>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x162>
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d113      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	881a      	ldrh	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	1c9a      	adds	r2, r3, #2
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d119      	bne.n	8005d22 <HAL_SPI_TransmitReceive+0x1a4>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d014      	beq.n	8005d22 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	b292      	uxth	r2, r2
 8005d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d22:	f7fc fc45 	bl	80025b0 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d80d      	bhi.n	8005d4e <HAL_SPI_TransmitReceive+0x1d0>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d009      	beq.n	8005d4e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0bc      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1a0      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x11c>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d19b      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x11c>
 8005d62:	e082      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x1f4>
 8005d6c:	8afb      	ldrh	r3, [r7, #22]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d171      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d98:	e05d      	b.n	8005e56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d11c      	bne.n	8005de2 <HAL_SPI_TransmitReceive+0x264>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d017      	beq.n	8005de2 <HAL_SPI_TransmitReceive+0x264>
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d114      	bne.n	8005de2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d119      	bne.n	8005e24 <HAL_SPI_TransmitReceive+0x2a6>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d014      	beq.n	8005e24 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e20:	2301      	movs	r3, #1
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e24:	f7fc fbc4 	bl	80025b0 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d803      	bhi.n	8005e3c <HAL_SPI_TransmitReceive+0x2be>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d102      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x2c4>
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e038      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d19c      	bne.n	8005d9a <HAL_SPI_TransmitReceive+0x21c>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d197      	bne.n	8005d9a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e6a:	6a3a      	ldr	r2, [r7, #32]
 8005e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f8c4 	bl	8005ffc <SPI_EndRxTxTransaction>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e01d      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
  }
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3728      	adds	r7, #40	; 0x28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	b2db      	uxtb	r3, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005efc:	f7fc fb58 	bl	80025b0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f0c:	f7fc fb50 	bl	80025b0 <HAL_GetTick>
 8005f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f12:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	015b      	lsls	r3, r3, #5
 8005f18:	0d1b      	lsrs	r3, r3, #20
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f22:	e054      	b.n	8005fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d050      	beq.n	8005fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f2c:	f7fc fb40 	bl	80025b0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d902      	bls.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d13d      	bne.n	8005fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f5a:	d111      	bne.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f64:	d004      	beq.n	8005f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6e:	d107      	bne.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f88:	d10f      	bne.n	8005faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e017      	b.n	8005fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	bf0c      	ite	eq
 8005fde:	2301      	moveq	r3, #1
 8005fe0:	2300      	movne	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d19b      	bne.n	8005f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000078 	.word	0x20000078

08005ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2201      	movs	r2, #1
 8006010:	2102      	movs	r1, #2
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff ff6a 	bl	8005eec <SPI_WaitFlagStateUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e032      	b.n	8006094 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800602e:	4b1b      	ldr	r3, [pc, #108]	; (800609c <SPI_EndRxTxTransaction+0xa0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1b      	ldr	r2, [pc, #108]	; (80060a0 <SPI_EndRxTxTransaction+0xa4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	0d5b      	lsrs	r3, r3, #21
 800603a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604c:	d112      	bne.n	8006074 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff47 	bl	8005eec <SPI_WaitFlagStateUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e00f      	b.n	8006094 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3b01      	subs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d0f2      	beq.n	8006074 <SPI_EndRxTxTransaction+0x78>
 800608e:	e000      	b.n	8006092 <SPI_EndRxTxTransaction+0x96>
        break;
 8006090:	bf00      	nop
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000078 	.word	0x20000078
 80060a0:	165e9f81 	.word	0x165e9f81

080060a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e042      	b.n	800613c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc f91c 	bl	8002308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f973 	bl	80063d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800610c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800611c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b20      	cmp	r3, #32
 8006162:	d175      	bne.n	8006250 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_UART_Transmit+0x2c>
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e06e      	b.n	8006252 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2221      	movs	r2, #33	; 0x21
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006182:	f7fc fa15 	bl	80025b0 <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d108      	bne.n	80061b0 <HAL_UART_Transmit+0x6c>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e003      	b.n	80061b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061b8:	e02e      	b.n	8006218 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f848 	bl	800625a <UART_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e03a      	b.n	8006252 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10b      	bne.n	80061fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	3302      	adds	r3, #2
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e007      	b.n	800620a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	3301      	adds	r3, #1
 8006208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1cb      	bne.n	80061ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2140      	movs	r1, #64	; 0x40
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f814 	bl	800625a <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e006      	b.n	8006252 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
  }
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626a:	e03b      	b.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d037      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006274:	f7fc f99c 	bl	80025b0 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	6a3a      	ldr	r2, [r7, #32]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <UART_WaitOnFlagUntilTimeout+0x30>
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e03a      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d023      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d020      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d01d      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d116      	bne.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f81d 	bl	800630c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2208      	movs	r2, #8
 80062d6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e00f      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d0b4      	beq.n	800626c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b095      	sub	sp, #84	; 0x54
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	330c      	adds	r3, #12
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006334:	643a      	str	r2, [r7, #64]	; 0x40
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800633a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3314      	adds	r3, #20
 800634e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	61fb      	str	r3, [r7, #28]
   return(result);
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	d119      	bne.n	80063b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	60bb      	str	r3, [r7, #8]
   return(result);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 0310 	bic.w	r3, r3, #16
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a4:	61ba      	str	r2, [r7, #24]
 80063a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6979      	ldr	r1, [r7, #20]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	613b      	str	r3, [r7, #16]
   return(result);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063c6:	bf00      	nop
 80063c8:	3754      	adds	r7, #84	; 0x54
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d8:	b0c0      	sub	sp, #256	; 0x100
 80063da:	af00      	add	r7, sp, #0
 80063dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f0:	68d9      	ldr	r1, [r3, #12]
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	ea40 0301 	orr.w	r3, r0, r1
 80063fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	431a      	orrs	r2, r3
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	431a      	orrs	r2, r3
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800642c:	f021 010c 	bic.w	r1, r1, #12
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800643a:	430b      	orrs	r3, r1
 800643c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	6999      	ldr	r1, [r3, #24]
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	ea40 0301 	orr.w	r3, r0, r1
 800645a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b8f      	ldr	r3, [pc, #572]	; (80066a0 <UART_SetConfig+0x2cc>)
 8006464:	429a      	cmp	r2, r3
 8006466:	d005      	beq.n	8006474 <UART_SetConfig+0xa0>
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b8d      	ldr	r3, [pc, #564]	; (80066a4 <UART_SetConfig+0x2d0>)
 8006470:	429a      	cmp	r2, r3
 8006472:	d104      	bne.n	800647e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7ff f97c 	bl	8005770 <HAL_RCC_GetPCLK2Freq>
 8006478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800647c:	e003      	b.n	8006486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800647e:	f7ff f963 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8006482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006490:	f040 810c 	bne.w	80066ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006498:	2200      	movs	r2, #0
 800649a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800649e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064a6:	4622      	mov	r2, r4
 80064a8:	462b      	mov	r3, r5
 80064aa:	1891      	adds	r1, r2, r2
 80064ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80064ae:	415b      	adcs	r3, r3
 80064b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064b6:	4621      	mov	r1, r4
 80064b8:	eb12 0801 	adds.w	r8, r2, r1
 80064bc:	4629      	mov	r1, r5
 80064be:	eb43 0901 	adc.w	r9, r3, r1
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064d6:	4690      	mov	r8, r2
 80064d8:	4699      	mov	r9, r3
 80064da:	4623      	mov	r3, r4
 80064dc:	eb18 0303 	adds.w	r3, r8, r3
 80064e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064e4:	462b      	mov	r3, r5
 80064e6:	eb49 0303 	adc.w	r3, r9, r3
 80064ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006502:	460b      	mov	r3, r1
 8006504:	18db      	adds	r3, r3, r3
 8006506:	653b      	str	r3, [r7, #80]	; 0x50
 8006508:	4613      	mov	r3, r2
 800650a:	eb42 0303 	adc.w	r3, r2, r3
 800650e:	657b      	str	r3, [r7, #84]	; 0x54
 8006510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006518:	f7fa fb46 	bl	8000ba8 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <UART_SetConfig+0x2d4>)
 8006522:	fba3 2302 	umull	r2, r3, r3, r2
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	011c      	lsls	r4, r3, #4
 800652a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800653c:	4642      	mov	r2, r8
 800653e:	464b      	mov	r3, r9
 8006540:	1891      	adds	r1, r2, r2
 8006542:	64b9      	str	r1, [r7, #72]	; 0x48
 8006544:	415b      	adcs	r3, r3
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800654c:	4641      	mov	r1, r8
 800654e:	eb12 0a01 	adds.w	sl, r2, r1
 8006552:	4649      	mov	r1, r9
 8006554:	eb43 0b01 	adc.w	fp, r3, r1
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800656c:	4692      	mov	sl, r2
 800656e:	469b      	mov	fp, r3
 8006570:	4643      	mov	r3, r8
 8006572:	eb1a 0303 	adds.w	r3, sl, r3
 8006576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800657a:	464b      	mov	r3, r9
 800657c:	eb4b 0303 	adc.w	r3, fp, r3
 8006580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006598:	460b      	mov	r3, r1
 800659a:	18db      	adds	r3, r3, r3
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
 800659e:	4613      	mov	r3, r2
 80065a0:	eb42 0303 	adc.w	r3, r2, r3
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
 80065a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065ae:	f7fa fafb 	bl	8000ba8 <__aeabi_uldivmod>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	4b3b      	ldr	r3, [pc, #236]	; (80066a8 <UART_SetConfig+0x2d4>)
 80065ba:	fba3 2301 	umull	r2, r3, r3, r1
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2264      	movs	r2, #100	; 0x64
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	1acb      	subs	r3, r1, r3
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065ce:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <UART_SetConfig+0x2d4>)
 80065d0:	fba3 2302 	umull	r2, r3, r3, r2
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065dc:	441c      	add	r4, r3
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	1891      	adds	r1, r2, r2
 80065f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80065f8:	415b      	adcs	r3, r3
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006600:	4641      	mov	r1, r8
 8006602:	1851      	adds	r1, r2, r1
 8006604:	6339      	str	r1, [r7, #48]	; 0x30
 8006606:	4649      	mov	r1, r9
 8006608:	414b      	adcs	r3, r1
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006618:	4659      	mov	r1, fp
 800661a:	00cb      	lsls	r3, r1, #3
 800661c:	4651      	mov	r1, sl
 800661e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006622:	4651      	mov	r1, sl
 8006624:	00ca      	lsls	r2, r1, #3
 8006626:	4610      	mov	r0, r2
 8006628:	4619      	mov	r1, r3
 800662a:	4603      	mov	r3, r0
 800662c:	4642      	mov	r2, r8
 800662e:	189b      	adds	r3, r3, r2
 8006630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006634:	464b      	mov	r3, r9
 8006636:	460a      	mov	r2, r1
 8006638:	eb42 0303 	adc.w	r3, r2, r3
 800663c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800664c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006654:	460b      	mov	r3, r1
 8006656:	18db      	adds	r3, r3, r3
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
 800665a:	4613      	mov	r3, r2
 800665c:	eb42 0303 	adc.w	r3, r2, r3
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800666a:	f7fa fa9d 	bl	8000ba8 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <UART_SetConfig+0x2d4>)
 8006674:	fba3 1302 	umull	r1, r3, r3, r2
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	2164      	movs	r1, #100	; 0x64
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	3332      	adds	r3, #50	; 0x32
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <UART_SetConfig+0x2d4>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f003 0207 	and.w	r2, r3, #7
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4422      	add	r2, r4
 800669a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800669c:	e106      	b.n	80068ac <UART_SetConfig+0x4d8>
 800669e:	bf00      	nop
 80066a0:	40011000 	.word	0x40011000
 80066a4:	40011400 	.word	0x40011400
 80066a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066be:	4642      	mov	r2, r8
 80066c0:	464b      	mov	r3, r9
 80066c2:	1891      	adds	r1, r2, r2
 80066c4:	6239      	str	r1, [r7, #32]
 80066c6:	415b      	adcs	r3, r3
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066ce:	4641      	mov	r1, r8
 80066d0:	1854      	adds	r4, r2, r1
 80066d2:	4649      	mov	r1, r9
 80066d4:	eb43 0501 	adc.w	r5, r3, r1
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	00eb      	lsls	r3, r5, #3
 80066e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066e6:	00e2      	lsls	r2, r4, #3
 80066e8:	4614      	mov	r4, r2
 80066ea:	461d      	mov	r5, r3
 80066ec:	4643      	mov	r3, r8
 80066ee:	18e3      	adds	r3, r4, r3
 80066f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066f4:	464b      	mov	r3, r9
 80066f6:	eb45 0303 	adc.w	r3, r5, r3
 80066fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800670a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800671a:	4629      	mov	r1, r5
 800671c:	008b      	lsls	r3, r1, #2
 800671e:	4621      	mov	r1, r4
 8006720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006724:	4621      	mov	r1, r4
 8006726:	008a      	lsls	r2, r1, #2
 8006728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800672c:	f7fa fa3c 	bl	8000ba8 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b60      	ldr	r3, [pc, #384]	; (80068b8 <UART_SetConfig+0x4e4>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011c      	lsls	r4, r3, #4
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800674c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	1891      	adds	r1, r2, r2
 8006756:	61b9      	str	r1, [r7, #24]
 8006758:	415b      	adcs	r3, r3
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006760:	4641      	mov	r1, r8
 8006762:	1851      	adds	r1, r2, r1
 8006764:	6139      	str	r1, [r7, #16]
 8006766:	4649      	mov	r1, r9
 8006768:	414b      	adcs	r3, r1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006778:	4659      	mov	r1, fp
 800677a:	00cb      	lsls	r3, r1, #3
 800677c:	4651      	mov	r1, sl
 800677e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006782:	4651      	mov	r1, sl
 8006784:	00ca      	lsls	r2, r1, #3
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	4603      	mov	r3, r0
 800678c:	4642      	mov	r2, r8
 800678e:	189b      	adds	r3, r3, r2
 8006790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006794:	464b      	mov	r3, r9
 8006796:	460a      	mov	r2, r1
 8006798:	eb42 0303 	adc.w	r3, r2, r3
 800679c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067b8:	4649      	mov	r1, r9
 80067ba:	008b      	lsls	r3, r1, #2
 80067bc:	4641      	mov	r1, r8
 80067be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c2:	4641      	mov	r1, r8
 80067c4:	008a      	lsls	r2, r1, #2
 80067c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067ca:	f7fa f9ed 	bl	8000ba8 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4611      	mov	r1, r2
 80067d4:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <UART_SetConfig+0x4e4>)
 80067d6:	fba3 2301 	umull	r2, r3, r3, r1
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	2264      	movs	r2, #100	; 0x64
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	1acb      	subs	r3, r1, r3
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	3332      	adds	r3, #50	; 0x32
 80067e8:	4a33      	ldr	r2, [pc, #204]	; (80068b8 <UART_SetConfig+0x4e4>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067f4:	441c      	add	r4, r3
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fa:	2200      	movs	r2, #0
 80067fc:	673b      	str	r3, [r7, #112]	; 0x70
 80067fe:	677a      	str	r2, [r7, #116]	; 0x74
 8006800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	1891      	adds	r1, r2, r2
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	415b      	adcs	r3, r3
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006814:	4641      	mov	r1, r8
 8006816:	1851      	adds	r1, r2, r1
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	4649      	mov	r1, r9
 800681c:	414b      	adcs	r3, r1
 800681e:	607b      	str	r3, [r7, #4]
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800682c:	4659      	mov	r1, fp
 800682e:	00cb      	lsls	r3, r1, #3
 8006830:	4651      	mov	r1, sl
 8006832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006836:	4651      	mov	r1, sl
 8006838:	00ca      	lsls	r2, r1, #3
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	4603      	mov	r3, r0
 8006840:	4642      	mov	r2, r8
 8006842:	189b      	adds	r3, r3, r2
 8006844:	66bb      	str	r3, [r7, #104]	; 0x68
 8006846:	464b      	mov	r3, r9
 8006848:	460a      	mov	r2, r1
 800684a:	eb42 0303 	adc.w	r3, r2, r3
 800684e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	663b      	str	r3, [r7, #96]	; 0x60
 800685a:	667a      	str	r2, [r7, #100]	; 0x64
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006868:	4649      	mov	r1, r9
 800686a:	008b      	lsls	r3, r1, #2
 800686c:	4641      	mov	r1, r8
 800686e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006872:	4641      	mov	r1, r8
 8006874:	008a      	lsls	r2, r1, #2
 8006876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800687a:	f7fa f995 	bl	8000ba8 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <UART_SetConfig+0x4e4>)
 8006884:	fba3 1302 	umull	r1, r3, r3, r2
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	2164      	movs	r1, #100	; 0x64
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	3332      	adds	r3, #50	; 0x32
 8006896:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <UART_SetConfig+0x4e4>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4422      	add	r2, r4
 80068aa:	609a      	str	r2, [r3, #8]
}
 80068ac:	bf00      	nop
 80068ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068b2:	46bd      	mov	sp, r7
 80068b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b8:	51eb851f 	.word	0x51eb851f

080068bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068bc:	b084      	sub	sp, #16
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	f107 001c 	add.w	r0, r7, #28
 80068ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d123      	bne.n	800691e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006902:	2b01      	cmp	r3, #1
 8006904:	d105      	bne.n	8006912 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fae8 	bl	8007ee8 <USB_CoreReset>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e01b      	b.n	8006956 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fadc 	bl	8007ee8 <USB_CoreReset>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006934:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
 8006948:	e005      	b.n	8006956 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006956:	7fbb      	ldrb	r3, [r7, #30]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d10b      	bne.n	8006974 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f043 0206 	orr.w	r2, r3, #6
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006980:	b004      	add	sp, #16
 8006982:	4770      	bx	lr

08006984 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d165      	bne.n	8006a64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a41      	ldr	r2, [pc, #260]	; (8006aa0 <USB_SetTurnaroundTime+0x11c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d906      	bls.n	80069ae <USB_SetTurnaroundTime+0x2a>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a40      	ldr	r2, [pc, #256]	; (8006aa4 <USB_SetTurnaroundTime+0x120>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d202      	bcs.n	80069ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069a8:	230f      	movs	r3, #15
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e062      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a3c      	ldr	r2, [pc, #240]	; (8006aa4 <USB_SetTurnaroundTime+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d306      	bcc.n	80069c4 <USB_SetTurnaroundTime+0x40>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a3b      	ldr	r2, [pc, #236]	; (8006aa8 <USB_SetTurnaroundTime+0x124>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d202      	bcs.n	80069c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069be:	230e      	movs	r3, #14
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e057      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a38      	ldr	r2, [pc, #224]	; (8006aa8 <USB_SetTurnaroundTime+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d306      	bcc.n	80069da <USB_SetTurnaroundTime+0x56>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a37      	ldr	r2, [pc, #220]	; (8006aac <USB_SetTurnaroundTime+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d202      	bcs.n	80069da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069d4:	230d      	movs	r3, #13
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e04c      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a33      	ldr	r2, [pc, #204]	; (8006aac <USB_SetTurnaroundTime+0x128>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d306      	bcc.n	80069f0 <USB_SetTurnaroundTime+0x6c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a32      	ldr	r2, [pc, #200]	; (8006ab0 <USB_SetTurnaroundTime+0x12c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d802      	bhi.n	80069f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069ea:	230c      	movs	r3, #12
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e041      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a2f      	ldr	r2, [pc, #188]	; (8006ab0 <USB_SetTurnaroundTime+0x12c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d906      	bls.n	8006a06 <USB_SetTurnaroundTime+0x82>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <USB_SetTurnaroundTime+0x130>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d802      	bhi.n	8006a06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a00:	230b      	movs	r3, #11
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e036      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <USB_SetTurnaroundTime+0x130>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d906      	bls.n	8006a1c <USB_SetTurnaroundTime+0x98>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <USB_SetTurnaroundTime+0x134>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d802      	bhi.n	8006a1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a16:	230a      	movs	r3, #10
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e02b      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4a26      	ldr	r2, [pc, #152]	; (8006ab8 <USB_SetTurnaroundTime+0x134>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d906      	bls.n	8006a32 <USB_SetTurnaroundTime+0xae>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a25      	ldr	r2, [pc, #148]	; (8006abc <USB_SetTurnaroundTime+0x138>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d202      	bcs.n	8006a32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a2c:	2309      	movs	r3, #9
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e020      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4a21      	ldr	r2, [pc, #132]	; (8006abc <USB_SetTurnaroundTime+0x138>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d306      	bcc.n	8006a48 <USB_SetTurnaroundTime+0xc4>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <USB_SetTurnaroundTime+0x13c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d802      	bhi.n	8006a48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a42:	2308      	movs	r3, #8
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e015      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <USB_SetTurnaroundTime+0x13c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d906      	bls.n	8006a5e <USB_SetTurnaroundTime+0xda>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <USB_SetTurnaroundTime+0x140>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d202      	bcs.n	8006a5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a58:	2307      	movs	r3, #7
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e00a      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a5e:	2306      	movs	r3, #6
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e007      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a6a:	2309      	movs	r3, #9
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e001      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a70:	2309      	movs	r3, #9
 8006a72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	00d8acbf 	.word	0x00d8acbf
 8006aa4:	00e4e1c0 	.word	0x00e4e1c0
 8006aa8:	00f42400 	.word	0x00f42400
 8006aac:	01067380 	.word	0x01067380
 8006ab0:	011a499f 	.word	0x011a499f
 8006ab4:	01312cff 	.word	0x01312cff
 8006ab8:	014ca43f 	.word	0x014ca43f
 8006abc:	016e3600 	.word	0x016e3600
 8006ac0:	01a6ab1f 	.word	0x01a6ab1f
 8006ac4:	01e84800 	.word	0x01e84800

08006ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f043 0201 	orr.w	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f023 0201 	bic.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d115      	bne.n	8006b5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b3a:	200a      	movs	r0, #10
 8006b3c:	f7fb fd44 	bl	80025c8 <HAL_Delay>
      ms += 10U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	330a      	adds	r3, #10
 8006b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 f93f 	bl	8007dca <USB_GetMode>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d01e      	beq.n	8006b90 <USB_SetCurrentMode+0x84>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2bc7      	cmp	r3, #199	; 0xc7
 8006b56:	d9f0      	bls.n	8006b3a <USB_SetCurrentMode+0x2e>
 8006b58:	e01a      	b.n	8006b90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b6c:	200a      	movs	r0, #10
 8006b6e:	f7fb fd2b 	bl	80025c8 <HAL_Delay>
      ms += 10U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	330a      	adds	r3, #10
 8006b76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f926 	bl	8007dca <USB_GetMode>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <USB_SetCurrentMode+0x84>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2bc7      	cmp	r3, #199	; 0xc7
 8006b88:	d9f0      	bls.n	8006b6c <USB_SetCurrentMode+0x60>
 8006b8a:	e001      	b.n	8006b90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e005      	b.n	8006b9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2bc8      	cmp	r3, #200	; 0xc8
 8006b94:	d101      	bne.n	8006b9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	e009      	b.n	8006bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3340      	adds	r3, #64	; 0x40
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b0e      	cmp	r3, #14
 8006bdc:	d9f2      	bls.n	8006bc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d11c      	bne.n	8006c20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf4:	f043 0302 	orr.w	r3, r3, #2
 8006bf8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c1e:	e00b      	b.n	8006c38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c44:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d10d      	bne.n	8006c68 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c54:	2100      	movs	r1, #0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f968 	bl	8006f2c <USB_SetDevSpeed>
 8006c5c:	e008      	b.n	8006c70 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c5e:	2101      	movs	r1, #1
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f963 	bl	8006f2c <USB_SetDevSpeed>
 8006c66:	e003      	b.n	8006c70 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c68:	2103      	movs	r1, #3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f95e 	bl	8006f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c70:	2110      	movs	r1, #16
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8fa 	bl	8006e6c <USB_FlushTxFifo>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f924 	bl	8006ed0 <USB_FlushRxFifo>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	e043      	b.n	8006d44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd2:	d118      	bne.n	8006d06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e013      	b.n	8006d18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e008      	b.n	8006d18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	461a      	mov	r2, r3
 8006d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d48:	461a      	mov	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d3b5      	bcc.n	8006cbc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e043      	b.n	8006dde <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d6c:	d118      	bne.n	8006da0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	461a      	mov	r2, r3
 8006d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e013      	b.n	8006db2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e008      	b.n	8006db2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006de2:	461a      	mov	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d3b5      	bcc.n	8006d56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dfc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f043 0210 	orr.w	r2, r3, #16
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	4b10      	ldr	r3, [pc, #64]	; (8006e68 <USB_DevInit+0x2c4>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f043 0208 	orr.w	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d107      	bne.n	8006e58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e50:	f043 0304 	orr.w	r3, r3, #4
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr
 8006e68:	803c3800 	.word	0x803c3800

08006e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e86:	d901      	bls.n	8006e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e01b      	b.n	8006ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	daf2      	bge.n	8006e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	019b      	lsls	r3, r3, #6
 8006e9c:	f043 0220 	orr.w	r2, r3, #32
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006eb0:	d901      	bls.n	8006eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e006      	b.n	8006ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d0f0      	beq.n	8006ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ee8:	d901      	bls.n	8006eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e018      	b.n	8006f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	daf2      	bge.n	8006edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2210      	movs	r2, #16
 8006efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f0c:	d901      	bls.n	8006f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e006      	b.n	8006f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d0f0      	beq.n	8006f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0306 	and.w	r3, r3, #6
 8006f76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e00a      	b.n	8006f9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d002      	beq.n	8006f90 <USB_GetDevSpeed+0x32>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d102      	bne.n	8006f96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f90:	2302      	movs	r3, #2
 8006f92:	75fb      	strb	r3, [r7, #23]
 8006f94:	e001      	b.n	8006f9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f96:	230f      	movs	r3, #15
 8006f98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d13a      	bne.n	800703a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d155      	bne.n	80070a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	791b      	ldrb	r3, [r3, #4]
 8007016:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007018:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	059b      	lsls	r3, r3, #22
 800701e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007020:	4313      	orrs	r3, r2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e036      	b.n	80070a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	2101      	movs	r1, #1
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	68f9      	ldr	r1, [r7, #12]
 8007054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007058:	4313      	orrs	r3, r2
 800705a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11a      	bne.n	80070a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	791b      	ldrb	r3, [r3, #4]
 800708c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800708e:	430b      	orrs	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d161      	bne.n	8007198 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ea:	d11f      	bne.n	800712c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800710a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	2101      	movs	r1, #1
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	43db      	mvns	r3, r3
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007170:	4013      	ands	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	0159      	lsls	r1, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	440b      	add	r3, r1
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	4619      	mov	r1, r3
 8007190:	4b35      	ldr	r3, [pc, #212]	; (8007268 <USB_DeactivateEndpoint+0x1b0>)
 8007192:	4013      	ands	r3, r2
 8007194:	600b      	str	r3, [r1, #0]
 8007196:	e060      	b.n	800725a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ae:	d11f      	bne.n	80071f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	43db      	mvns	r3, r3
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007210:	4013      	ands	r3, r2
 8007212:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	2101      	movs	r1, #1
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	43db      	mvns	r3, r3
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007234:	4013      	ands	r3, r2
 8007236:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0159      	lsls	r1, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	440b      	add	r3, r1
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	4619      	mov	r1, r3
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <USB_DeactivateEndpoint+0x1b4>)
 8007256:	4013      	ands	r3, r2
 8007258:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	ec337800 	.word	0xec337800
 800726c:	eff37800 	.word	0xeff37800

08007270 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	; 0x28
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b01      	cmp	r3, #1
 800728e:	f040 8180 	bne.w	8007592 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d132      	bne.n	8007300 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f8:	0cdb      	lsrs	r3, r3, #19
 80072fa:	04db      	lsls	r3, r3, #19
 80072fc:	6113      	str	r3, [r2, #16]
 80072fe:	e098      	b.n	8007432 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	440a      	add	r2, r1
 8007316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731a:	0cdb      	lsrs	r3, r3, #19
 800731c:	04db      	lsls	r3, r3, #19
 800731e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800733e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007342:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11a      	bne.n	8007380 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	d903      	bls.n	800735e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800737c:	6113      	str	r3, [r2, #16]
 800737e:	e045      	b.n	800740c <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	4413      	add	r3, r2
 800738a:	1e5a      	subs	r2, r3, #1
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	04db      	lsls	r3, r3, #19
 80073a8:	4619      	mov	r1, r3
 80073aa:	4ba4      	ldr	r3, [pc, #656]	; (800763c <USB_EPStartXfer+0x3cc>)
 80073ac:	400b      	ands	r3, r1
 80073ae:	69b9      	ldr	r1, [r7, #24]
 80073b0:	0148      	lsls	r0, r1, #5
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	4401      	add	r1, r0
 80073b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073ba:	4313      	orrs	r3, r2
 80073bc:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	791b      	ldrb	r3, [r3, #4]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d122      	bne.n	800740c <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073e4:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	8afb      	ldrh	r3, [r7, #22]
 80073f6:	075b      	lsls	r3, r3, #29
 80073f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80073fc:	69b9      	ldr	r1, [r7, #24]
 80073fe:	0148      	lsls	r0, r1, #5
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	4401      	add	r1, r0
 8007404:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007408:	4313      	orrs	r3, r2
 800740a:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007422:	69b9      	ldr	r1, [r7, #24]
 8007424:	0148      	lsls	r0, r1, #5
 8007426:	69f9      	ldr	r1, [r7, #28]
 8007428:	4401      	add	r1, r0
 800742a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800742e:	4313      	orrs	r3, r2
 8007430:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d14b      	bne.n	80074d0 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	461a      	mov	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	791b      	ldrb	r3, [r3, #4]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d128      	bne.n	80074ae <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d110      	bne.n	800748e <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	0151      	lsls	r1, r2, #5
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	440a      	add	r2, r1
 8007482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	e00f      	b.n	80074ae <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	e165      	b.n	800779c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	791b      	ldrb	r3, [r3, #4]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d015      	beq.n	8007524 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 814d 	beq.w	800779c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	2101      	movs	r1, #1
 8007514:	fa01 f303 	lsl.w	r3, r1, r3
 8007518:	69f9      	ldr	r1, [r7, #28]
 800751a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800751e:	4313      	orrs	r3, r2
 8007520:	634b      	str	r3, [r1, #52]	; 0x34
 8007522:	e13b      	b.n	800779c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007530:	2b00      	cmp	r3, #0
 8007532:	d110      	bne.n	8007556 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e00f      	b.n	8007576 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007574:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	68d9      	ldr	r1, [r3, #12]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	b298      	uxth	r0, r3
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	4603      	mov	r3, r0
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f9b8 	bl	8007900 <USB_WritePacket>
 8007590:	e104      	b.n	800779c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	0151      	lsls	r1, r2, #5
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	440a      	add	r2, r1
 80075a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ac:	0cdb      	lsrs	r3, r3, #19
 80075ae:	04db      	lsls	r3, r3, #19
 80075b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075d4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d131      	bne.n	8007640 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800760a:	69b9      	ldr	r1, [r7, #24]
 800760c:	0148      	lsls	r0, r1, #5
 800760e:	69f9      	ldr	r1, [r7, #28]
 8007610:	4401      	add	r1, r0
 8007612:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007638:	6113      	str	r3, [r2, #16]
 800763a:	e061      	b.n	8007700 <USB_EPStartXfer+0x490>
 800763c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d123      	bne.n	8007690 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765e:	69b9      	ldr	r1, [r7, #24]
 8007660:	0148      	lsls	r0, r1, #5
 8007662:	69f9      	ldr	r1, [r7, #28]
 8007664:	4401      	add	r1, r0
 8007666:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800768c:	6113      	str	r3, [r2, #16]
 800768e:	e037      	b.n	8007700 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	4413      	add	r3, r2
 800769a:	1e5a      	subs	r2, r3, #1
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	8afa      	ldrh	r2, [r7, #22]
 80076ac:	fb03 f202 	mul.w	r2, r3, r2
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	8afb      	ldrh	r3, [r7, #22]
 80076c4:	04d9      	lsls	r1, r3, #19
 80076c6:	4b38      	ldr	r3, [pc, #224]	; (80077a8 <USB_EPStartXfer+0x538>)
 80076c8:	400b      	ands	r3, r1
 80076ca:	69b9      	ldr	r1, [r7, #24]
 80076cc:	0148      	lsls	r0, r1, #5
 80076ce:	69f9      	ldr	r1, [r7, #28]
 80076d0:	4401      	add	r1, r0
 80076d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d6:	4313      	orrs	r3, r2
 80076d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f0:	69b9      	ldr	r1, [r7, #24]
 80076f2:	0148      	lsls	r0, r1, #5
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	4401      	add	r1, r0
 80076f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076fc:	4313      	orrs	r3, r2
 80076fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d10d      	bne.n	8007722 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	68d9      	ldr	r1, [r3, #12]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	460a      	mov	r2, r1
 8007720:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d128      	bne.n	800777c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d110      	bne.n	800775c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e00f      	b.n	800777c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800777a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800779a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	1ff80000 	.word	0x1ff80000

080077ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d14a      	bne.n	8007860 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e2:	f040 8086 	bne.w	80078f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007808:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800782c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3301      	adds	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f242 7210 	movw	r2, #10000	; 0x2710
 800783a:	4293      	cmp	r3, r2
 800783c:	d902      	bls.n	8007844 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
          break;
 8007842:	e056      	b.n	80078f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800785c:	d0e7      	beq.n	800782e <USB_EPStopXfer+0x82>
 800785e:	e048      	b.n	80078f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007878:	d13b      	bne.n	80078f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007898:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800789c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	0151      	lsls	r1, r2, #5
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	440a      	add	r2, r1
 80078b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3301      	adds	r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d902      	bls.n	80078d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
          break;
 80078d6:	e00c      	b.n	80078f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f0:	d0e7      	beq.n	80078c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4611      	mov	r1, r2
 800790c:	461a      	mov	r2, r3
 800790e:	460b      	mov	r3, r1
 8007910:	71fb      	strb	r3, [r7, #7]
 8007912:	4613      	mov	r3, r2
 8007914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800791e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d123      	bne.n	800796e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007926:	88bb      	ldrh	r3, [r7, #4]
 8007928:	3303      	adds	r3, #3
 800792a:	089b      	lsrs	r3, r3, #2
 800792c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	e018      	b.n	8007966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	031a      	lsls	r2, r3, #12
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007940:	461a      	mov	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3301      	adds	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	3301      	adds	r3, #1
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	429a      	cmp	r2, r3
 800796c:	d3e2      	bcc.n	8007934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3724      	adds	r7, #36	; 0x24
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800797c:	b480      	push	{r7}
 800797e:	b08b      	sub	sp, #44	; 0x2c
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	089b      	lsrs	r3, r3, #2
 8007996:	b29b      	uxth	r3, r3
 8007998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	e014      	b.n	80079d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	3301      	adds	r3, #1
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	3301      	adds	r3, #1
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	3301      	adds	r3, #1
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	3301      	adds	r3, #1
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3e6      	bcc.n	80079a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079da:	8bfb      	ldrh	r3, [r7, #30]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	461a      	mov	r2, r3
 80079ec:	f107 0310 	add.w	r3, r7, #16
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	701a      	strb	r2, [r3, #0]
      i++;
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	3301      	adds	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a12:	8bfb      	ldrh	r3, [r7, #30]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a18:	8bfb      	ldrh	r3, [r7, #30]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1ea      	bne.n	80079f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	372c      	adds	r7, #44	; 0x2c
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d12c      	bne.n	8007aa2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	db12      	blt.n	8007a80 <USB_EPSetStall+0x54>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00f      	beq.n	8007a80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	0151      	lsls	r1, r2, #5
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	440a      	add	r2, r1
 8007a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	e02b      	b.n	8007afa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db12      	blt.n	8007ada <USB_EPSetStall+0xae>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00f      	beq.n	8007ada <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ad8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007af8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d128      	bne.n	8007b76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d003      	beq.n	8007b54 <USB_EPClearStall+0x4c>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	791b      	ldrb	r3, [r3, #4]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d138      	bne.n	8007bc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	e027      	b.n	8007bc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	791b      	ldrb	r3, [r3, #4]
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d003      	beq.n	8007ba6 <USB_EPClearStall+0x9e>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d10f      	bne.n	8007bc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bf6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4e:	f023 0302 	bic.w	r3, r3, #2
 8007c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c7c:	f023 0303 	bic.w	r3, r3, #3
 8007c80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c90:	f043 0302 	orr.w	r3, r3, #2
 8007c94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	4013      	ands	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	b29b      	uxth	r3, r3
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d60:	68bb      	ldr	r3, [r7, #8]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9e:	01db      	lsls	r3, r3, #7
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4013      	ands	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e04:	f023 0307 	bic.w	r3, r3, #7
 8007e08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	460b      	mov	r3, r1
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	333c      	adds	r3, #60	; 0x3c
 8007e42:	3304      	adds	r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4a26      	ldr	r2, [pc, #152]	; (8007ee4 <USB_EP0_OutStart+0xb8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d90a      	bls.n	8007e66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e60:	d101      	bne.n	8007e66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e037      	b.n	8007ed6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e94:	f043 0318 	orr.w	r3, r3, #24
 8007e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007eac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d10f      	bne.n	8007ed4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ece:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	4f54300a 	.word	0x4f54300a

08007ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f00:	d901      	bls.n	8007f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e01b      	b.n	8007f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	daf2      	bge.n	8007ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f043 0201 	orr.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f2a:	d901      	bls.n	8007f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e006      	b.n	8007f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d0f0      	beq.n	8007f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f5c:	f002 fcae 	bl	800a8bc <USBD_static_malloc>
 8007f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32b0      	adds	r2, #176	; 0xb0
 8007f72:	2100      	movs	r1, #0
 8007f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e0d4      	b.n	8008126 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f005 ffee 	bl	800df64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	32b0      	adds	r2, #176	; 0xb0
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	32b0      	adds	r2, #176	; 0xb0
 8007fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	7c1b      	ldrb	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d138      	bne.n	8008026 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fb4:	4b5e      	ldr	r3, [pc, #376]	; (8008130 <USBD_CDC_Init+0x1e4>)
 8007fb6:	7819      	ldrb	r1, [r3, #0]
 8007fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f002 fb59 	bl	800a676 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fc4:	4b5a      	ldr	r3, [pc, #360]	; (8008130 <USBD_CDC_Init+0x1e4>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3324      	adds	r3, #36	; 0x24
 8007fda:	2201      	movs	r2, #1
 8007fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fde:	4b55      	ldr	r3, [pc, #340]	; (8008134 <USBD_CDC_Init+0x1e8>)
 8007fe0:	7819      	ldrb	r1, [r3, #0]
 8007fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f002 fb44 	bl	800a676 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fee:	4b51      	ldr	r3, [pc, #324]	; (8008134 <USBD_CDC_Init+0x1e8>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	f003 020f 	and.w	r2, r3, #15
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008006:	2201      	movs	r2, #1
 8008008:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800800a:	4b4b      	ldr	r3, [pc, #300]	; (8008138 <USBD_CDC_Init+0x1ec>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 020f 	and.w	r2, r3, #15
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	3326      	adds	r3, #38	; 0x26
 8008020:	2210      	movs	r2, #16
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	e035      	b.n	8008092 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008026:	4b42      	ldr	r3, [pc, #264]	; (8008130 <USBD_CDC_Init+0x1e4>)
 8008028:	7819      	ldrb	r1, [r3, #0]
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	2202      	movs	r2, #2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 fb21 	bl	800a676 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008034:	4b3e      	ldr	r3, [pc, #248]	; (8008130 <USBD_CDC_Init+0x1e4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 020f 	and.w	r2, r3, #15
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	3324      	adds	r3, #36	; 0x24
 800804a:	2201      	movs	r2, #1
 800804c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800804e:	4b39      	ldr	r3, [pc, #228]	; (8008134 <USBD_CDC_Init+0x1e8>)
 8008050:	7819      	ldrb	r1, [r3, #0]
 8008052:	2340      	movs	r3, #64	; 0x40
 8008054:	2202      	movs	r2, #2
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f002 fb0d 	bl	800a676 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800805c:	4b35      	ldr	r3, [pc, #212]	; (8008134 <USBD_CDC_Init+0x1e8>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008074:	2201      	movs	r2, #1
 8008076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008078:	4b2f      	ldr	r3, [pc, #188]	; (8008138 <USBD_CDC_Init+0x1ec>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	3326      	adds	r3, #38	; 0x26
 800808e:	2210      	movs	r2, #16
 8008090:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008092:	4b29      	ldr	r3, [pc, #164]	; (8008138 <USBD_CDC_Init+0x1ec>)
 8008094:	7819      	ldrb	r1, [r3, #0]
 8008096:	2308      	movs	r3, #8
 8008098:	2203      	movs	r2, #3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f002 faeb 	bl	800a676 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80080a0:	4b25      	ldr	r3, [pc, #148]	; (8008138 <USBD_CDC_Init+0x1ec>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 020f 	and.w	r2, r3, #15
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	3324      	adds	r3, #36	; 0x24
 80080b6:	2201      	movs	r2, #1
 80080b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	33b0      	adds	r3, #176	; 0xb0
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80080f0:	2302      	movs	r3, #2
 80080f2:	e018      	b.n	8008126 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7c1b      	ldrb	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <USBD_CDC_Init+0x1e8>)
 80080fe:	7819      	ldrb	r1, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f002 fba2 	bl	800a854 <USBD_LL_PrepareReceive>
 8008110:	e008      	b.n	8008124 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008112:	4b08      	ldr	r3, [pc, #32]	; (8008134 <USBD_CDC_Init+0x1e8>)
 8008114:	7819      	ldrb	r1, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f002 fb98 	bl	800a854 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	2000010b 	.word	0x2000010b
 8008134:	2000010c 	.word	0x2000010c
 8008138:	2000010d 	.word	0x2000010d

0800813c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008148:	4b3a      	ldr	r3, [pc, #232]	; (8008234 <USBD_CDC_DeInit+0xf8>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f002 fab7 	bl	800a6c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008154:	4b37      	ldr	r3, [pc, #220]	; (8008234 <USBD_CDC_DeInit+0xf8>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 020f 	and.w	r2, r3, #15
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	3324      	adds	r3, #36	; 0x24
 800816a:	2200      	movs	r2, #0
 800816c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800816e:	4b32      	ldr	r3, [pc, #200]	; (8008238 <USBD_CDC_DeInit+0xfc>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f002 faa4 	bl	800a6c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800817a:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <USBD_CDC_DeInit+0xfc>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 020f 	and.w	r2, r3, #15
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008192:	2200      	movs	r2, #0
 8008194:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <USBD_CDC_DeInit+0x100>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f002 fa90 	bl	800a6c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80081a2:	4b26      	ldr	r3, [pc, #152]	; (800823c <USBD_CDC_DeInit+0x100>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	3324      	adds	r3, #36	; 0x24
 80081b8:	2200      	movs	r2, #0
 80081ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80081bc:	4b1f      	ldr	r3, [pc, #124]	; (800823c <USBD_CDC_DeInit+0x100>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 020f 	and.w	r2, r3, #15
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	3326      	adds	r3, #38	; 0x26
 80081d2:	2200      	movs	r2, #0
 80081d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	32b0      	adds	r2, #176	; 0xb0
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01f      	beq.n	8008228 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	33b0      	adds	r3, #176	; 0xb0
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32b0      	adds	r2, #176	; 0xb0
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	4618      	mov	r0, r3
 800820c:	f002 fb64 	bl	800a8d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32b0      	adds	r2, #176	; 0xb0
 800821a:	2100      	movs	r1, #0
 800821c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	2000010b 	.word	0x2000010b
 8008238:	2000010c 	.word	0x2000010c
 800823c:	2000010d 	.word	0x2000010d

08008240 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	32b0      	adds	r2, #176	; 0xb0
 8008254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e0bf      	b.n	80083f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008278:	2b00      	cmp	r3, #0
 800827a:	d050      	beq.n	800831e <USBD_CDC_Setup+0xde>
 800827c:	2b20      	cmp	r3, #32
 800827e:	f040 80af 	bne.w	80083e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	88db      	ldrh	r3, [r3, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d03a      	beq.n	8008300 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b25b      	sxtb	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	da1b      	bge.n	80082cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	33b0      	adds	r3, #176	; 0xb0
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80082aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	88d2      	ldrh	r2, [r2, #6]
 80082b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	88db      	ldrh	r3, [r3, #6]
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	bf28      	it	cs
 80082ba:	2307      	movcs	r3, #7
 80082bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	89fa      	ldrh	r2, [r7, #14]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 fd95 	bl	8009df4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082ca:	e090      	b.n	80083ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	785a      	ldrb	r2, [r3, #1]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b3f      	cmp	r3, #63	; 0x3f
 80082dc:	d803      	bhi.n	80082e6 <USBD_CDC_Setup+0xa6>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88db      	ldrh	r3, [r3, #6]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	e000      	b.n	80082e8 <USBD_CDC_Setup+0xa8>
 80082e6:	2240      	movs	r2, #64	; 0x40
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082ee:	6939      	ldr	r1, [r7, #16]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80082f6:	461a      	mov	r2, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 fda7 	bl	8009e4c <USBD_CtlPrepareRx>
      break;
 80082fe:	e076      	b.n	80083ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	33b0      	adds	r3, #176	; 0xb0
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	7850      	ldrb	r0, [r2, #1]
 8008316:	2200      	movs	r2, #0
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	4798      	blx	r3
      break;
 800831c:	e067      	b.n	80083ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b0b      	cmp	r3, #11
 8008324:	d851      	bhi.n	80083ca <USBD_CDC_Setup+0x18a>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_CDC_Setup+0xec>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	0800835d 	.word	0x0800835d
 8008330:	080083d9 	.word	0x080083d9
 8008334:	080083cb 	.word	0x080083cb
 8008338:	080083cb 	.word	0x080083cb
 800833c:	080083cb 	.word	0x080083cb
 8008340:	080083cb 	.word	0x080083cb
 8008344:	080083cb 	.word	0x080083cb
 8008348:	080083cb 	.word	0x080083cb
 800834c:	080083cb 	.word	0x080083cb
 8008350:	080083cb 	.word	0x080083cb
 8008354:	08008387 	.word	0x08008387
 8008358:	080083b1 	.word	0x080083b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d107      	bne.n	8008378 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008368:	f107 030a 	add.w	r3, r7, #10
 800836c:	2202      	movs	r2, #2
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fd3f 	bl	8009df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008376:	e032      	b.n	80083de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fcbd 	bl	8009cfa <USBD_CtlError>
            ret = USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	75fb      	strb	r3, [r7, #23]
          break;
 8008384:	e02b      	b.n	80083de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d107      	bne.n	80083a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008392:	f107 030d 	add.w	r3, r7, #13
 8008396:	2201      	movs	r2, #1
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fd2a 	bl	8009df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083a0:	e01d      	b.n	80083de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fca8 	bl	8009cfa <USBD_CtlError>
            ret = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	75fb      	strb	r3, [r7, #23]
          break;
 80083ae:	e016      	b.n	80083de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d00f      	beq.n	80083dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fc9b 	bl	8009cfa <USBD_CtlError>
            ret = USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083c8:	e008      	b.n	80083dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fc94 	bl	8009cfa <USBD_CtlError>
          ret = USBD_FAIL;
 80083d2:	2303      	movs	r3, #3
 80083d4:	75fb      	strb	r3, [r7, #23]
          break;
 80083d6:	e002      	b.n	80083de <USBD_CDC_Setup+0x19e>
          break;
 80083d8:	bf00      	nop
 80083da:	e008      	b.n	80083ee <USBD_CDC_Setup+0x1ae>
          break;
 80083dc:	bf00      	nop
      }
      break;
 80083de:	e006      	b.n	80083ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 fc89 	bl	8009cfa <USBD_CtlError>
      ret = USBD_FAIL;
 80083e8:	2303      	movs	r3, #3
 80083ea:	75fb      	strb	r3, [r7, #23]
      break;
 80083ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800840a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	; 0xb0
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800841e:	2303      	movs	r3, #3
 8008420:	e065      	b.n	80084ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	32b0      	adds	r2, #176	; 0xb0
 800842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008430:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	3318      	adds	r3, #24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02f      	beq.n	80084ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	f003 020f 	and.w	r2, r3, #15
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3318      	adds	r3, #24
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	f003 010f 	and.w	r1, r3, #15
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	460b      	mov	r3, r1
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	440b      	add	r3, r1
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4403      	add	r3, r0
 8008474:	331c      	adds	r3, #28
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	fbb2 f1f3 	udiv	r1, r2, r3
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008482:	2b00      	cmp	r3, #0
 8008484:	d112      	bne.n	80084ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	f003 020f 	and.w	r2, r3, #15
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	3318      	adds	r3, #24
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	2300      	movs	r3, #0
 80084a2:	2200      	movs	r2, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f002 f9b4 	bl	800a812 <USBD_LL_Transmit>
 80084aa:	e01f      	b.n	80084ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	33b0      	adds	r3, #176	; 0xb0
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d010      	beq.n	80084ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	33b0      	adds	r3, #176	; 0xb0
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	32b0      	adds	r2, #176	; 0xb0
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	32b0      	adds	r2, #176	; 0xb0
 800851c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	e01a      	b.n	800855e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 f9b2 	bl	800a896 <USBD_LL_GetRxDataSize>
 8008532:	4602      	mov	r2, r0
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	33b0      	adds	r3, #176	; 0xb0
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008558:	4611      	mov	r1, r2
 800855a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32b0      	adds	r2, #176	; 0xb0
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e025      	b.n	80085d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	33b0      	adds	r3, #176	; 0xb0
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01a      	beq.n	80085d2 <USBD_CDC_EP0_RxReady+0x6c>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085a2:	2bff      	cmp	r3, #255	; 0xff
 80085a4:	d015      	beq.n	80085d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	33b0      	adds	r3, #176	; 0xb0
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80085be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085c6:	b292      	uxth	r2, r2
 80085c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085e4:	2182      	movs	r1, #130	; 0x82
 80085e6:	4818      	ldr	r0, [pc, #96]	; (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085e8:	f000 fd4f 	bl	800908a <USBD_GetEpDesc>
 80085ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ee:	2101      	movs	r1, #1
 80085f0:	4815      	ldr	r0, [pc, #84]	; (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085f2:	f000 fd4a 	bl	800908a <USBD_GetEpDesc>
 80085f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085f8:	2181      	movs	r1, #129	; 0x81
 80085fa:	4813      	ldr	r0, [pc, #76]	; (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085fc:	f000 fd45 	bl	800908a <USBD_GetEpDesc>
 8008600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2210      	movs	r2, #16
 800860c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2200      	movs	r2, #0
 8008618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800861c:	711a      	strb	r2, [r3, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d006      	beq.n	8008636 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008630:	711a      	strb	r2, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2243      	movs	r2, #67	; 0x43
 800863a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	200000c8 	.word	0x200000c8

0800864c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008654:	2182      	movs	r1, #130	; 0x82
 8008656:	4818      	ldr	r0, [pc, #96]	; (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008658:	f000 fd17 	bl	800908a <USBD_GetEpDesc>
 800865c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800865e:	2101      	movs	r1, #1
 8008660:	4815      	ldr	r0, [pc, #84]	; (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008662:	f000 fd12 	bl	800908a <USBD_GetEpDesc>
 8008666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008668:	2181      	movs	r1, #129	; 0x81
 800866a:	4813      	ldr	r0, [pc, #76]	; (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800866c:	f000 fd0d 	bl	800908a <USBD_GetEpDesc>
 8008670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2210      	movs	r2, #16
 800867c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d006      	beq.n	8008692 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2200      	movs	r2, #0
 8008688:	711a      	strb	r2, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f042 0202 	orr.w	r2, r2, #2
 8008690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d006      	beq.n	80086a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	711a      	strb	r2, [r3, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f042 0202 	orr.w	r2, r2, #2
 80086a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2243      	movs	r2, #67	; 0x43
 80086aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200000c8 	.word	0x200000c8

080086bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086c4:	2182      	movs	r1, #130	; 0x82
 80086c6:	4818      	ldr	r0, [pc, #96]	; (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086c8:	f000 fcdf 	bl	800908a <USBD_GetEpDesc>
 80086cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ce:	2101      	movs	r1, #1
 80086d0:	4815      	ldr	r0, [pc, #84]	; (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086d2:	f000 fcda 	bl	800908a <USBD_GetEpDesc>
 80086d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086d8:	2181      	movs	r1, #129	; 0x81
 80086da:	4813      	ldr	r0, [pc, #76]	; (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086dc:	f000 fcd5 	bl	800908a <USBD_GetEpDesc>
 80086e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2210      	movs	r2, #16
 80086ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086fc:	711a      	strb	r2, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d006      	beq.n	8008716 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008710:	711a      	strb	r2, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2243      	movs	r2, #67	; 0x43
 800871a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800871c:	4b02      	ldr	r3, [pc, #8]	; (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200000c8 	.word	0x200000c8

0800872c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	220a      	movs	r2, #10
 8008738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800873a:	4b03      	ldr	r3, [pc, #12]	; (8008748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	20000084 	.word	0x20000084

0800874c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e009      	b.n	8008774 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	33b0      	adds	r3, #176	; 0xb0
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	32b0      	adds	r2, #176	; 0xb0
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e008      	b.n	80087b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	32b0      	adds	r2, #176	; 0xb0
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e004      	b.n	80087f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	32b0      	adds	r2, #176	; 0xb0
 8008812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008816:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	e025      	b.n	8008872 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11f      	bne.n	8008870 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2201      	movs	r2, #1
 8008834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008838:	4b10      	ldr	r3, [pc, #64]	; (800887c <USBD_CDC_TransmitPacket+0x7c>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4403      	add	r3, r0
 8008852:	3318      	adds	r3, #24
 8008854:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <USBD_CDC_TransmitPacket+0x7c>)
 8008858:	7819      	ldrb	r1, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 ffd3 	bl	800a812 <USBD_LL_Transmit>

    ret = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	2000010b 	.word	0x2000010b

08008880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32b0      	adds	r2, #176	; 0xb0
 8008892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008896:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	32b0      	adds	r2, #176	; 0xb0
 80088a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e018      	b.n	80088e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	7c1b      	ldrb	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10a      	bne.n	80088cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <USBD_CDC_ReceivePacket+0x68>)
 80088b8:	7819      	ldrb	r1, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 ffc5 	bl	800a854 <USBD_LL_PrepareReceive>
 80088ca:	e008      	b.n	80088de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <USBD_CDC_ReceivePacket+0x68>)
 80088ce:	7819      	ldrb	r1, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088d6:	2340      	movs	r3, #64	; 0x40
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 ffbb 	bl	800a854 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	2000010c 	.word	0x2000010c

080088ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	e01f      	b.n	8008944 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	79fa      	ldrb	r2, [r7, #7]
 8008936:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f001 fe35 	bl	800a5a8 <USBD_LL_Init>
 800893e:	4603      	mov	r3, r0
 8008940:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	e025      	b.n	80089b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32ae      	adds	r2, #174	; 0xae
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00f      	beq.n	80089a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	32ae      	adds	r2, #174	; 0xae
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	f107 020e 	add.w	r2, r7, #14
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	4602      	mov	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fe3d 	bl	800a640 <USBD_LL_Start>
 80089c6:	4603      	mov	r3, r0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	78fa      	ldrb	r2, [r7, #3]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 f90e 	bl	8009c86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d01a      	beq.n	8008ac4 <USBD_LL_SetupStage+0x72>
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d822      	bhi.n	8008ad8 <USBD_LL_SetupStage+0x86>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <USBD_LL_SetupStage+0x4a>
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d00a      	beq.n	8008ab0 <USBD_LL_SetupStage+0x5e>
 8008a9a:	e01d      	b.n	8008ad8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb65 	bl	8009174 <USBD_StdDevReq>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	e020      	b.n	8008af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fbcd 	bl	8009258 <USBD_StdItfReq>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	e016      	b.n	8008af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fc2f 	bl	8009330 <USBD_StdEPReq>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad6:	e00c      	b.n	8008af2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 fe0a 	bl	800a700 <USBD_LL_StallEP>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	bf00      	nop
  }

  return ret;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	460b      	mov	r3, r1
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d16e      	bne.n	8008bf2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	f040 8098 	bne.w	8008c58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d913      	bls.n	8008b5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	1ad2      	subs	r2, r2, r3
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	bf28      	it	cs
 8008b4e:	4613      	movcs	r3, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f001 f996 	bl	8009e86 <USBD_CtlContinueRx>
 8008b5a:	e07d      	b.n	8008c58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b62:	f003 031f 	and.w	r3, r3, #31
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d014      	beq.n	8008b94 <USBD_LL_DataOutStage+0x98>
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d81d      	bhi.n	8008baa <USBD_LL_DataOutStage+0xae>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <USBD_LL_DataOutStage+0x7c>
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d003      	beq.n	8008b7e <USBD_LL_DataOutStage+0x82>
 8008b76:	e018      	b.n	8008baa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b7c:	e018      	b.n	8008bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fa64 	bl	8009056 <USBD_CoreFindIF>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75bb      	strb	r3, [r7, #22]
            break;
 8008b92:	e00d      	b.n	8008bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fa66 	bl	8009070 <USBD_CoreFindEP>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ba8:	e002      	b.n	8008bb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75bb      	strb	r3, [r7, #22]
            break;
 8008bae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bb0:	7dbb      	ldrb	r3, [r7, #22]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d119      	bne.n	8008bea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d113      	bne.n	8008bea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008bc2:	7dba      	ldrb	r2, [r7, #22]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	32ae      	adds	r2, #174	; 0xae
 8008bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bd2:	7dba      	ldrb	r2, [r7, #22]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bda:	7dba      	ldrb	r2, [r7, #22]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	32ae      	adds	r2, #174	; 0xae
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f001 f95c 	bl	8009ea8 <USBD_CtlSendStatus>
 8008bf0:	e032      	b.n	8008c58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bf2:	7afb      	ldrb	r3, [r7, #11]
 8008bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa37 	bl	8009070 <USBD_CoreFindEP>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c06:	7dbb      	ldrb	r3, [r7, #22]
 8008c08:	2bff      	cmp	r3, #255	; 0xff
 8008c0a:	d025      	beq.n	8008c58 <USBD_LL_DataOutStage+0x15c>
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d122      	bne.n	8008c58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d117      	bne.n	8008c4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c1e:	7dba      	ldrb	r2, [r7, #22]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	32ae      	adds	r2, #174	; 0xae
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00f      	beq.n	8008c4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c2e:	7dba      	ldrb	r2, [r7, #22]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c36:	7dba      	ldrb	r2, [r7, #22]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	32ae      	adds	r2, #174	; 0xae
 8008c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	7afa      	ldrb	r2, [r7, #11]
 8008c44:	4611      	mov	r1, r2
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	4798      	blx	r3
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	e000      	b.n	8008c5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d16f      	bne.n	8008d56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d15a      	bne.n	8008d3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	689a      	ldr	r2, [r3, #8]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d914      	bls.n	8008cbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	1ad2      	subs	r2, r2, r3
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f001 f8be 	bl	8009e2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f001 fdcd 	bl	800a854 <USBD_LL_PrepareReceive>
 8008cba:	e03f      	b.n	8008d3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d11c      	bne.n	8008d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d316      	bcc.n	8008d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d20f      	bcs.n	8008d02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f001 f89f 	bl	8009e2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f001 fdaa 	bl	800a854 <USBD_LL_PrepareReceive>
 8008d00:	e01c      	b.n	8008d3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d10f      	bne.n	8008d2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d009      	beq.n	8008d2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d2e:	2180      	movs	r1, #128	; 0x80
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f001 fce5 	bl	800a700 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f001 f8c9 	bl	8009ece <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d03a      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fe42 	bl	80089d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d54:	e032      	b.n	8008dbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f985 	bl	8009070 <USBD_CoreFindEP>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2bff      	cmp	r3, #255	; 0xff
 8008d6e:	d025      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d122      	bne.n	8008dbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d11c      	bne.n	8008dbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d82:	7dfa      	ldrb	r2, [r7, #23]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	32ae      	adds	r2, #174	; 0xae
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d014      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d92:	7dfa      	ldrb	r2, [r7, #23]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d9a:	7dfa      	ldrb	r2, [r7, #23]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	32ae      	adds	r2, #174	; 0xae
 8008da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	7afa      	ldrb	r2, [r7, #11]
 8008da8:	4611      	mov	r1, r2
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	4798      	blx	r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008db8:	7dbb      	ldrb	r3, [r7, #22]
 8008dba:	e000      	b.n	8008dbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d014      	beq.n	8008e2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00e      	beq.n	8008e2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6852      	ldr	r2, [r2, #4]
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e2c:	2340      	movs	r3, #64	; 0x40
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fc1f 	bl	800a676 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2240      	movs	r2, #64	; 0x40
 8008e44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e48:	2340      	movs	r3, #64	; 0x40
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2180      	movs	r1, #128	; 0x80
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 fc11 	bl	800a676 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2240      	movs	r2, #64	; 0x40
 8008e5e:	621a      	str	r2, [r3, #32]

  return ret;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d006      	beq.n	8008eac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2204      	movs	r2, #4
 8008eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d106      	bne.n	8008ee4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d110      	bne.n	8008f28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32ae      	adds	r2, #174	; 0xae
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e01c      	b.n	8008f8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d115      	bne.n	8008f8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	32ae      	adds	r2, #174	; 0xae
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	32ae      	adds	r2, #174	; 0xae
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	4611      	mov	r1, r2
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32ae      	adds	r2, #174	; 0xae
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e01c      	b.n	8008ff2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d115      	bne.n	8008ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	32ae      	adds	r2, #174	; 0xae
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	32ae      	adds	r2, #174	; 0xae
 8008fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	4611      	mov	r1, r2
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00e      	beq.n	800904c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	b2d2      	uxtb	r2, r2
 800903c:	4611      	mov	r1, r2
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009048:	2303      	movs	r3, #3
 800904a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	460b      	mov	r3, r1
 8009060:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009062:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800907c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	885b      	ldrh	r3, [r3, #2]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d920      	bls.n	80090f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090ba:	e013      	b.n	80090e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090bc:	f107 030a 	add.w	r3, r7, #10
 80090c0:	4619      	mov	r1, r3
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f000 f81b 	bl	80090fe <USBD_GetNextDesc>
 80090c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b05      	cmp	r3, #5
 80090d0:	d108      	bne.n	80090e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	789b      	ldrb	r3, [r3, #2]
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d008      	beq.n	80090f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	885b      	ldrh	r3, [r3, #2]
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	897b      	ldrh	r3, [r7, #10]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d8e5      	bhi.n	80090bc <USBD_GetEpDesc+0x32>
 80090f0:	e000      	b.n	80090f4 <USBD_GetEpDesc+0x6a>
          break;
 80090f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090f4:	693b      	ldr	r3, [r7, #16]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	881a      	ldrh	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	4413      	add	r3, r2
 8009118:	b29a      	uxth	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800912a:	68fb      	ldr	r3, [r7, #12]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	3301      	adds	r3, #1
 800914e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009156:	8a3b      	ldrh	r3, [r7, #16]
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	b21a      	sxth	r2, r3
 800915c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009160:	4313      	orrs	r3, r2
 8009162:	b21b      	sxth	r3, r3
 8009164:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009166:	89fb      	ldrh	r3, [r7, #14]
}
 8009168:	4618      	mov	r0, r3
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800918a:	2b40      	cmp	r3, #64	; 0x40
 800918c:	d005      	beq.n	800919a <USBD_StdDevReq+0x26>
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d857      	bhi.n	8009242 <USBD_StdDevReq+0xce>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00f      	beq.n	80091b6 <USBD_StdDevReq+0x42>
 8009196:	2b20      	cmp	r3, #32
 8009198:	d153      	bne.n	8009242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	32ae      	adds	r2, #174	; 0xae
 80091a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
      break;
 80091b4:	e04a      	b.n	800924c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	785b      	ldrb	r3, [r3, #1]
 80091ba:	2b09      	cmp	r3, #9
 80091bc:	d83b      	bhi.n	8009236 <USBD_StdDevReq+0xc2>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <USBD_StdDevReq+0x50>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	08009219 	.word	0x08009219
 80091c8:	0800922d 	.word	0x0800922d
 80091cc:	08009237 	.word	0x08009237
 80091d0:	08009223 	.word	0x08009223
 80091d4:	08009237 	.word	0x08009237
 80091d8:	080091f7 	.word	0x080091f7
 80091dc:	080091ed 	.word	0x080091ed
 80091e0:	08009237 	.word	0x08009237
 80091e4:	0800920f 	.word	0x0800920f
 80091e8:	08009201 	.word	0x08009201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa3c 	bl	800966c <USBD_GetDescriptor>
          break;
 80091f4:	e024      	b.n	8009240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fba1 	bl	8009940 <USBD_SetAddress>
          break;
 80091fe:	e01f      	b.n	8009240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fbe0 	bl	80099c8 <USBD_SetConfig>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
          break;
 800920c:	e018      	b.n	8009240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fc83 	bl	8009b1c <USBD_GetConfig>
          break;
 8009216:	e013      	b.n	8009240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fcb4 	bl	8009b88 <USBD_GetStatus>
          break;
 8009220:	e00e      	b.n	8009240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fce3 	bl	8009bf0 <USBD_SetFeature>
          break;
 800922a:	e009      	b.n	8009240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fd07 	bl	8009c42 <USBD_ClrFeature>
          break;
 8009234:	e004      	b.n	8009240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fd5e 	bl	8009cfa <USBD_CtlError>
          break;
 800923e:	bf00      	nop
      }
      break;
 8009240:	e004      	b.n	800924c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fd58 	bl	8009cfa <USBD_CtlError>
      break;
 800924a:	bf00      	nop
  }

  return ret;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d005      	beq.n	800927e <USBD_StdItfReq+0x26>
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	d852      	bhi.n	800931c <USBD_StdItfReq+0xc4>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <USBD_StdItfReq+0x26>
 800927a:	2b20      	cmp	r3, #32
 800927c:	d14e      	bne.n	800931c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009284:	b2db      	uxtb	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	2b02      	cmp	r3, #2
 800928a:	d840      	bhi.n	800930e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	889b      	ldrh	r3, [r3, #4]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b01      	cmp	r3, #1
 8009294:	d836      	bhi.n	8009304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff fed9 	bl	8009056 <USBD_CoreFindIF>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	2bff      	cmp	r3, #255	; 0xff
 80092ac:	d01d      	beq.n	80092ea <USBD_StdItfReq+0x92>
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d11a      	bne.n	80092ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092b4:	7bba      	ldrb	r2, [r7, #14]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	32ae      	adds	r2, #174	; 0xae
 80092ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00f      	beq.n	80092e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092c4:	7bba      	ldrb	r2, [r7, #14]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092cc:	7bba      	ldrb	r2, [r7, #14]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	32ae      	adds	r2, #174	; 0xae
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092e2:	e004      	b.n	80092ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092e8:	e001      	b.n	80092ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092ea:	2303      	movs	r3, #3
 80092ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	88db      	ldrh	r3, [r3, #6]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d110      	bne.n	8009318 <USBD_StdItfReq+0xc0>
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10d      	bne.n	8009318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fdd3 	bl	8009ea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009302:	e009      	b.n	8009318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fcf7 	bl	8009cfa <USBD_CtlError>
          break;
 800930c:	e004      	b.n	8009318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fcf2 	bl	8009cfa <USBD_CtlError>
          break;
 8009316:	e000      	b.n	800931a <USBD_StdItfReq+0xc2>
          break;
 8009318:	bf00      	nop
      }
      break;
 800931a:	e004      	b.n	8009326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fceb 	bl	8009cfa <USBD_CtlError>
      break;
 8009324:	bf00      	nop
  }

  return ret;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	889b      	ldrh	r3, [r3, #4]
 8009342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	d007      	beq.n	8009360 <USBD_StdEPReq+0x30>
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	f200 817f 	bhi.w	8009654 <USBD_StdEPReq+0x324>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d02a      	beq.n	80093b0 <USBD_StdEPReq+0x80>
 800935a:	2b20      	cmp	r3, #32
 800935c:	f040 817a 	bne.w	8009654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff fe83 	bl	8009070 <USBD_CoreFindEP>
 800936a:	4603      	mov	r3, r0
 800936c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800936e:	7b7b      	ldrb	r3, [r7, #13]
 8009370:	2bff      	cmp	r3, #255	; 0xff
 8009372:	f000 8174 	beq.w	800965e <USBD_StdEPReq+0x32e>
 8009376:	7b7b      	ldrb	r3, [r7, #13]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f040 8170 	bne.w	800965e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800937e:	7b7a      	ldrb	r2, [r7, #13]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009386:	7b7a      	ldrb	r2, [r7, #13]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	32ae      	adds	r2, #174	; 0xae
 800938c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8163 	beq.w	800965e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009398:	7b7a      	ldrb	r2, [r7, #13]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	32ae      	adds	r2, #174	; 0xae
 800939e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093ae:	e156      	b.n	800965e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d008      	beq.n	80093ca <USBD_StdEPReq+0x9a>
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	f300 8145 	bgt.w	8009648 <USBD_StdEPReq+0x318>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 809b 	beq.w	80094fa <USBD_StdEPReq+0x1ca>
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d03c      	beq.n	8009442 <USBD_StdEPReq+0x112>
 80093c8:	e13e      	b.n	8009648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d002      	beq.n	80093dc <USBD_StdEPReq+0xac>
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d016      	beq.n	8009408 <USBD_StdEPReq+0xd8>
 80093da:	e02c      	b.n	8009436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00d      	beq.n	80093fe <USBD_StdEPReq+0xce>
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	2b80      	cmp	r3, #128	; 0x80
 80093e6:	d00a      	beq.n	80093fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 f987 	bl	800a700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093f2:	2180      	movs	r1, #128	; 0x80
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 f983 	bl	800a700 <USBD_LL_StallEP>
 80093fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093fc:	e020      	b.n	8009440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc7a 	bl	8009cfa <USBD_CtlError>
              break;
 8009406:	e01b      	b.n	8009440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	885b      	ldrh	r3, [r3, #2]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10e      	bne.n	800942e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <USBD_StdEPReq+0xfe>
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	2b80      	cmp	r3, #128	; 0x80
 800941a:	d008      	beq.n	800942e <USBD_StdEPReq+0xfe>
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	88db      	ldrh	r3, [r3, #6]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 f969 	bl	800a700 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fd3a 	bl	8009ea8 <USBD_CtlSendStatus>

              break;
 8009434:	e004      	b.n	8009440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc5e 	bl	8009cfa <USBD_CtlError>
              break;
 800943e:	bf00      	nop
          }
          break;
 8009440:	e107      	b.n	8009652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d002      	beq.n	8009454 <USBD_StdEPReq+0x124>
 800944e:	2b03      	cmp	r3, #3
 8009450:	d016      	beq.n	8009480 <USBD_StdEPReq+0x150>
 8009452:	e04b      	b.n	80094ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <USBD_StdEPReq+0x146>
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	d00a      	beq.n	8009476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 f94b 	bl	800a700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800946a:	2180      	movs	r1, #128	; 0x80
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 f947 	bl	800a700 <USBD_LL_StallEP>
 8009472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009474:	e040      	b.n	80094f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fc3e 	bl	8009cfa <USBD_CtlError>
              break;
 800947e:	e03b      	b.n	80094f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	885b      	ldrh	r3, [r3, #2]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d136      	bne.n	80094f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948e:	2b00      	cmp	r3, #0
 8009490:	d004      	beq.n	800949c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f951 	bl	800a73e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fd03 	bl	8009ea8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff fde2 	bl	8009070 <USBD_CoreFindEP>
 80094ac:	4603      	mov	r3, r0
 80094ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094b0:	7b7b      	ldrb	r3, [r7, #13]
 80094b2:	2bff      	cmp	r3, #255	; 0xff
 80094b4:	d01f      	beq.n	80094f6 <USBD_StdEPReq+0x1c6>
 80094b6:	7b7b      	ldrb	r3, [r7, #13]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11c      	bne.n	80094f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094bc:	7b7a      	ldrb	r2, [r7, #13]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094c4:	7b7a      	ldrb	r2, [r7, #13]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	32ae      	adds	r2, #174	; 0xae
 80094ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d010      	beq.n	80094f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094d4:	7b7a      	ldrb	r2, [r7, #13]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	32ae      	adds	r2, #174	; 0xae
 80094da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094ea:	e004      	b.n	80094f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fc03 	bl	8009cfa <USBD_CtlError>
              break;
 80094f4:	e000      	b.n	80094f8 <USBD_StdEPReq+0x1c8>
              break;
 80094f6:	bf00      	nop
          }
          break;
 80094f8:	e0ab      	b.n	8009652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b02      	cmp	r3, #2
 8009504:	d002      	beq.n	800950c <USBD_StdEPReq+0x1dc>
 8009506:	2b03      	cmp	r3, #3
 8009508:	d032      	beq.n	8009570 <USBD_StdEPReq+0x240>
 800950a:	e097      	b.n	800963c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d007      	beq.n	8009522 <USBD_StdEPReq+0x1f2>
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	2b80      	cmp	r3, #128	; 0x80
 8009516:	d004      	beq.n	8009522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fbed 	bl	8009cfa <USBD_CtlError>
                break;
 8009520:	e091      	b.n	8009646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	da0b      	bge.n	8009542 <USBD_StdEPReq+0x212>
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	3310      	adds	r3, #16
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	3304      	adds	r3, #4
 8009540:	e00b      	b.n	800955a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	3304      	adds	r3, #4
 800955a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2202      	movs	r2, #2
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc43 	bl	8009df4 <USBD_CtlSendData>
              break;
 800956e:	e06a      	b.n	8009646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009574:	2b00      	cmp	r3, #0
 8009576:	da11      	bge.n	800959c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	f003 020f 	and.w	r2, r3, #15
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	3324      	adds	r3, #36	; 0x24
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d117      	bne.n	80095c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fbb0 	bl	8009cfa <USBD_CtlError>
                  break;
 800959a:	e054      	b.n	8009646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	f003 020f 	and.w	r2, r3, #15
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb9d 	bl	8009cfa <USBD_CtlError>
                  break;
 80095c0:	e041      	b.n	8009646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	da0b      	bge.n	80095e2 <USBD_StdEPReq+0x2b2>
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	3310      	adds	r3, #16
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	3304      	adds	r3, #4
 80095e0:	e00b      	b.n	80095fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	3304      	adds	r3, #4
 80095fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <USBD_StdEPReq+0x2d8>
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d103      	bne.n	8009610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	e00e      	b.n	800962e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 f8b1 	bl	800a77c <USBD_LL_IsStallEP>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e002      	b.n	800962e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2202      	movs	r2, #2
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fbdd 	bl	8009df4 <USBD_CtlSendData>
              break;
 800963a:	e004      	b.n	8009646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb5b 	bl	8009cfa <USBD_CtlError>
              break;
 8009644:	bf00      	nop
          }
          break;
 8009646:	e004      	b.n	8009652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb55 	bl	8009cfa <USBD_CtlError>
          break;
 8009650:	bf00      	nop
      }
      break;
 8009652:	e005      	b.n	8009660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fb4f 	bl	8009cfa <USBD_CtlError>
      break;
 800965c:	e000      	b.n	8009660 <USBD_StdEPReq+0x330>
      break;
 800965e:	bf00      	nop
  }

  return ret;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800967a:	2300      	movs	r3, #0
 800967c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	885b      	ldrh	r3, [r3, #2]
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	2b06      	cmp	r3, #6
 800968e:	f200 8128 	bhi.w	80098e2 <USBD_GetDescriptor+0x276>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <USBD_GetDescriptor+0x2c>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096b5 	.word	0x080096b5
 800969c:	080096cd 	.word	0x080096cd
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	080098e3 	.word	0x080098e3
 80096a8:	080098e3 	.word	0x080098e3
 80096ac:	08009883 	.word	0x08009883
 80096b0:	080098af 	.word	0x080098af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	7c12      	ldrb	r2, [r2, #16]
 80096c0:	f107 0108 	add.w	r1, r7, #8
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	60f8      	str	r0, [r7, #12]
      break;
 80096ca:	e112      	b.n	80098f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7c1b      	ldrb	r3, [r3, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10d      	bne.n	80096f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096dc:	f107 0208 	add.w	r2, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	2202      	movs	r2, #2
 80096ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096ee:	e100      	b.n	80098f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	f107 0208 	add.w	r2, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	2202      	movs	r2, #2
 8009708:	701a      	strb	r2, [r3, #0]
      break;
 800970a:	e0f2      	b.n	80098f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b05      	cmp	r3, #5
 8009714:	f200 80ac 	bhi.w	8009870 <USBD_GetDescriptor+0x204>
 8009718:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <USBD_GetDescriptor+0xb4>)
 800971a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971e:	bf00      	nop
 8009720:	08009739 	.word	0x08009739
 8009724:	0800976d 	.word	0x0800976d
 8009728:	080097a1 	.word	0x080097a1
 800972c:	080097d5 	.word	0x080097d5
 8009730:	08009809 	.word	0x08009809
 8009734:	0800983d 	.word	0x0800983d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	7c12      	ldrb	r2, [r2, #16]
 8009750:	f107 0108 	add.w	r1, r7, #8
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800975a:	e091      	b.n	8009880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 facb 	bl	8009cfa <USBD_CtlError>
            err++;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	3301      	adds	r3, #1
 8009768:	72fb      	strb	r3, [r7, #11]
          break;
 800976a:	e089      	b.n	8009880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7c12      	ldrb	r2, [r2, #16]
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800978e:	e077      	b.n	8009880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fab1 	bl	8009cfa <USBD_CtlError>
            err++;
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	3301      	adds	r3, #1
 800979c:	72fb      	strb	r3, [r7, #11]
          break;
 800979e:	e06f      	b.n	8009880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7c12      	ldrb	r2, [r2, #16]
 80097b8:	f107 0108 	add.w	r1, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
 80097c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c2:	e05d      	b.n	8009880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa97 	bl	8009cfa <USBD_CtlError>
            err++;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	3301      	adds	r3, #1
 80097d0:	72fb      	strb	r3, [r7, #11]
          break;
 80097d2:	e055      	b.n	8009880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	7c12      	ldrb	r2, [r2, #16]
 80097ec:	f107 0108 	add.w	r1, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097f6:	e043      	b.n	8009880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa7d 	bl	8009cfa <USBD_CtlError>
            err++;
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	3301      	adds	r3, #1
 8009804:	72fb      	strb	r3, [r7, #11]
          break;
 8009806:	e03b      	b.n	8009880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 0108 	add.w	r1, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982a:	e029      	b.n	8009880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa63 	bl	8009cfa <USBD_CtlError>
            err++;
 8009834:	7afb      	ldrb	r3, [r7, #11]
 8009836:	3301      	adds	r3, #1
 8009838:	72fb      	strb	r3, [r7, #11]
          break;
 800983a:	e021      	b.n	8009880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	7c12      	ldrb	r2, [r2, #16]
 8009854:	f107 0108 	add.w	r1, r7, #8
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985e:	e00f      	b.n	8009880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa49 	bl	8009cfa <USBD_CtlError>
            err++;
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	3301      	adds	r3, #1
 800986c:	72fb      	strb	r3, [r7, #11]
          break;
 800986e:	e007      	b.n	8009880 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa41 	bl	8009cfa <USBD_CtlError>
          err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800987e:	bf00      	nop
      }
      break;
 8009880:	e037      	b.n	80098f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7c1b      	ldrb	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009892:	f107 0208 	add.w	r2, r7, #8
 8009896:	4610      	mov	r0, r2
 8009898:	4798      	blx	r3
 800989a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800989c:	e029      	b.n	80098f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fa2a 	bl	8009cfa <USBD_CtlError>
        err++;
 80098a6:	7afb      	ldrb	r3, [r7, #11]
 80098a8:	3301      	adds	r3, #1
 80098aa:	72fb      	strb	r3, [r7, #11]
      break;
 80098ac:	e021      	b.n	80098f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	7c1b      	ldrb	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10d      	bne.n	80098d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098be:	f107 0208 	add.w	r2, r7, #8
 80098c2:	4610      	mov	r0, r2
 80098c4:	4798      	blx	r3
 80098c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	2207      	movs	r2, #7
 80098ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098d0:	e00f      	b.n	80098f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fa10 	bl	8009cfa <USBD_CtlError>
        err++;
 80098da:	7afb      	ldrb	r3, [r7, #11]
 80098dc:	3301      	adds	r3, #1
 80098de:	72fb      	strb	r3, [r7, #11]
      break;
 80098e0:	e007      	b.n	80098f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fa08 	bl	8009cfa <USBD_CtlError>
      err++;
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	3301      	adds	r3, #1
 80098ee:	72fb      	strb	r3, [r7, #11]
      break;
 80098f0:	bf00      	nop
  }

  if (err != 0U)
 80098f2:	7afb      	ldrb	r3, [r7, #11]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d11e      	bne.n	8009936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	88db      	ldrh	r3, [r3, #6]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d016      	beq.n	800992e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00e      	beq.n	8009924 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	88da      	ldrh	r2, [r3, #6]
 800990a:	893b      	ldrh	r3, [r7, #8]
 800990c:	4293      	cmp	r3, r2
 800990e:	bf28      	it	cs
 8009910:	4613      	movcs	r3, r2
 8009912:	b29b      	uxth	r3, r3
 8009914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009916:	893b      	ldrh	r3, [r7, #8]
 8009918:	461a      	mov	r2, r3
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fa69 	bl	8009df4 <USBD_CtlSendData>
 8009922:	e009      	b.n	8009938 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9e7 	bl	8009cfa <USBD_CtlError>
 800992c:	e004      	b.n	8009938 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 faba 	bl	8009ea8 <USBD_CtlSendStatus>
 8009934:	e000      	b.n	8009938 <USBD_GetDescriptor+0x2cc>
    return;
 8009936:	bf00      	nop
  }
}
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop

08009940 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	889b      	ldrh	r3, [r3, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d131      	bne.n	80099b6 <USBD_SetAddress+0x76>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	88db      	ldrh	r3, [r3, #6]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d12d      	bne.n	80099b6 <USBD_SetAddress+0x76>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	885b      	ldrh	r3, [r3, #2]
 800995e:	2b7f      	cmp	r3, #127	; 0x7f
 8009960:	d829      	bhi.n	80099b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	b2db      	uxtb	r3, r3
 8009968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b03      	cmp	r3, #3
 8009978:	d104      	bne.n	8009984 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f9bc 	bl	8009cfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009982:	e01d      	b.n	80099c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	7bfa      	ldrb	r2, [r7, #15]
 8009988:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 ff1f 	bl	800a7d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa86 	bl	8009ea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099aa:	e009      	b.n	80099c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b4:	e004      	b.n	80099c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f99e 	bl	8009cfa <USBD_CtlError>
  }
}
 80099be:	bf00      	nop
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	4b4e      	ldr	r3, [pc, #312]	; (8009b18 <USBD_SetConfig+0x150>)
 80099de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099e0:	4b4d      	ldr	r3, [pc, #308]	; (8009b18 <USBD_SetConfig+0x150>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d905      	bls.n	80099f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f985 	bl	8009cfa <USBD_CtlError>
    return USBD_FAIL;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e08c      	b.n	8009b0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d002      	beq.n	8009a06 <USBD_SetConfig+0x3e>
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d029      	beq.n	8009a58 <USBD_SetConfig+0x90>
 8009a04:	e075      	b.n	8009af2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a06:	4b44      	ldr	r3, [pc, #272]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d020      	beq.n	8009a50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a0e:	4b42      	ldr	r3, [pc, #264]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a18:	4b3f      	ldr	r3, [pc, #252]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7fe ffe1 	bl	80089e6 <USBD_SetClassConfig>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d008      	beq.n	8009a40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f962 	bl	8009cfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a3e:	e065      	b.n	8009b0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa31 	bl	8009ea8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2203      	movs	r2, #3
 8009a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a4e:	e05d      	b.n	8009b0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fa29 	bl	8009ea8 <USBD_CtlSendStatus>
      break;
 8009a56:	e059      	b.n	8009b0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a58:	4b2f      	ldr	r3, [pc, #188]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d112      	bne.n	8009a86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a68:	4b2b      	ldr	r3, [pc, #172]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a72:	4b29      	ldr	r3, [pc, #164]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7fe ffd0 	bl	8008a1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa12 	bl	8009ea8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a84:	e042      	b.n	8009b0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a86:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <USBD_SetConfig+0x150>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d02a      	beq.n	8009aea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7fe ffbe 	bl	8008a1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009aa2:	4b1d      	ldr	r3, [pc, #116]	; (8009b18 <USBD_SetConfig+0x150>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009aac:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <USBD_SetConfig+0x150>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fe ff97 	bl	80089e6 <USBD_SetClassConfig>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00f      	beq.n	8009ae2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f918 	bl	8009cfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7fe ffa3 	bl	8008a1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ae0:	e014      	b.n	8009b0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f9e0 	bl	8009ea8 <USBD_CtlSendStatus>
      break;
 8009ae8:	e010      	b.n	8009b0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f9dc 	bl	8009ea8 <USBD_CtlSendStatus>
      break;
 8009af0:	e00c      	b.n	8009b0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f900 	bl	8009cfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009afa:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <USBD_SetConfig+0x150>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7fe ff8c 	bl	8008a1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b06:	2303      	movs	r3, #3
 8009b08:	73fb      	strb	r3, [r7, #15]
      break;
 8009b0a:	bf00      	nop
  }

  return ret;
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	2000177c 	.word	0x2000177c

08009b1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	88db      	ldrh	r3, [r3, #6]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d004      	beq.n	8009b38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8e2 	bl	8009cfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b36:	e023      	b.n	8009b80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	dc02      	bgt.n	8009b4a <USBD_GetConfig+0x2e>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dc03      	bgt.n	8009b50 <USBD_GetConfig+0x34>
 8009b48:	e015      	b.n	8009b76 <USBD_GetConfig+0x5a>
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d00b      	beq.n	8009b66 <USBD_GetConfig+0x4a>
 8009b4e:	e012      	b.n	8009b76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f948 	bl	8009df4 <USBD_CtlSendData>
        break;
 8009b64:	e00c      	b.n	8009b80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f940 	bl	8009df4 <USBD_CtlSendData>
        break;
 8009b74:	e004      	b.n	8009b80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f8be 	bl	8009cfa <USBD_CtlError>
        break;
 8009b7e:	bf00      	nop
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d81e      	bhi.n	8009bde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	88db      	ldrh	r3, [r3, #6]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d004      	beq.n	8009bb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f8a5 	bl	8009cfa <USBD_CtlError>
        break;
 8009bb0:	e01a      	b.n	8009be8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f043 0202 	orr.w	r2, r3, #2
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	330c      	adds	r3, #12
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f90c 	bl	8009df4 <USBD_CtlSendData>
      break;
 8009bdc:	e004      	b.n	8009be8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f88a 	bl	8009cfa <USBD_CtlError>
      break;
 8009be6:	bf00      	nop
  }
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	885b      	ldrh	r3, [r3, #2]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d107      	bne.n	8009c12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f94c 	bl	8009ea8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c10:	e013      	b.n	8009c3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d10b      	bne.n	8009c32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	889b      	ldrh	r3, [r3, #4]
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f93c 	bl	8009ea8 <USBD_CtlSendStatus>
}
 8009c30:	e003      	b.n	8009c3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f860 	bl	8009cfa <USBD_CtlError>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	3b01      	subs	r3, #1
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d80b      	bhi.n	8009c72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	885b      	ldrh	r3, [r3, #2]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d10c      	bne.n	8009c7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f91c 	bl	8009ea8 <USBD_CtlSendStatus>
      }
      break;
 8009c70:	e004      	b.n	8009c7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f840 	bl	8009cfa <USBD_CtlError>
      break;
 8009c7a:	e000      	b.n	8009c7e <USBD_ClrFeature+0x3c>
      break;
 8009c7c:	bf00      	nop
  }
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	781a      	ldrb	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff fa41 	bl	8009138 <SWAPBYTE>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7ff fa34 	bl	8009138 <SWAPBYTE>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f7ff fa27 	bl	8009138 <SWAPBYTE>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	80da      	strh	r2, [r3, #6]
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fcfa 	bl	800a700 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fcf6 	bl	800a700 <USBD_LL_StallEP>
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d042      	beq.n	8009db8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d36:	6938      	ldr	r0, [r7, #16]
 8009d38:	f000 f842 	bl	8009dc0 <USBD_GetLen>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	3301      	adds	r3, #1
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d46:	d808      	bhi.n	8009d5a <USBD_GetString+0x3e>
 8009d48:	6938      	ldr	r0, [r7, #16]
 8009d4a:	f000 f839 	bl	8009dc0 <USBD_GetLen>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	3301      	adds	r3, #1
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	e001      	b.n	8009d5e <USBD_GetString+0x42>
 8009d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	4413      	add	r3, r2
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7812      	ldrb	r2, [r2, #0]
 8009d6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	3301      	adds	r3, #1
 8009d72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4413      	add	r3, r2
 8009d7a:	2203      	movs	r2, #3
 8009d7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	3301      	adds	r3, #1
 8009d82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d84:	e013      	b.n	8009dae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3301      	adds	r3, #1
 8009d96:	613b      	str	r3, [r7, #16]
    idx++;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	4413      	add	r3, r2
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	3301      	adds	r3, #1
 8009dac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e7      	bne.n	8009d86 <USBD_GetString+0x6a>
 8009db6:	e000      	b.n	8009dba <USBD_GetString+0x9e>
    return;
 8009db8:	bf00      	nop
  }
}
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dd0:	e005      	b.n	8009dde <USBD_GetLen+0x1e>
  {
    len++;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1f5      	bne.n	8009dd2 <USBD_GetLen+0x12>
  }

  return len;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	2100      	movs	r1, #0
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 fcf9 	bl	800a812 <USBD_LL_Transmit>

  return USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	60b9      	str	r1, [r7, #8]
 8009e34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fce8 	bl	800a812 <USBD_LL_Transmit>

  return USBD_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 fcec 	bl	800a854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	2100      	movs	r1, #0
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fcdb 	bl	800a854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fca7 	bl	800a812 <USBD_LL_Transmit>

  return USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fcb5 	bl	800a854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4912      	ldr	r1, [pc, #72]	; (8009f44 <MX_USB_DEVICE_Init+0x50>)
 8009efc:	4812      	ldr	r0, [pc, #72]	; (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009efe:	f7fe fcf5 	bl	80088ec <USBD_Init>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f08:	f7f7 fe72 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f0c:	490f      	ldr	r1, [pc, #60]	; (8009f4c <MX_USB_DEVICE_Init+0x58>)
 8009f0e:	480e      	ldr	r0, [pc, #56]	; (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009f10:	f7fe fd1c 	bl	800894c <USBD_RegisterClass>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f1a:	f7f7 fe69 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f1e:	490c      	ldr	r1, [pc, #48]	; (8009f50 <MX_USB_DEVICE_Init+0x5c>)
 8009f20:	4809      	ldr	r0, [pc, #36]	; (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009f22:	f7fe fc13 	bl	800874c <USBD_CDC_RegisterInterface>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f2c:	f7f7 fe60 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f30:	4805      	ldr	r0, [pc, #20]	; (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009f32:	f7fe fd41 	bl	80089b8 <USBD_Start>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f3c:	f7f7 fe58 	bl	8001bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f40:	bf00      	nop
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20000124 	.word	0x20000124
 8009f48:	20001780 	.word	0x20001780
 8009f4c:	20000090 	.word	0x20000090
 8009f50:	20000110 	.word	0x20000110

08009f54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4905      	ldr	r1, [pc, #20]	; (8009f70 <CDC_Init_FS+0x1c>)
 8009f5c:	4805      	ldr	r0, [pc, #20]	; (8009f74 <CDC_Init_FS+0x20>)
 8009f5e:	f7fe fc0f 	bl	8008780 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f62:	4905      	ldr	r1, [pc, #20]	; (8009f78 <CDC_Init_FS+0x24>)
 8009f64:	4803      	ldr	r0, [pc, #12]	; (8009f74 <CDC_Init_FS+0x20>)
 8009f66:	f7fe fc2d 	bl	80087c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	2000225c 	.word	0x2000225c
 8009f74:	20001780 	.word	0x20001780
 8009f78:	20001a5c 	.word	0x20001a5c

08009f7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	6039      	str	r1, [r7, #0]
 8009f96:	71fb      	strb	r3, [r7, #7]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	2b23      	cmp	r3, #35	; 0x23
 8009fa0:	d84a      	bhi.n	800a038 <CDC_Control_FS+0xac>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <CDC_Control_FS+0x1c>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	0800a039 	.word	0x0800a039
 8009fac:	0800a039 	.word	0x0800a039
 8009fb0:	0800a039 	.word	0x0800a039
 8009fb4:	0800a039 	.word	0x0800a039
 8009fb8:	0800a039 	.word	0x0800a039
 8009fbc:	0800a039 	.word	0x0800a039
 8009fc0:	0800a039 	.word	0x0800a039
 8009fc4:	0800a039 	.word	0x0800a039
 8009fc8:	0800a039 	.word	0x0800a039
 8009fcc:	0800a039 	.word	0x0800a039
 8009fd0:	0800a039 	.word	0x0800a039
 8009fd4:	0800a039 	.word	0x0800a039
 8009fd8:	0800a039 	.word	0x0800a039
 8009fdc:	0800a039 	.word	0x0800a039
 8009fe0:	0800a039 	.word	0x0800a039
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	0800a039 	.word	0x0800a039
 8009fec:	0800a039 	.word	0x0800a039
 8009ff0:	0800a039 	.word	0x0800a039
 8009ff4:	0800a039 	.word	0x0800a039
 8009ff8:	0800a039 	.word	0x0800a039
 8009ffc:	0800a039 	.word	0x0800a039
 800a000:	0800a039 	.word	0x0800a039
 800a004:	0800a039 	.word	0x0800a039
 800a008:	0800a039 	.word	0x0800a039
 800a00c:	0800a039 	.word	0x0800a039
 800a010:	0800a039 	.word	0x0800a039
 800a014:	0800a039 	.word	0x0800a039
 800a018:	0800a039 	.word	0x0800a039
 800a01c:	0800a039 	.word	0x0800a039
 800a020:	0800a039 	.word	0x0800a039
 800a024:	0800a039 	.word	0x0800a039
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a039 	.word	0x0800a039
 800a030:	0800a039 	.word	0x0800a039
 800a034:	0800a039 	.word	0x0800a039
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a038:	bf00      	nop
  }

  return (USBD_OK);
 800a03a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4805      	ldr	r0, [pc, #20]	; (800a06c <CDC_Receive_FS+0x24>)
 800a056:	f7fe fbb5 	bl	80087c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a05a:	4804      	ldr	r0, [pc, #16]	; (800a06c <CDC_Receive_FS+0x24>)
 800a05c:	f7fe fc10 	bl	8008880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a060:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20001780 	.word	0x20001780

0800a070 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a080:	4b0d      	ldr	r3, [pc, #52]	; (800a0b8 <CDC_Transmit_FS+0x48>)
 800a082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a086:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a092:	2301      	movs	r3, #1
 800a094:	e00b      	b.n	800a0ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a096:	887b      	ldrh	r3, [r7, #2]
 800a098:	461a      	mov	r2, r3
 800a09a:	6879      	ldr	r1, [r7, #4]
 800a09c:	4806      	ldr	r0, [pc, #24]	; (800a0b8 <CDC_Transmit_FS+0x48>)
 800a09e:	f7fe fb6f 	bl	8008780 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0a2:	4805      	ldr	r0, [pc, #20]	; (800a0b8 <CDC_Transmit_FS+0x48>)
 800a0a4:	f7fe fbac 	bl	8008800 <USBD_CDC_TransmitPacket>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20001780 	.word	0x20001780

0800a0bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2212      	movs	r2, #18
 800a0f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0f2:	4b03      	ldr	r3, [pc, #12]	; (800a100 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20000140 	.word	0x20000140

0800a104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2204      	movs	r2, #4
 800a114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a116:	4b03      	ldr	r3, [pc, #12]	; (800a124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	20000154 	.word	0x20000154

0800a128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4907      	ldr	r1, [pc, #28]	; (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
 800a13e:	4808      	ldr	r0, [pc, #32]	; (800a160 <USBD_FS_ProductStrDescriptor+0x38>)
 800a140:	f7ff fdec 	bl	8009d1c <USBD_GetString>
 800a144:	e004      	b.n	800a150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4904      	ldr	r1, [pc, #16]	; (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
 800a14a:	4805      	ldr	r0, [pc, #20]	; (800a160 <USBD_FS_ProductStrDescriptor+0x38>)
 800a14c:	f7ff fde6 	bl	8009d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a150:	4b02      	ldr	r3, [pc, #8]	; (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20002a5c 	.word	0x20002a5c
 800a160:	0800ff30 	.word	0x0800ff30

0800a164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	4904      	ldr	r1, [pc, #16]	; (800a184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a174:	4804      	ldr	r0, [pc, #16]	; (800a188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a176:	f7ff fdd1 	bl	8009d1c <USBD_GetString>
  return USBD_StrDesc;
 800a17a:	4b02      	ldr	r3, [pc, #8]	; (800a184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20002a5c 	.word	0x20002a5c
 800a188:	0800ff48 	.word	0x0800ff48

0800a18c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	221a      	movs	r2, #26
 800a19c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a19e:	f000 f843 	bl	800a228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1a2:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000158 	.word	0x20000158

0800a1b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d105      	bne.n	800a1ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4907      	ldr	r1, [pc, #28]	; (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1c6:	4808      	ldr	r0, [pc, #32]	; (800a1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1c8:	f7ff fda8 	bl	8009d1c <USBD_GetString>
 800a1cc:	e004      	b.n	800a1d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	4904      	ldr	r1, [pc, #16]	; (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1d2:	4805      	ldr	r0, [pc, #20]	; (800a1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1d4:	f7ff fda2 	bl	8009d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d8:	4b02      	ldr	r3, [pc, #8]	; (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20002a5c 	.word	0x20002a5c
 800a1e8:	0800ff5c 	.word	0x0800ff5c

0800a1ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6039      	str	r1, [r7, #0]
 800a1f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d105      	bne.n	800a20a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	4907      	ldr	r1, [pc, #28]	; (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a202:	4808      	ldr	r0, [pc, #32]	; (800a224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a204:	f7ff fd8a 	bl	8009d1c <USBD_GetString>
 800a208:	e004      	b.n	800a214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4904      	ldr	r1, [pc, #16]	; (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a20e:	4805      	ldr	r0, [pc, #20]	; (800a224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a210:	f7ff fd84 	bl	8009d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a214:	4b02      	ldr	r3, [pc, #8]	; (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20002a5c 	.word	0x20002a5c
 800a224:	0800ff68 	.word	0x0800ff68

0800a228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <Get_SerialNum+0x44>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a234:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <Get_SerialNum+0x48>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a23a:	4b0e      	ldr	r3, [pc, #56]	; (800a274 <Get_SerialNum+0x4c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4413      	add	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a24e:	2208      	movs	r2, #8
 800a250:	4909      	ldr	r1, [pc, #36]	; (800a278 <Get_SerialNum+0x50>)
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f814 	bl	800a280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a258:	2204      	movs	r2, #4
 800a25a:	4908      	ldr	r1, [pc, #32]	; (800a27c <Get_SerialNum+0x54>)
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	f000 f80f 	bl	800a280 <IntToUnicode>
  }
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	1fff7a10 	.word	0x1fff7a10
 800a270:	1fff7a14 	.word	0x1fff7a14
 800a274:	1fff7a18 	.word	0x1fff7a18
 800a278:	2000015a 	.word	0x2000015a
 800a27c:	2000016a 	.word	0x2000016a

0800a280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]
 800a296:	e027      	b.n	800a2e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0f1b      	lsrs	r3, r3, #28
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d80b      	bhi.n	800a2b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	0f1b      	lsrs	r3, r3, #28
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	440b      	add	r3, r1
 800a2b0:	3230      	adds	r2, #48	; 0x30
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	e00a      	b.n	800a2ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	0f1b      	lsrs	r3, r3, #28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3237      	adds	r2, #55	; 0x37
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	3301      	adds	r3, #1
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4413      	add	r3, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	75fb      	strb	r3, [r7, #23]
 800a2e8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d3d3      	bcc.n	800a298 <IntToUnicode+0x18>
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
	...

0800a300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	; 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	609a      	str	r2, [r3, #8]
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a320:	d147      	bne.n	800a3b2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	4b25      	ldr	r3, [pc, #148]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	4a24      	ldr	r2, [pc, #144]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	6313      	str	r3, [r2, #48]	; 0x30
 800a332:	4b22      	ldr	r3, [pc, #136]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a33e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a34c:	f107 0314 	add.w	r3, r7, #20
 800a350:	4619      	mov	r1, r3
 800a352:	481b      	ldr	r0, [pc, #108]	; (800a3c0 <HAL_PCD_MspInit+0xc0>)
 800a354:	f7f8 fa6e 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a358:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a35c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a35e:	2302      	movs	r3, #2
 800a360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a366:	2300      	movs	r3, #0
 800a368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36a:	230a      	movs	r3, #10
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a36e:	f107 0314 	add.w	r3, r7, #20
 800a372:	4619      	mov	r1, r3
 800a374:	4812      	ldr	r0, [pc, #72]	; (800a3c0 <HAL_PCD_MspInit+0xc0>)
 800a376:	f7f8 fa5d 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37a:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	4a0f      	ldr	r2, [pc, #60]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a384:	6353      	str	r3, [r2, #52]	; 0x34
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	4a0b      	ldr	r2, [pc, #44]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a394:	6453      	str	r3, [r2, #68]	; 0x44
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <HAL_PCD_MspInit+0xbc>)
 800a398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	2043      	movs	r0, #67	; 0x43
 800a3a8:	f7f8 fa0d 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3ac:	2043      	movs	r0, #67	; 0x43
 800a3ae:	f7f8 fa26 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3b2:	bf00      	nop
 800a3b4:	3728      	adds	r7, #40	; 0x28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40020000 	.word	0x40020000

0800a3c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe fb39 	bl	8008a52 <USBD_LL_SetupStage>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	440b      	add	r3, r1
 800a408:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	4619      	mov	r1, r3
 800a412:	f7fe fb73 	bl	8008afc <USBD_LL_DataOutStage>
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	4613      	mov	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	3320      	adds	r3, #32
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	4619      	mov	r1, r3
 800a446:	f7fe fc0c 	bl	8008c62 <USBD_LL_DataInStage>
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe fd46 	bl	8008ef2 <USBD_LL_SOF>
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a476:	2301      	movs	r3, #1
 800a478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	79db      	ldrb	r3, [r3, #7]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d102      	bne.n	800a488 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	e008      	b.n	800a49a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	79db      	ldrb	r3, [r3, #7]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d102      	bne.n	800a496 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a490:	2301      	movs	r3, #1
 800a492:	73fb      	strb	r3, [r7, #15]
 800a494:	e001      	b.n	800a49a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a496:	f7f7 fbab 	bl	8001bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4a0:	7bfa      	ldrb	r2, [r7, #15]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fce0 	bl	8008e6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fe fc88 	bl	8008dc6 <USBD_LL_Reset>
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fcdb 	bl	8008e8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6812      	ldr	r2, [r2, #0]
 800a4e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4e6:	f043 0301 	orr.w	r3, r3, #1
 800a4ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	7adb      	ldrb	r3, [r3, #11]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <HAL_PCD_SuspendCallback+0x48>)
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	4a03      	ldr	r2, [pc, #12]	; (800a508 <HAL_PCD_SuspendCallback+0x48>)
 800a4fa:	f043 0306 	orr.w	r3, r3, #6
 800a4fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a500:	bf00      	nop
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	e000ed00 	.word	0xe000ed00

0800a50c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fcd1 	bl	8008ec2 <USBD_LL_Resume>
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fd29 	bl	8008f96 <USBD_LL_IsoOUTIncomplete>
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a55e:	78fa      	ldrb	r2, [r7, #3]
 800a560:	4611      	mov	r1, r2
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe fce5 	bl	8008f32 <USBD_LL_IsoINIncomplete>
}
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fd3b 	bl	8008ffa <USBD_LL_DevConnected>
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fd38 	bl	8009010 <USBD_LL_DevDisconnected>
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d13c      	bne.n	800a632 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a5b8:	4a20      	ldr	r2, [pc, #128]	; (800a63c <USBD_LL_Init+0x94>)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <USBD_LL_Init+0x94>)
 800a5c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5c8:	4b1c      	ldr	r3, [pc, #112]	; (800a63c <USBD_LL_Init+0x94>)
 800a5ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a5ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <USBD_LL_Init+0x94>)
 800a5d2:	2204      	movs	r2, #4
 800a5d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a5d6:	4b19      	ldr	r3, [pc, #100]	; (800a63c <USBD_LL_Init+0x94>)
 800a5d8:	2202      	movs	r2, #2
 800a5da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5dc:	4b17      	ldr	r3, [pc, #92]	; (800a63c <USBD_LL_Init+0x94>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a5e2:	4b16      	ldr	r3, [pc, #88]	; (800a63c <USBD_LL_Init+0x94>)
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5e8:	4b14      	ldr	r3, [pc, #80]	; (800a63c <USBD_LL_Init+0x94>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <USBD_LL_Init+0x94>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a5f4:	4b11      	ldr	r3, [pc, #68]	; (800a63c <USBD_LL_Init+0x94>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a5fa:	4b10      	ldr	r3, [pc, #64]	; (800a63c <USBD_LL_Init+0x94>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a600:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <USBD_LL_Init+0x94>)
 800a602:	2200      	movs	r2, #0
 800a604:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a606:	480d      	ldr	r0, [pc, #52]	; (800a63c <USBD_LL_Init+0x94>)
 800a608:	f7f9 f9dc 	bl	80039c4 <HAL_PCD_Init>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a612:	f7f7 faed 	bl	8001bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a616:	2180      	movs	r1, #128	; 0x80
 800a618:	4808      	ldr	r0, [pc, #32]	; (800a63c <USBD_LL_Init+0x94>)
 800a61a:	f7fa fc08 	bl	8004e2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a61e:	2240      	movs	r2, #64	; 0x40
 800a620:	2100      	movs	r1, #0
 800a622:	4806      	ldr	r0, [pc, #24]	; (800a63c <USBD_LL_Init+0x94>)
 800a624:	f7fa fbbc 	bl	8004da0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a628:	2280      	movs	r2, #128	; 0x80
 800a62a:	2101      	movs	r1, #1
 800a62c:	4803      	ldr	r0, [pc, #12]	; (800a63c <USBD_LL_Init+0x94>)
 800a62e:	f7fa fbb7 	bl	8004da0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20002c5c 	.word	0x20002c5c

0800a640 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a656:	4618      	mov	r0, r3
 800a658:	f7f9 fac3 	bl	8003be2 <HAL_PCD_Start>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f942 	bl	800a8ec <USBD_Get_USB_Status>
 800a668:	4603      	mov	r3, r0
 800a66a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	4608      	mov	r0, r1
 800a680:	4611      	mov	r1, r2
 800a682:	461a      	mov	r2, r3
 800a684:	4603      	mov	r3, r0
 800a686:	70fb      	strb	r3, [r7, #3]
 800a688:	460b      	mov	r3, r1
 800a68a:	70bb      	strb	r3, [r7, #2]
 800a68c:	4613      	mov	r3, r2
 800a68e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a69e:	78bb      	ldrb	r3, [r7, #2]
 800a6a0:	883a      	ldrh	r2, [r7, #0]
 800a6a2:	78f9      	ldrb	r1, [r7, #3]
 800a6a4:	f7f9 ff97 	bl	80045d6 <HAL_PCD_EP_Open>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 f91c 	bl	800a8ec <USBD_Get_USB_Status>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6dc:	78fa      	ldrb	r2, [r7, #3]
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7f9 ffe2 	bl	80046aa <HAL_PCD_EP_Close>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 f8fd 	bl	800a8ec <USBD_Get_USB_Status>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fa f89a 	bl	8004858 <HAL_PCD_EP_SetStall>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f8de 	bl	800a8ec <USBD_Get_USB_Status>
 800a730:	4603      	mov	r3, r0
 800a732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a734:	7bbb      	ldrb	r3, [r7, #14]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fa f8de 	bl	800491e <HAL_PCD_EP_ClrStall>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f8bf 	bl	800a8ec <USBD_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a772:	7bbb      	ldrb	r3, [r7, #14]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a78e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a794:	2b00      	cmp	r3, #0
 800a796:	da0b      	bge.n	800a7b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a79e:	68f9      	ldr	r1, [r7, #12]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	3316      	adds	r3, #22
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	e00b      	b.n	800a7c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a7c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7f9 fecb 	bl	800458e <HAL_PCD_SetAddress>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f874 	bl	800a8ec <USBD_Get_USB_Status>
 800a804:	4603      	mov	r3, r0
 800a806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a808:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
 800a81e:	460b      	mov	r3, r1
 800a820:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a830:	7af9      	ldrb	r1, [r7, #11]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	f7f9 ffd5 	bl	80047e4 <HAL_PCD_EP_Transmit>
 800a83a:	4603      	mov	r3, r0
 800a83c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f853 	bl	800a8ec <USBD_Get_USB_Status>
 800a846:	4603      	mov	r3, r0
 800a848:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a84a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	460b      	mov	r3, r1
 800a862:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a872:	7af9      	ldrb	r1, [r7, #11]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	f7f9 ff61 	bl	800473e <HAL_PCD_EP_Receive>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	4618      	mov	r0, r3
 800a884:	f000 f832 	bl	800a8ec <USBD_Get_USB_Status>
 800a888:	4603      	mov	r3, r0
 800a88a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a88c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8a8:	78fa      	ldrb	r2, [r7, #3]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7f9 ff81 	bl	80047b4 <HAL_PCD_EP_GetRxCount>
 800a8b2:	4603      	mov	r3, r0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8c4:	4b03      	ldr	r3, [pc, #12]	; (800a8d4 <USBD_static_malloc+0x18>)
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	20003140 	.word	0x20003140

0800a8d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

}
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d817      	bhi.n	800a930 <USBD_Get_USB_Status+0x44>
 800a900:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <USBD_Get_USB_Status+0x1c>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a919 	.word	0x0800a919
 800a90c:	0800a91f 	.word	0x0800a91f
 800a910:	0800a925 	.word	0x0800a925
 800a914:	0800a92b 	.word	0x0800a92b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
    break;
 800a91c:	e00b      	b.n	800a936 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a91e:	2303      	movs	r3, #3
 800a920:	73fb      	strb	r3, [r7, #15]
    break;
 800a922:	e008      	b.n	800a936 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a924:	2301      	movs	r3, #1
 800a926:	73fb      	strb	r3, [r7, #15]
    break;
 800a928:	e005      	b.n	800a936 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a92a:	2303      	movs	r3, #3
 800a92c:	73fb      	strb	r3, [r7, #15]
    break;
 800a92e:	e002      	b.n	800a936 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	73fb      	strb	r3, [r7, #15]
    break;
 800a934:	bf00      	nop
  }
  return usb_status;
 800a936:	7bfb      	ldrb	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	2101      	movs	r1, #1
 800a952:	4842      	ldr	r0, [pc, #264]	; (800aa5c <network_configure_activations+0x118>)
 800a954:	f000 fb42 	bl	800afdc <ai_platform_get_activations_map>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d073      	beq.n	800aa46 <network_configure_activations+0x102>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 800a95e:	4b3f      	ldr	r3, [pc, #252]	; (800aa5c <network_configure_activations+0x118>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800a966:	4a3e      	ldr	r2, [pc, #248]	; (800aa60 <network_configure_activations+0x11c>)
 800a968:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 800a96a:	4b3c      	ldr	r3, [pc, #240]	; (800aa5c <network_configure_activations+0x118>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800a972:	4a3b      	ldr	r2, [pc, #236]	; (800aa60 <network_configure_activations+0x11c>)
 800a974:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1708);
 800a976:	4b39      	ldr	r3, [pc, #228]	; (800aa5c <network_configure_activations+0x118>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 800a97e:	4a39      	ldr	r2, [pc, #228]	; (800aa64 <network_configure_activations+0x120>)
 800a980:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1708);
 800a982:	4b36      	ldr	r3, [pc, #216]	; (800aa5c <network_configure_activations+0x118>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 800a98a:	4a36      	ldr	r2, [pc, #216]	; (800aa64 <network_configure_activations+0x120>)
 800a98c:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 800a98e:	4b33      	ldr	r3, [pc, #204]	; (800aa5c <network_configure_activations+0x118>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3320      	adds	r3, #32
 800a994:	4a34      	ldr	r2, [pc, #208]	; (800aa68 <network_configure_activations+0x124>)
 800a996:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 800a998:	4b30      	ldr	r3, [pc, #192]	; (800aa5c <network_configure_activations+0x118>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3320      	adds	r3, #32
 800a99e:	4a32      	ldr	r2, [pc, #200]	; (800aa68 <network_configure_activations+0x124>)
 800a9a0:	60d3      	str	r3, [r2, #12]
    conv1d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 800a9a2:	4b2e      	ldr	r3, [pc, #184]	; (800aa5c <network_configure_activations+0x118>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3320      	adds	r3, #32
 800a9a8:	4a30      	ldr	r2, [pc, #192]	; (800aa6c <network_configure_activations+0x128>)
 800a9aa:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 800a9ac:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <network_configure_activations+0x118>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3320      	adds	r3, #32
 800a9b2:	4a2e      	ldr	r2, [pc, #184]	; (800aa6c <network_configure_activations+0x128>)
 800a9b4:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1568);
 800a9b6:	4b29      	ldr	r3, [pc, #164]	; (800aa5c <network_configure_activations+0x118>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800a9be:	4a2c      	ldr	r2, [pc, #176]	; (800aa70 <network_configure_activations+0x12c>)
 800a9c0:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1568);
 800a9c2:	4b26      	ldr	r3, [pc, #152]	; (800aa5c <network_configure_activations+0x118>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800a9ca:	4a29      	ldr	r2, [pc, #164]	; (800aa70 <network_configure_activations+0x12c>)
 800a9cc:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a9ce:	4b23      	ldr	r3, [pc, #140]	; (800aa5c <network_configure_activations+0x118>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a28      	ldr	r2, [pc, #160]	; (800aa74 <network_configure_activations+0x130>)
 800a9d4:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a9d6:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <network_configure_activations+0x118>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a26      	ldr	r2, [pc, #152]	; (800aa74 <network_configure_activations+0x130>)
 800a9dc:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 800a9de:	4b1f      	ldr	r3, [pc, #124]	; (800aa5c <network_configure_activations+0x118>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800a9e6:	4a24      	ldr	r2, [pc, #144]	; (800aa78 <network_configure_activations+0x134>)
 800a9e8:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 800a9ea:	4b1c      	ldr	r3, [pc, #112]	; (800aa5c <network_configure_activations+0x118>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800a9f2:	4a21      	ldr	r2, [pc, #132]	; (800aa78 <network_configure_activations+0x134>)
 800a9f4:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <network_configure_activations+0x118>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a20      	ldr	r2, [pc, #128]	; (800aa7c <network_configure_activations+0x138>)
 800a9fc:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a9fe:	4b17      	ldr	r3, [pc, #92]	; (800aa5c <network_configure_activations+0x118>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a1e      	ldr	r2, [pc, #120]	; (800aa7c <network_configure_activations+0x138>)
 800aa04:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800aa06:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <network_configure_activations+0x118>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aa0e:	4a1c      	ldr	r2, [pc, #112]	; (800aa80 <network_configure_activations+0x13c>)
 800aa10:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <network_configure_activations+0x118>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aa1a:	4a19      	ldr	r2, [pc, #100]	; (800aa80 <network_configure_activations+0x13c>)
 800aa1c:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <network_configure_activations+0x118>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a18      	ldr	r2, [pc, #96]	; (800aa84 <network_configure_activations+0x140>)
 800aa24:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800aa26:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <network_configure_activations+0x118>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a16      	ldr	r2, [pc, #88]	; (800aa84 <network_configure_activations+0x140>)
 800aa2c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <network_configure_activations+0x118>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	330c      	adds	r3, #12
 800aa34:	4a14      	ldr	r2, [pc, #80]	; (800aa88 <network_configure_activations+0x144>)
 800aa36:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800aa38:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <network_configure_activations+0x118>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	4a12      	ldr	r2, [pc, #72]	; (800aa88 <network_configure_activations+0x144>)
 800aa40:	60d3      	str	r3, [r2, #12]
    return true;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e005      	b.n	800aa52 <network_configure_activations+0x10e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800aa46:	2213      	movs	r2, #19
 800aa48:	2130      	movs	r1, #48	; 0x30
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fb48 	bl	800b0e0 <ai_platform_network_set_error>
  return false;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20003360 	.word	0x20003360
 800aa60:	20000174 	.word	0x20000174
 800aa64:	20000284 	.word	0x20000284
 800aa68:	20000184 	.word	0x20000184
 800aa6c:	20000194 	.word	0x20000194
 800aa70:	20000294 	.word	0x20000294
 800aa74:	200001a4 	.word	0x200001a4
 800aa78:	200001b4 	.word	0x200001b4
 800aa7c:	200001c4 	.word	0x200001c4
 800aa80:	200001d4 	.word	0x200001d4
 800aa84:	200001e4 	.word	0x200001e4
 800aa88:	200001f4 	.word	0x200001f4

0800aa8c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	2101      	movs	r1, #1
 800aa9a:	4852      	ldr	r0, [pc, #328]	; (800abe4 <network_configure_weights+0x158>)
 800aa9c:	f000 fa4a 	bl	800af34 <ai_platform_get_weights_map>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 8094 	beq.w	800abd0 <network_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800aaa8:	4b4f      	ldr	r3, [pc, #316]	; (800abe8 <network_configure_weights+0x15c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aab0:	4a4d      	ldr	r2, [pc, #308]	; (800abe8 <network_configure_weights+0x15c>)
 800aab2:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800aab4:	4b4b      	ldr	r3, [pc, #300]	; (800abe4 <network_configure_weights+0x158>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a4b      	ldr	r2, [pc, #300]	; (800abe8 <network_configure_weights+0x15c>)
 800aaba:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800aabc:	4b49      	ldr	r3, [pc, #292]	; (800abe4 <network_configure_weights+0x158>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a49      	ldr	r2, [pc, #292]	; (800abe8 <network_configure_weights+0x15c>)
 800aac2:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800aac4:	4b49      	ldr	r3, [pc, #292]	; (800abec <network_configure_weights+0x160>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aacc:	4a47      	ldr	r2, [pc, #284]	; (800abec <network_configure_weights+0x160>)
 800aace:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800aad0:	4b44      	ldr	r3, [pc, #272]	; (800abe4 <network_configure_weights+0x158>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800aad8:	4a44      	ldr	r2, [pc, #272]	; (800abec <network_configure_weights+0x160>)
 800aada:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800aadc:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <network_configure_weights+0x158>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800aae4:	4a41      	ldr	r2, [pc, #260]	; (800abec <network_configure_weights+0x160>)
 800aae6:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800aae8:	4b41      	ldr	r3, [pc, #260]	; (800abf0 <network_configure_weights+0x164>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aaf0:	4a3f      	ldr	r2, [pc, #252]	; (800abf0 <network_configure_weights+0x164>)
 800aaf2:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800aaf4:	4b3b      	ldr	r3, [pc, #236]	; (800abe4 <network_configure_weights+0x158>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aafc:	4a3c      	ldr	r2, [pc, #240]	; (800abf0 <network_configure_weights+0x164>)
 800aafe:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800ab00:	4b38      	ldr	r3, [pc, #224]	; (800abe4 <network_configure_weights+0x158>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ab08:	4a39      	ldr	r2, [pc, #228]	; (800abf0 <network_configure_weights+0x164>)
 800ab0a:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab0c:	4b39      	ldr	r3, [pc, #228]	; (800abf4 <network_configure_weights+0x168>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab14:	4a37      	ldr	r2, [pc, #220]	; (800abf4 <network_configure_weights+0x168>)
 800ab16:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 2176);
 800ab18:	4b32      	ldr	r3, [pc, #200]	; (800abe4 <network_configure_weights+0x158>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 800ab20:	4a34      	ldr	r2, [pc, #208]	; (800abf4 <network_configure_weights+0x168>)
 800ab22:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2176);
 800ab24:	4b2f      	ldr	r3, [pc, #188]	; (800abe4 <network_configure_weights+0x158>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 800ab2c:	4a31      	ldr	r2, [pc, #196]	; (800abf4 <network_configure_weights+0x168>)
 800ab2e:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab30:	4b31      	ldr	r3, [pc, #196]	; (800abf8 <network_configure_weights+0x16c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab38:	4a2f      	ldr	r2, [pc, #188]	; (800abf8 <network_configure_weights+0x16c>)
 800ab3a:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2208);
 800ab3c:	4b29      	ldr	r3, [pc, #164]	; (800abe4 <network_configure_weights+0x158>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800ab44:	4a2c      	ldr	r2, [pc, #176]	; (800abf8 <network_configure_weights+0x16c>)
 800ab46:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2208);
 800ab48:	4b26      	ldr	r3, [pc, #152]	; (800abe4 <network_configure_weights+0x158>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800ab50:	4a29      	ldr	r2, [pc, #164]	; (800abf8 <network_configure_weights+0x16c>)
 800ab52:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab54:	4b29      	ldr	r3, [pc, #164]	; (800abfc <network_configure_weights+0x170>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab5c:	4a27      	ldr	r2, [pc, #156]	; (800abfc <network_configure_weights+0x170>)
 800ab5e:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 47264);
 800ab60:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <network_configure_weights+0x158>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 800ab68:	33a0      	adds	r3, #160	; 0xa0
 800ab6a:	4a24      	ldr	r2, [pc, #144]	; (800abfc <network_configure_weights+0x170>)
 800ab6c:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 47264);
 800ab6e:	4b1d      	ldr	r3, [pc, #116]	; (800abe4 <network_configure_weights+0x158>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 800ab76:	33a0      	adds	r3, #160	; 0xa0
 800ab78:	4a20      	ldr	r2, [pc, #128]	; (800abfc <network_configure_weights+0x170>)
 800ab7a:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab7c:	4b20      	ldr	r3, [pc, #128]	; (800ac00 <network_configure_weights+0x174>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab84:	4a1e      	ldr	r2, [pc, #120]	; (800ac00 <network_configure_weights+0x174>)
 800ab86:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 47520);
 800ab88:	4b16      	ldr	r3, [pc, #88]	; (800abe4 <network_configure_weights+0x158>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 800ab90:	33a0      	adds	r3, #160	; 0xa0
 800ab92:	4a1b      	ldr	r2, [pc, #108]	; (800ac00 <network_configure_weights+0x174>)
 800ab94:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 47520);
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <network_configure_weights+0x158>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 800ab9e:	33a0      	adds	r3, #160	; 0xa0
 800aba0:	4a17      	ldr	r2, [pc, #92]	; (800ac00 <network_configure_weights+0x174>)
 800aba2:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800aba4:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <network_configure_weights+0x178>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abac:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <network_configure_weights+0x178>)
 800abae:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 48288);
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <network_configure_weights+0x158>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800abb8:	33a0      	adds	r3, #160	; 0xa0
 800abba:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <network_configure_weights+0x178>)
 800abbc:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 48288);
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <network_configure_weights+0x158>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800abc6:	33a0      	adds	r3, #160	; 0xa0
 800abc8:	4a0e      	ldr	r2, [pc, #56]	; (800ac04 <network_configure_weights+0x178>)
 800abca:	60d3      	str	r3, [r2, #12]
    return true;
 800abcc:	2301      	movs	r3, #1
 800abce:	e005      	b.n	800abdc <network_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800abd0:	2212      	movs	r2, #18
 800abd2:	2130      	movs	r1, #48	; 0x30
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fa83 	bl	800b0e0 <ai_platform_network_set_error>
  return false;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20003364 	.word	0x20003364
 800abe8:	20000204 	.word	0x20000204
 800abec:	20000214 	.word	0x20000214
 800abf0:	20000224 	.word	0x20000224
 800abf4:	20000234 	.word	0x20000234
 800abf8:	20000244 	.word	0x20000244
 800abfc:	20000254 	.word	0x20000254
 800ac00:	20000264 	.word	0x20000264
 800ac04:	20000274 	.word	0x20000274

0800ac08 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fa59 	bl	800b0c8 <ai_platform_network_get_error>
 800ac16:	4603      	mov	r3, r0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	2305      	movs	r3, #5
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	2301      	movs	r3, #1
 800ac34:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <ai_network_create+0x28>)
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fb41 	bl	800b2c0 <ai_platform_network_create>
 800ac3e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20000b1c 	.word	0x20000b1c

0800ac4c <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b094      	sub	sp, #80	; 0x50
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800ac58:	2100      	movs	r1, #0
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff ffe0 	bl	800ac20 <ai_network_create>
 800ac60:	4603      	mov	r3, r0
 800ac62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (err.type != AI_ERROR_NONE) {
 800ac64:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <ai_network_create_and_init+0x24>
    return err;
 800ac6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac6e:	e067      	b.n	800ad40 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800ac70:	f107 0310 	add.w	r3, r7, #16
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f8e7 	bl	800ae48 <ai_network_data_params_get>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f083 0301 	eor.w	r3, r3, #1
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d008      	beq.n	800ac98 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff ffbc 	bl	800ac08 <ai_network_get_error>
 800ac90:	4603      	mov	r3, r0
 800ac92:	64bb      	str	r3, [r7, #72]	; 0x48
    return err;
 800ac94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac96:	e053      	b.n	800ad40 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ac9e:	e012      	b.n	800acc6 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800aca0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800aca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	f107 0310 	add.w	r3, r7, #16
 800acb4:	330c      	adds	r3, #12
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 f92c 	bl	800af14 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800acbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800acc0:	3301      	adds	r3, #1
 800acc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <ai_network_create_and_init+0x8a>
 800accc:	8bfb      	ldrh	r3, [r7, #30]
 800acce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d3e4      	bcc.n	800aca0 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800acdc:	e012      	b.n	800ad04 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800acde:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800ace2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4413      	add	r3, r2
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	f107 0310 	add.w	r3, r7, #16
 800acf2:	3304      	adds	r3, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f90d 	bl	800af14 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800acfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800acfe:	3301      	adds	r3, #1
 800ad00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d004      	beq.n	800ad14 <ai_network_create_and_init+0xc8>
 800ad0a:	8afb      	ldrh	r3, [r7, #22]
 800ad0c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d3e4      	bcc.n	800acde <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f107 0210 	add.w	r2, r7, #16
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f846 	bl	800adb0 <ai_network_init>
 800ad24:	4603      	mov	r3, r0
 800ad26:	f083 0301 	eor.w	r3, r3, #1
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d006      	beq.n	800ad3e <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff ff67 	bl	800ac08 <ai_network_get_error>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  return err;
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3750      	adds	r7, #80	; 0x50
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d104      	bne.n	800ad62 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <ai_network_inputs_get+0x2c>)
 800ad5a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a06      	ldr	r2, [pc, #24]	; (800ad78 <ai_network_inputs_get+0x30>)
 800ad60:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f9c1 	bl	800b0ec <ai_platform_inputs_get>
 800ad6a:	4603      	mov	r3, r0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20000b1c 	.word	0x20000b1c
 800ad78:	a1c00100 	.word	0xa1c00100

0800ad7c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d104      	bne.n	800ad96 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ad8c:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <ai_network_outputs_get+0x2c>)
 800ad8e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a06      	ldr	r2, [pc, #24]	; (800adac <ai_network_outputs_get+0x30>)
 800ad94:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fa1d 	bl	800b1d8 <ai_platform_outputs_get>
 800ad9e:	4603      	mov	r3, r0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	20000b1c 	.word	0x20000b1c
 800adac:	a1c00100 	.word	0xa1c00100

0800adb0 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fac1 	bl	800b344 <ai_platform_network_init>
 800adc2:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800adc4:	2301      	movs	r3, #1
 800adc6:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <ai_network_init+0x22>
 800adce:	2300      	movs	r3, #0
 800add0:	e026      	b.n	800ae20 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff fe59 	bl	800aa8c <network_configure_weights>
 800adda:	4603      	mov	r3, r0
 800addc:	461a      	mov	r2, r3
 800adde:	7afb      	ldrb	r3, [r7, #11]
 800ade0:	4013      	ands	r3, r2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bf14      	ite	ne
 800ade6:	2301      	movne	r3, #1
 800ade8:	2300      	moveq	r3, #0
 800adea:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f7ff fda8 	bl	800a944 <network_configure_activations>
 800adf4:	4603      	mov	r3, r0
 800adf6:	461a      	mov	r2, r3
 800adf8:	7afb      	ldrb	r3, [r7, #11]
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bf14      	ite	ne
 800ae00:	2301      	movne	r3, #1
 800ae02:	2300      	moveq	r3, #0
 800ae04:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fb6a 	bl	800b4e0 <ai_platform_network_post_init>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	4013      	ands	r3, r2
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bf14      	ite	ne
 800ae18:	2301      	movne	r3, #1
 800ae1a:	2300      	moveq	r3, #0
 800ae1c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ae1e:	7afb      	ldrb	r3, [r7, #11]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 fb81 	bl	800b540 <ai_platform_network_process>
 800ae3e:	4603      	mov	r3, r0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <ai_network_data_params_get+0x12>
 800ae56:	2300      	movs	r3, #0
 800ae58:	e016      	b.n	800ae88 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800ae5a:	4a0d      	ldr	r2, [pc, #52]	; (800ae90 <ai_network_data_params_get+0x48>)
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae64:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800ae68:	4a0a      	ldr	r2, [pc, #40]	; (800ae94 <ai_network_data_params_get+0x4c>)
 800ae6a:	f107 0308 	add.w	r3, r7, #8
 800ae6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae72:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800ae76:	f107 0210 	add.w	r2, r7, #16
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f8ff 	bl	800b084 <ai_platform_bind_network_params>
 800ae86:	4603      	mov	r3, r0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	0800ff98 	.word	0x0800ff98
 800ae94:	0800ffa0 	.word	0x0800ffa0

0800ae98 <ai_buffer_get_size>:
 800ae98:	b378      	cbz	r0, 800aefa <ai_buffer_get_size+0x62>
 800ae9a:	b410      	push	{r4}
 800ae9c:	6803      	ldr	r3, [r0, #0]
 800ae9e:	4a17      	ldr	r2, [pc, #92]	; (800aefc <ai_buffer_get_size+0x64>)
 800aea0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800aea4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d01e      	beq.n	800aeea <ai_buffer_get_size+0x52>
 800aeac:	6984      	ldr	r4, [r0, #24]
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	7d03      	ldrb	r3, [r0, #20]
 800aeb2:	6941      	ldr	r1, [r0, #20]
 800aeb4:	f1a3 0301 	sub.w	r3, r3, #1
 800aeb8:	fab3 f383 	clz	r3, r3
 800aebc:	095b      	lsrs	r3, r3, #5
 800aebe:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800aec2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800aec6:	da0b      	bge.n	800aee0 <ai_buffer_get_size+0x48>
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d102      	bne.n	800aed2 <ai_buffer_get_size+0x3a>
 800aecc:	2802      	cmp	r0, #2
 800aece:	d007      	beq.n	800aee0 <ai_buffer_get_size+0x48>
 800aed0:	2302      	movs	r3, #2
 800aed2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800aed6:	3301      	adds	r3, #1
 800aed8:	4298      	cmp	r0, r3
 800aeda:	fb01 f202 	mul.w	r2, r1, r2
 800aede:	d1f3      	bne.n	800aec8 <ai_buffer_get_size+0x30>
 800aee0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800aee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	2900      	cmp	r1, #0
 800aeec:	d0de      	beq.n	800aeac <ai_buffer_get_size+0x14>
 800aeee:	6984      	ldr	r4, [r0, #24]
 800aef0:	6862      	ldr	r2, [r4, #4]
 800aef2:	321f      	adds	r2, #31
 800aef4:	f022 021f 	bic.w	r2, r2, #31
 800aef8:	e7da      	b.n	800aeb0 <ai_buffer_get_size+0x18>
 800aefa:	4770      	bx	lr
 800aefc:	000400c0 	.word	0x000400c0

0800af00 <ai_buffer_array_sane>:
 800af00:	b138      	cbz	r0, 800af12 <ai_buffer_array_sane+0x12>
 800af02:	6843      	ldr	r3, [r0, #4]
 800af04:	b123      	cbz	r3, 800af10 <ai_buffer_array_sane+0x10>
 800af06:	8840      	ldrh	r0, [r0, #2]
 800af08:	3800      	subs	r0, #0
 800af0a:	bf18      	it	ne
 800af0c:	2001      	movne	r0, #1
 800af0e:	4770      	bx	lr
 800af10:	4618      	mov	r0, r3
 800af12:	4770      	bx	lr

0800af14 <ai_buffer_array_item_set_address>:
 800af14:	b150      	cbz	r0, 800af2c <ai_buffer_array_item_set_address+0x18>
 800af16:	6843      	ldr	r3, [r0, #4]
 800af18:	b14b      	cbz	r3, 800af2e <ai_buffer_array_item_set_address+0x1a>
 800af1a:	8840      	ldrh	r0, [r0, #2]
 800af1c:	b900      	cbnz	r0, 800af20 <ai_buffer_array_item_set_address+0xc>
 800af1e:	4770      	bx	lr
 800af20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800af24:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800af28:	2001      	movs	r0, #1
 800af2a:	605a      	str	r2, [r3, #4]
 800af2c:	4770      	bx	lr
 800af2e:	4618      	mov	r0, r3
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <ai_platform_get_weights_map>:
 800af34:	2a00      	cmp	r2, #0
 800af36:	d037      	beq.n	800afa8 <ai_platform_get_weights_map+0x74>
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	4604      	mov	r4, r0
 800af3c:	b1a0      	cbz	r0, 800af68 <ai_platform_get_weights_map+0x34>
 800af3e:	460f      	mov	r7, r1
 800af40:	b191      	cbz	r1, 800af68 <ai_platform_get_weights_map+0x34>
 800af42:	4b25      	ldr	r3, [pc, #148]	; (800afd8 <ai_platform_get_weights_map+0xa4>)
 800af44:	6810      	ldr	r0, [r2, #0]
 800af46:	4298      	cmp	r0, r3
 800af48:	4615      	mov	r5, r2
 800af4a:	d00f      	beq.n	800af6c <ai_platform_get_weights_map+0x38>
 800af4c:	6855      	ldr	r5, [r2, #4]
 800af4e:	b15d      	cbz	r5, 800af68 <ai_platform_get_weights_map+0x34>
 800af50:	682e      	ldr	r6, [r5, #0]
 800af52:	429e      	cmp	r6, r3
 800af54:	d02a      	beq.n	800afac <ai_platform_get_weights_map+0x78>
 800af56:	f1a1 0001 	sub.w	r0, r1, #1
 800af5a:	6025      	str	r5, [r4, #0]
 800af5c:	fab0 f080 	clz	r0, r0
 800af60:	0940      	lsrs	r0, r0, #5
 800af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af64:	42a7      	cmp	r7, r4
 800af66:	d034      	beq.n	800afd2 <ai_platform_get_weights_map+0x9e>
 800af68:	2000      	movs	r0, #0
 800af6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af6c:	1d10      	adds	r0, r2, #4
 800af6e:	f7ff ffc7 	bl	800af00 <ai_buffer_array_sane>
 800af72:	2800      	cmp	r0, #0
 800af74:	d0f8      	beq.n	800af68 <ai_platform_get_weights_map+0x34>
 800af76:	88eb      	ldrh	r3, [r5, #6]
 800af78:	429f      	cmp	r7, r3
 800af7a:	d1f5      	bne.n	800af68 <ai_platform_get_weights_map+0x34>
 800af7c:	f04f 0c00 	mov.w	ip, #0
 800af80:	1f20      	subs	r0, r4, #4
 800af82:	46e6      	mov	lr, ip
 800af84:	68ab      	ldr	r3, [r5, #8]
 800af86:	4463      	add	r3, ip
 800af88:	f10c 0c1c 	add.w	ip, ip, #28
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	b12b      	cbz	r3, 800af9c <ai_platform_get_weights_map+0x68>
 800af90:	f10e 0e01 	add.w	lr, lr, #1
 800af94:	4577      	cmp	r7, lr
 800af96:	f840 3f04 	str.w	r3, [r0, #4]!
 800af9a:	d1f3      	bne.n	800af84 <ai_platform_get_weights_map+0x50>
 800af9c:	eba7 000e 	sub.w	r0, r7, lr
 800afa0:	fab0 f080 	clz	r0, r0
 800afa4:	0940      	lsrs	r0, r0, #5
 800afa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa8:	2000      	movs	r0, #0
 800afaa:	4770      	bx	lr
 800afac:	1f20      	subs	r0, r4, #4
 800afae:	462a      	mov	r2, r5
 800afb0:	2400      	movs	r4, #0
 800afb2:	e000      	b.n	800afb6 <ai_platform_get_weights_map+0x82>
 800afb4:	461c      	mov	r4, r3
 800afb6:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800afba:	42b3      	cmp	r3, r6
 800afbc:	d0d2      	beq.n	800af64 <ai_platform_get_weights_map+0x30>
 800afbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800afc2:	1c63      	adds	r3, r4, #1
 800afc4:	429f      	cmp	r7, r3
 800afc6:	d1f5      	bne.n	800afb4 <ai_platform_get_weights_map+0x80>
 800afc8:	3402      	adds	r4, #2
 800afca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800afce:	42b3      	cmp	r3, r6
 800afd0:	d1ca      	bne.n	800af68 <ai_platform_get_weights_map+0x34>
 800afd2:	2001      	movs	r0, #1
 800afd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd6:	bf00      	nop
 800afd8:	a1facade 	.word	0xa1facade

0800afdc <ai_platform_get_activations_map>:
 800afdc:	2a00      	cmp	r2, #0
 800afde:	d038      	beq.n	800b052 <ai_platform_get_activations_map+0x76>
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	4604      	mov	r4, r0
 800afe4:	b1a0      	cbz	r0, 800b010 <ai_platform_get_activations_map+0x34>
 800afe6:	460f      	mov	r7, r1
 800afe8:	b191      	cbz	r1, 800b010 <ai_platform_get_activations_map+0x34>
 800afea:	4b25      	ldr	r3, [pc, #148]	; (800b080 <ai_platform_get_activations_map+0xa4>)
 800afec:	6810      	ldr	r0, [r2, #0]
 800afee:	4298      	cmp	r0, r3
 800aff0:	4615      	mov	r5, r2
 800aff2:	d00f      	beq.n	800b014 <ai_platform_get_activations_map+0x38>
 800aff4:	6a15      	ldr	r5, [r2, #32]
 800aff6:	b15d      	cbz	r5, 800b010 <ai_platform_get_activations_map+0x34>
 800aff8:	682e      	ldr	r6, [r5, #0]
 800affa:	429e      	cmp	r6, r3
 800affc:	d02b      	beq.n	800b056 <ai_platform_get_activations_map+0x7a>
 800affe:	f1a1 0001 	sub.w	r0, r1, #1
 800b002:	6025      	str	r5, [r4, #0]
 800b004:	fab0 f080 	clz	r0, r0
 800b008:	0940      	lsrs	r0, r0, #5
 800b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b00c:	42a7      	cmp	r7, r4
 800b00e:	d035      	beq.n	800b07c <ai_platform_get_activations_map+0xa0>
 800b010:	2000      	movs	r0, #0
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b014:	f102 000c 	add.w	r0, r2, #12
 800b018:	f7ff ff72 	bl	800af00 <ai_buffer_array_sane>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d0f7      	beq.n	800b010 <ai_platform_get_activations_map+0x34>
 800b020:	89eb      	ldrh	r3, [r5, #14]
 800b022:	429f      	cmp	r7, r3
 800b024:	d1f4      	bne.n	800b010 <ai_platform_get_activations_map+0x34>
 800b026:	f04f 0c00 	mov.w	ip, #0
 800b02a:	1f20      	subs	r0, r4, #4
 800b02c:	46e6      	mov	lr, ip
 800b02e:	692b      	ldr	r3, [r5, #16]
 800b030:	4463      	add	r3, ip
 800b032:	f10c 0c1c 	add.w	ip, ip, #28
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	b12b      	cbz	r3, 800b046 <ai_platform_get_activations_map+0x6a>
 800b03a:	f10e 0e01 	add.w	lr, lr, #1
 800b03e:	4577      	cmp	r7, lr
 800b040:	f840 3f04 	str.w	r3, [r0, #4]!
 800b044:	d1f3      	bne.n	800b02e <ai_platform_get_activations_map+0x52>
 800b046:	eba7 000e 	sub.w	r0, r7, lr
 800b04a:	fab0 f080 	clz	r0, r0
 800b04e:	0940      	lsrs	r0, r0, #5
 800b050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b052:	2000      	movs	r0, #0
 800b054:	4770      	bx	lr
 800b056:	1f20      	subs	r0, r4, #4
 800b058:	462a      	mov	r2, r5
 800b05a:	2400      	movs	r4, #0
 800b05c:	e000      	b.n	800b060 <ai_platform_get_activations_map+0x84>
 800b05e:	461c      	mov	r4, r3
 800b060:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b064:	42b3      	cmp	r3, r6
 800b066:	d0d1      	beq.n	800b00c <ai_platform_get_activations_map+0x30>
 800b068:	f840 3f04 	str.w	r3, [r0, #4]!
 800b06c:	1c63      	adds	r3, r4, #1
 800b06e:	429f      	cmp	r7, r3
 800b070:	d1f5      	bne.n	800b05e <ai_platform_get_activations_map+0x82>
 800b072:	3402      	adds	r4, #2
 800b074:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b078:	42b3      	cmp	r3, r6
 800b07a:	d1c9      	bne.n	800b010 <ai_platform_get_activations_map+0x34>
 800b07c:	2001      	movs	r0, #1
 800b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b080:	a1facade 	.word	0xa1facade

0800b084 <ai_platform_bind_network_params>:
 800b084:	b1a0      	cbz	r0, 800b0b0 <ai_platform_bind_network_params+0x2c>
 800b086:	b1b1      	cbz	r1, 800b0b6 <ai_platform_bind_network_params+0x32>
 800b088:	b1c2      	cbz	r2, 800b0bc <ai_platform_bind_network_params+0x38>
 800b08a:	b410      	push	{r4}
 800b08c:	4603      	mov	r3, r0
 800b08e:	4c0d      	ldr	r4, [pc, #52]	; (800b0c4 <ai_platform_bind_network_params+0x40>)
 800b090:	f843 4b04 	str.w	r4, [r3], #4
 800b094:	f100 0c0c 	add.w	ip, r0, #12
 800b098:	c903      	ldmia	r1, {r0, r1}
 800b09a:	e883 0003 	stmia.w	r3, {r0, r1}
 800b09e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b0a2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	4770      	bx	lr
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	4770      	bx	lr
 800b0bc:	4613      	mov	r3, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	a1facade 	.word	0xa1facade

0800b0c8 <ai_platform_network_get_error>:
 800b0c8:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <ai_platform_network_get_error+0x14>)
 800b0ca:	6802      	ldr	r2, [r0, #0]
 800b0cc:	4393      	bics	r3, r2
 800b0ce:	d102      	bne.n	800b0d6 <ai_platform_network_get_error+0xe>
 800b0d0:	300c      	adds	r0, #12
 800b0d2:	f000 bc77 	b.w	800b9c4 <core_get_error>
 800b0d6:	f241 0010 	movw	r0, #4112	; 0x1010
 800b0da:	4770      	bx	lr
 800b0dc:	a1c00100 	.word	0xa1c00100

0800b0e0 <ai_platform_network_set_error>:
 800b0e0:	b110      	cbz	r0, 800b0e8 <ai_platform_network_set_error+0x8>
 800b0e2:	300c      	adds	r0, #12
 800b0e4:	f000 bc74 	b.w	800b9d0 <core_set_error>
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop

0800b0ec <ai_platform_inputs_get>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	4b38      	ldr	r3, [pc, #224]	; (800b1d4 <ai_platform_inputs_get+0xe8>)
 800b0f2:	6802      	ldr	r2, [r0, #0]
 800b0f4:	b085      	sub	sp, #20
 800b0f6:	4393      	bics	r3, r2
 800b0f8:	9003      	str	r0, [sp, #12]
 800b0fa:	9102      	str	r1, [sp, #8]
 800b0fc:	d160      	bne.n	800b1c0 <ai_platform_inputs_get+0xd4>
 800b0fe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800b100:	2b00      	cmp	r3, #0
 800b102:	d04f      	beq.n	800b1a4 <ai_platform_inputs_get+0xb8>
 800b104:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800b108:	f1ba 0f00 	cmp.w	sl, #0
 800b10c:	d04a      	beq.n	800b1a4 <ai_platform_inputs_get+0xb8>
 800b10e:	f04f 0b00 	mov.w	fp, #0
 800b112:	465d      	mov	r5, fp
 800b114:	e016      	b.n	800b144 <ai_platform_inputs_get+0x58>
 800b116:	9901      	ldr	r1, [sp, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	507a      	str	r2, [r7, r1]
 800b11c:	69b1      	ldr	r1, [r6, #24]
 800b11e:	684e      	ldr	r6, [r1, #4]
 800b120:	60a3      	str	r3, [r4, #8]
 800b122:	f04f 0201 	mov.w	r2, #1
 800b126:	7522      	strb	r2, [r4, #20]
 800b128:	6961      	ldr	r1, [r4, #20]
 800b12a:	6020      	str	r0, [r4, #0]
 800b12c:	f369 211f 	bfi	r1, r9, #8, #24
 800b130:	2300      	movs	r3, #0
 800b132:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800b136:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800b13a:	f8c4 c004 	str.w	ip, [r4, #4]
 800b13e:	3501      	adds	r5, #1
 800b140:	f10b 0b1c 	add.w	fp, fp, #28
 800b144:	f8ba 3000 	ldrh.w	r3, [sl]
 800b148:	42ab      	cmp	r3, r5
 800b14a:	b2aa      	uxth	r2, r5
 800b14c:	d93c      	bls.n	800b1c8 <ai_platform_inputs_get+0xdc>
 800b14e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b152:	00e9      	lsls	r1, r5, #3
 800b154:	9101      	str	r1, [sp, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d036      	beq.n	800b1c8 <ai_platform_inputs_get+0xdc>
 800b15a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b15e:	2e00      	cmp	r6, #0
 800b160:	d032      	beq.n	800b1c8 <ai_platform_inputs_get+0xdc>
 800b162:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b166:	69b2      	ldr	r2, [r6, #24]
 800b168:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b16c:	6810      	ldr	r0, [r2, #0]
 800b16e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b172:	68b3      	ldr	r3, [r6, #8]
 800b174:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b178:	f001 ff32 	bl	800cfe0 <ai_array_to_buffer_fmt>
 800b17c:	69b1      	ldr	r1, [r6, #24]
 800b17e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800b182:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b186:	445c      	add	r4, fp
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d0c8      	beq.n	800b11e <ai_platform_inputs_get+0x32>
 800b18c:	2100      	movs	r1, #0
 800b18e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800b192:	6831      	ldr	r1, [r6, #0]
 800b194:	6059      	str	r1, [r3, #4]
 800b196:	b111      	cbz	r1, 800b19e <ai_platform_inputs_get+0xb2>
 800b198:	8849      	ldrh	r1, [r1, #2]
 800b19a:	2900      	cmp	r1, #0
 800b19c:	d1bb      	bne.n	800b116 <ai_platform_inputs_get+0x2a>
 800b19e:	69b1      	ldr	r1, [r6, #24]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	e7bc      	b.n	800b11e <ai_platform_inputs_get+0x32>
 800b1a4:	9803      	ldr	r0, [sp, #12]
 800b1a6:	2218      	movs	r2, #24
 800b1a8:	2111      	movs	r1, #17
 800b1aa:	300c      	adds	r0, #12
 800b1ac:	f000 fc10 	bl	800b9d0 <core_set_error>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	9b02      	ldr	r3, [sp, #8]
 800b1b6:	b103      	cbz	r3, 800b1ba <ai_platform_inputs_get+0xce>
 800b1b8:	801a      	strh	r2, [r3, #0]
 800b1ba:	b005      	add	sp, #20
 800b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	b005      	add	sp, #20
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	d0eb      	beq.n	800b1a4 <ai_platform_inputs_get+0xb8>
 800b1cc:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b1d0:	6858      	ldr	r0, [r3, #4]
 800b1d2:	e7ef      	b.n	800b1b4 <ai_platform_inputs_get+0xc8>
 800b1d4:	a1c00100 	.word	0xa1c00100

0800b1d8 <ai_platform_outputs_get>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	4b37      	ldr	r3, [pc, #220]	; (800b2bc <ai_platform_outputs_get+0xe4>)
 800b1de:	6802      	ldr	r2, [r0, #0]
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	4393      	bics	r3, r2
 800b1e4:	9003      	str	r0, [sp, #12]
 800b1e6:	9102      	str	r1, [sp, #8]
 800b1e8:	d15d      	bne.n	800b2a6 <ai_platform_outputs_get+0xce>
 800b1ea:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d94c      	bls.n	800b28a <ai_platform_outputs_get+0xb2>
 800b1f0:	f04f 0b00 	mov.w	fp, #0
 800b1f4:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800b1f8:	465d      	mov	r5, fp
 800b1fa:	46d8      	mov	r8, fp
 800b1fc:	e016      	b.n	800b22c <ai_platform_outputs_get+0x54>
 800b1fe:	9a01      	ldr	r2, [sp, #4]
 800b200:	2101      	movs	r1, #1
 800b202:	50b9      	str	r1, [r7, r2]
 800b204:	69b2      	ldr	r2, [r6, #24]
 800b206:	6856      	ldr	r6, [r2, #4]
 800b208:	6020      	str	r0, [r4, #0]
 800b20a:	f04f 0201 	mov.w	r2, #1
 800b20e:	7522      	strb	r2, [r4, #20]
 800b210:	6960      	ldr	r0, [r4, #20]
 800b212:	f8c4 c004 	str.w	ip, [r4, #4]
 800b216:	f369 201f 	bfi	r0, r9, #8, #24
 800b21a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800b21e:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800b222:	9b00      	ldr	r3, [sp, #0]
 800b224:	61a3      	str	r3, [r4, #24]
 800b226:	3501      	adds	r5, #1
 800b228:	f10b 0b1c 	add.w	fp, fp, #28
 800b22c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b230:	42ab      	cmp	r3, r5
 800b232:	b2aa      	uxth	r2, r5
 800b234:	d93b      	bls.n	800b2ae <ai_platform_outputs_get+0xd6>
 800b236:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b23a:	00e9      	lsls	r1, r5, #3
 800b23c:	9101      	str	r1, [sp, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d035      	beq.n	800b2ae <ai_platform_outputs_get+0xd6>
 800b242:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b246:	2e00      	cmp	r6, #0
 800b248:	d031      	beq.n	800b2ae <ai_platform_outputs_get+0xd6>
 800b24a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b24e:	69b2      	ldr	r2, [r6, #24]
 800b250:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b254:	68b3      	ldr	r3, [r6, #8]
 800b256:	6810      	ldr	r0, [r2, #0]
 800b258:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b25c:	68f3      	ldr	r3, [r6, #12]
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	f001 febe 	bl	800cfe0 <ai_array_to_buffer_fmt>
 800b264:	69b2      	ldr	r2, [r6, #24]
 800b266:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800b26a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b26e:	445c      	add	r4, fp
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0c8      	beq.n	800b206 <ai_platform_outputs_get+0x2e>
 800b274:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800b278:	6832      	ldr	r2, [r6, #0]
 800b27a:	605a      	str	r2, [r3, #4]
 800b27c:	b112      	cbz	r2, 800b284 <ai_platform_outputs_get+0xac>
 800b27e:	8852      	ldrh	r2, [r2, #2]
 800b280:	2a00      	cmp	r2, #0
 800b282:	d1bc      	bne.n	800b1fe <ai_platform_outputs_get+0x26>
 800b284:	69b2      	ldr	r2, [r6, #24]
 800b286:	2300      	movs	r3, #0
 800b288:	e7bd      	b.n	800b206 <ai_platform_outputs_get+0x2e>
 800b28a:	9803      	ldr	r0, [sp, #12]
 800b28c:	2218      	movs	r2, #24
 800b28e:	2111      	movs	r1, #17
 800b290:	300c      	adds	r0, #12
 800b292:	f000 fb9d 	bl	800b9d0 <core_set_error>
 800b296:	2200      	movs	r2, #0
 800b298:	4610      	mov	r0, r2
 800b29a:	9b02      	ldr	r3, [sp, #8]
 800b29c:	b103      	cbz	r3, 800b2a0 <ai_platform_outputs_get+0xc8>
 800b29e:	801a      	strh	r2, [r3, #0]
 800b2a0:	b005      	add	sp, #20
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	b005      	add	sp, #20
 800b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	d0eb      	beq.n	800b28a <ai_platform_outputs_get+0xb2>
 800b2b2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b2b6:	6858      	ldr	r0, [r3, #4]
 800b2b8:	e7ef      	b.n	800b29a <ai_platform_outputs_get+0xc2>
 800b2ba:	bf00      	nop
 800b2bc:	a1c00100 	.word	0xa1c00100

0800b2c0 <ai_platform_network_create>:
 800b2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	b083      	sub	sp, #12
 800b2c6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800b2ca:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800b2ce:	b320      	cbz	r0, 800b31a <ai_platform_network_create+0x5a>
 800b2d0:	6002      	str	r2, [r0, #0]
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	461f      	mov	r7, r3
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	f000 fb72 	bl	800b9c0 <core_init>
 800b2dc:	b970      	cbnz	r0, 800b2fc <ai_platform_network_create+0x3c>
 800b2de:	2530      	movs	r5, #48	; 0x30
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	2410      	movs	r4, #16
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f001 fefa 	bl	800d0e4 <ai_version_get>
 800b2f0:	60b0      	str	r0, [r6, #8]
 800b2f2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800b2f6:	b003      	add	sp, #12
 800b2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4649      	mov	r1, r9
 800b300:	4638      	mov	r0, r7
 800b302:	f001 feef 	bl	800d0e4 <ai_version_get>
 800b306:	2200      	movs	r2, #0
 800b308:	4605      	mov	r5, r0
 800b30a:	2105      	movs	r1, #5
 800b30c:	2001      	movs	r0, #1
 800b30e:	f001 fee9 	bl	800d0e4 <ai_version_get>
 800b312:	4285      	cmp	r5, r0
 800b314:	d008      	beq.n	800b328 <ai_platform_network_create+0x68>
 800b316:	2501      	movs	r5, #1
 800b318:	e7e2      	b.n	800b2e0 <ai_platform_network_create+0x20>
 800b31a:	2510      	movs	r5, #16
 800b31c:	462c      	mov	r4, r5
 800b31e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800b322:	b003      	add	sp, #12
 800b324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <ai_platform_network_create+0x80>)
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	a801      	add	r0, sp, #4
 800b32e:	f000 fb5b 	bl	800b9e8 <ai_check_custom_types>
 800b332:	b110      	cbz	r0, 800b33a <ai_platform_network_create+0x7a>
 800b334:	2400      	movs	r4, #0
 800b336:	4625      	mov	r5, r4
 800b338:	e7d5      	b.n	800b2e6 <ai_platform_network_create+0x26>
 800b33a:	2502      	movs	r5, #2
 800b33c:	e7d0      	b.n	800b2e0 <ai_platform_network_create+0x20>
 800b33e:	bf00      	nop
 800b340:	84048403 	.word	0x84048403

0800b344 <ai_platform_network_init>:
 800b344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	4b63      	ldr	r3, [pc, #396]	; (800b4d8 <ai_platform_network_init+0x194>)
 800b34a:	6802      	ldr	r2, [r0, #0]
 800b34c:	4393      	bics	r3, r2
 800b34e:	b083      	sub	sp, #12
 800b350:	d156      	bne.n	800b400 <ai_platform_network_init+0xbc>
 800b352:	4604      	mov	r4, r0
 800b354:	460f      	mov	r7, r1
 800b356:	2900      	cmp	r1, #0
 800b358:	f000 80a9 	beq.w	800b4ae <ai_platform_network_init+0x16a>
 800b35c:	680b      	ldr	r3, [r1, #0]
 800b35e:	495f      	ldr	r1, [pc, #380]	; (800b4dc <ai_platform_network_init+0x198>)
 800b360:	428b      	cmp	r3, r1
 800b362:	d113      	bne.n	800b38c <ai_platform_network_init+0x48>
 800b364:	495c      	ldr	r1, [pc, #368]	; (800b4d8 <ai_platform_network_init+0x194>)
 800b366:	89bd      	ldrh	r5, [r7, #12]
 800b368:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800b36c:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800b370:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800b374:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800b378:	68be      	ldr	r6, [r7, #8]
 800b37a:	428a      	cmp	r2, r1
 800b37c:	d02c      	beq.n	800b3d8 <ai_platform_network_init+0x94>
 800b37e:	2303      	movs	r3, #3
 800b380:	6123      	str	r3, [r4, #16]
 800b382:	4627      	mov	r7, r4
 800b384:	4638      	mov	r0, r7
 800b386:	b003      	add	sp, #12
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	2101      	movs	r1, #1
 800b38e:	4638      	mov	r0, r7
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800b396:	f7ff fd7f 	bl	800ae98 <ai_buffer_get_size>
 800b39a:	f107 081c 	add.w	r8, r7, #28
 800b39e:	4605      	mov	r5, r0
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	463e      	mov	r6, r7
 800b3a6:	6a3f      	ldr	r7, [r7, #32]
 800b3a8:	f7ff fd76 	bl	800ae98 <ai_buffer_get_size>
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	bf0a      	itet	eq
 800b3b2:	46a9      	moveq	r9, r5
 800b3b4:	f04f 0901 	movne.w	r9, #1
 800b3b8:	462e      	moveq	r6, r5
 800b3ba:	b330      	cbz	r0, 800b40a <ai_platform_network_init+0xc6>
 800b3bc:	2f00      	cmp	r7, #0
 800b3be:	f000 8084 	beq.w	800b4ca <ai_platform_network_init+0x186>
 800b3c2:	f04f 0a01 	mov.w	sl, #1
 800b3c6:	f1bb 0f00 	cmp.w	fp, #0
 800b3ca:	d021      	beq.n	800b410 <ai_platform_network_init+0xcc>
 800b3cc:	2500      	movs	r5, #0
 800b3ce:	6822      	ldr	r2, [r4, #0]
 800b3d0:	4941      	ldr	r1, [pc, #260]	; (800b4d8 <ai_platform_network_init+0x194>)
 800b3d2:	428a      	cmp	r2, r1
 800b3d4:	46ab      	mov	fp, r5
 800b3d6:	d1d2      	bne.n	800b37e <ai_platform_network_init+0x3a>
 800b3d8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800b3da:	454a      	cmp	r2, r9
 800b3dc:	4a3f      	ldr	r2, [pc, #252]	; (800b4dc <ai_platform_network_init+0x198>)
 800b3de:	d221      	bcs.n	800b424 <ai_platform_network_init+0xe0>
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d15c      	bne.n	800b49e <ai_platform_network_init+0x15a>
 800b3e4:	6266      	str	r6, [r4, #36]	; 0x24
 800b3e6:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 800b3ea:	f8a4 b020 	strh.w	fp, [r4, #32]
 800b3ee:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800b3f2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
 800b3f6:	8525      	strh	r5, [r4, #40]	; 0x28
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 fb1f 	bl	800ba3c <ai_layers_init_all>
 800b3fe:	e7be      	b.n	800b37e <ai_platform_network_init+0x3a>
 800b400:	2700      	movs	r7, #0
 800b402:	4638      	mov	r0, r7
 800b404:	b003      	add	sp, #12
 800b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40a:	4680      	mov	r8, r0
 800b40c:	4682      	mov	sl, r0
 800b40e:	e7da      	b.n	800b3c6 <ai_platform_network_init+0x82>
 800b410:	2d00      	cmp	r5, #0
 800b412:	d0dc      	beq.n	800b3ce <ai_platform_network_init+0x8a>
 800b414:	2212      	movs	r2, #18
 800b416:	2110      	movs	r1, #16
 800b418:	f104 000c 	add.w	r0, r4, #12
 800b41c:	f000 fad8 	bl	800b9d0 <core_set_error>
 800b420:	465f      	mov	r7, fp
 800b422:	e7af      	b.n	800b384 <ai_platform_network_init+0x40>
 800b424:	4293      	cmp	r3, r2
 800b426:	d0dd      	beq.n	800b3e4 <ai_platform_network_init+0xa0>
 800b428:	f1b9 0f00 	cmp.w	r9, #0
 800b42c:	d018      	beq.n	800b460 <ai_platform_network_init+0x11c>
 800b42e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	f8cd 9004 	str.w	r9, [sp, #4]
 800b438:	2700      	movs	r7, #0
 800b43a:	4699      	mov	r9, r3
 800b43c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43e:	eb06 0e07 	add.w	lr, r6, r7
 800b442:	eb03 0c07 	add.w	ip, r3, r7
 800b446:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b44a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b44e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b452:	371c      	adds	r7, #28
 800b454:	45b9      	cmp	r9, r7
 800b456:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b45a:	d1ef      	bne.n	800b43c <ai_platform_network_init+0xf8>
 800b45c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b462:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 800b466:	4553      	cmp	r3, sl
 800b468:	f8a4 b020 	strh.w	fp, [r4, #32]
 800b46c:	d325      	bcc.n	800b4ba <ai_platform_network_init+0x176>
 800b46e:	f1ba 0f00 	cmp.w	sl, #0
 800b472:	d0be      	beq.n	800b3f2 <ai_platform_network_init+0xae>
 800b474:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 800b478:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b47c:	f04f 0c00 	mov.w	ip, #0
 800b480:	eb08 070c 	add.w	r7, r8, ip
 800b484:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b488:	4466      	add	r6, ip
 800b48a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b48c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b490:	f10c 0c1c 	add.w	ip, ip, #28
 800b494:	45f4      	cmp	ip, lr
 800b496:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800b49a:	d1f1      	bne.n	800b480 <ai_platform_network_init+0x13c>
 800b49c:	e7a9      	b.n	800b3f2 <ai_platform_network_init+0xae>
 800b49e:	2212      	movs	r2, #18
 800b4a0:	2116      	movs	r1, #22
 800b4a2:	f104 000c 	add.w	r0, r4, #12
 800b4a6:	f000 fa93 	bl	800b9d0 <core_set_error>
 800b4aa:	2700      	movs	r7, #0
 800b4ac:	e76a      	b.n	800b384 <ai_platform_network_init+0x40>
 800b4ae:	2211      	movs	r2, #17
 800b4b0:	2110      	movs	r1, #16
 800b4b2:	300c      	adds	r0, #12
 800b4b4:	f000 fa8c 	bl	800b9d0 <core_set_error>
 800b4b8:	e764      	b.n	800b384 <ai_platform_network_init+0x40>
 800b4ba:	2213      	movs	r2, #19
 800b4bc:	2116      	movs	r1, #22
 800b4be:	f104 000c 	add.w	r0, r4, #12
 800b4c2:	f000 fa85 	bl	800b9d0 <core_set_error>
 800b4c6:	2700      	movs	r7, #0
 800b4c8:	e75c      	b.n	800b384 <ai_platform_network_init+0x40>
 800b4ca:	2213      	movs	r2, #19
 800b4cc:	2110      	movs	r1, #16
 800b4ce:	f104 000c 	add.w	r0, r4, #12
 800b4d2:	f000 fa7d 	bl	800b9d0 <core_set_error>
 800b4d6:	e755      	b.n	800b384 <ai_platform_network_init+0x40>
 800b4d8:	a1c00100 	.word	0xa1c00100
 800b4dc:	a1facade 	.word	0xa1facade

0800b4e0 <ai_platform_network_post_init>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4b16      	ldr	r3, [pc, #88]	; (800b53c <ai_platform_network_post_init+0x5c>)
 800b4e4:	6802      	ldr	r2, [r0, #0]
 800b4e6:	ea02 0103 	and.w	r1, r2, r3
 800b4ea:	4393      	bics	r3, r2
 800b4ec:	d108      	bne.n	800b500 <ai_platform_network_post_init+0x20>
 800b4ee:	6903      	ldr	r3, [r0, #16]
 800b4f0:	f013 0502 	ands.w	r5, r3, #2
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	d005      	beq.n	800b504 <ai_platform_network_post_init+0x24>
 800b4f8:	428a      	cmp	r2, r1
 800b4fa:	d00a      	beq.n	800b512 <ai_platform_network_post_init+0x32>
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	2000      	movs	r0, #0
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	2210      	movs	r2, #16
 800b506:	2111      	movs	r1, #17
 800b508:	300c      	adds	r0, #12
 800b50a:	f000 fa61 	bl	800b9d0 <core_set_error>
 800b50e:	4628      	mov	r0, r5
 800b510:	bd38      	pop	{r3, r4, r5, pc}
 800b512:	f000 faa1 	bl	800ba58 <ai_layers_post_init_all>
 800b516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0ef      	beq.n	800b4fc <ai_platform_network_post_init+0x1c>
 800b51c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b51e:	e008      	b.n	800b532 <ai_platform_network_post_init+0x52>
 800b520:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 800b524:	4798      	blx	r3
 800b526:	692b      	ldr	r3, [r5, #16]
 800b528:	42ab      	cmp	r3, r5
 800b52a:	d0e7      	beq.n	800b4fc <ai_platform_network_post_init+0x1c>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d0e5      	beq.n	800b4fc <ai_platform_network_post_init+0x1c>
 800b530:	461d      	mov	r5, r3
 800b532:	4629      	mov	r1, r5
 800b534:	2000      	movs	r0, #0
 800b536:	2d00      	cmp	r5, #0
 800b538:	d1f2      	bne.n	800b520 <ai_platform_network_post_init+0x40>
 800b53a:	e7df      	b.n	800b4fc <ai_platform_network_post_init+0x1c>
 800b53c:	a1c00100 	.word	0xa1c00100

0800b540 <ai_platform_network_process>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	4bb5      	ldr	r3, [pc, #724]	; (800b81c <ai_platform_network_process+0x2dc>)
 800b546:	4605      	mov	r5, r0
 800b548:	6800      	ldr	r0, [r0, #0]
 800b54a:	b085      	sub	sp, #20
 800b54c:	4383      	bics	r3, r0
 800b54e:	9202      	str	r2, [sp, #8]
 800b550:	f040 8140 	bne.w	800b7d4 <ai_platform_network_process+0x294>
 800b554:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 8125 	beq.w	800b7a6 <ai_platform_network_process+0x266>
 800b55c:	692b      	ldr	r3, [r5, #16]
 800b55e:	f8d5 a034 	ldr.w	sl, [r5, #52]	; 0x34
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2700      	movs	r7, #0
 800b568:	2b03      	cmp	r3, #3
 800b56a:	61af      	str	r7, [r5, #24]
 800b56c:	f040 8137 	bne.w	800b7de <ai_platform_network_process+0x29e>
 800b570:	2900      	cmp	r1, #0
 800b572:	f000 811e 	beq.w	800b7b2 <ai_platform_network_process+0x272>
 800b576:	f1ba 0f00 	cmp.w	sl, #0
 800b57a:	f000 811a 	beq.w	800b7b2 <ai_platform_network_process+0x272>
 800b57e:	f8ba 3000 	ldrh.w	r3, [sl]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f000 8115 	beq.w	800b7b2 <ai_platform_network_process+0x272>
 800b588:	698b      	ldr	r3, [r1, #24]
 800b58a:	9503      	str	r5, [sp, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	460e      	mov	r6, r1
 800b592:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d072      	beq.n	800b680 <ai_platform_network_process+0x140>
 800b59a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800b59e:	2c00      	cmp	r4, #0
 800b5a0:	d06e      	beq.n	800b680 <ai_platform_network_process+0x140>
 800b5a2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b5a6:	f8d3 9000 	ldr.w	r9, [r3]
 800b5aa:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800b5ae:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800b5b2:	f000 81d3 	beq.w	800b95c <ai_platform_network_process+0x41c>
 800b5b6:	69a3      	ldr	r3, [r4, #24]
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	685d      	ldr	r5, [r3, #4]
 800b5be:	f7ff fc6b 	bl	800ae98 <ai_buffer_get_size>
 800b5c2:	4285      	cmp	r5, r0
 800b5c4:	f0c0 8116 	bcc.w	800b7f4 <ai_platform_network_process+0x2b4>
 800b5c8:	68e0      	ldr	r0, [r4, #12]
 800b5ca:	69b1      	ldr	r1, [r6, #24]
 800b5cc:	68c2      	ldr	r2, [r0, #12]
 800b5ce:	68cb      	ldr	r3, [r1, #12]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	f040 810f 	bne.w	800b7f4 <ai_platform_network_process+0x2b4>
 800b5d6:	6882      	ldr	r2, [r0, #8]
 800b5d8:	688b      	ldr	r3, [r1, #8]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	f040 810a 	bne.w	800b7f4 <ai_platform_network_process+0x2b4>
 800b5e0:	6842      	ldr	r2, [r0, #4]
 800b5e2:	684b      	ldr	r3, [r1, #4]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	f040 8105 	bne.w	800b7f4 <ai_platform_network_process+0x2b4>
 800b5ea:	69a3      	ldr	r3, [r4, #24]
 800b5ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5f0:	f001 fd66 	bl	800d0c0 <ai_array_get_data_byte_size>
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f001 fd7a 	bl	800d0f0 <get_tensor_byte_size>
 800b5fc:	4285      	cmp	r5, r0
 800b5fe:	f0c0 80f9 	bcc.w	800b7f4 <ai_platform_network_process+0x2b4>
 800b602:	69a3      	ldr	r3, [r4, #24]
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	f001 fceb 	bl	800cfe0 <ai_array_to_buffer_fmt>
 800b60a:	6833      	ldr	r3, [r6, #0]
 800b60c:	4058      	eors	r0, r3
 800b60e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800b612:	f040 81a5 	bne.w	800b960 <ai_platform_network_process+0x420>
 800b616:	6873      	ldr	r3, [r6, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 819f 	beq.w	800b95c <ai_platform_network_process+0x41c>
 800b61e:	69b3      	ldr	r3, [r6, #24]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 81a5 	beq.w	800b972 <ai_platform_network_process+0x432>
 800b628:	9a01      	ldr	r2, [sp, #4]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	bf38      	it	cc
 800b62e:	461a      	movcc	r2, r3
 800b630:	4620      	mov	r0, r4
 800b632:	9201      	str	r2, [sp, #4]
 800b634:	f001 fd5c 	bl	800d0f0 <get_tensor_byte_size>
 800b638:	f8c8 0008 	str.w	r0, [r8, #8]
 800b63c:	69b3      	ldr	r3, [r6, #24]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	fb00 f303 	mul.w	r3, r0, r3
 800b644:	f8c8 300c 	str.w	r3, [r8, #12]
 800b648:	6871      	ldr	r1, [r6, #4]
 800b64a:	f8c8 1004 	str.w	r1, [r8, #4]
 800b64e:	440b      	add	r3, r1
 800b650:	f849 300b 	str.w	r3, [r9, fp]
 800b654:	69a0      	ldr	r0, [r4, #24]
 800b656:	6803      	ldr	r3, [r0, #0]
 800b658:	009a      	lsls	r2, r3, #2
 800b65a:	f107 0701 	add.w	r7, r7, #1
 800b65e:	f106 061c 	add.w	r6, r6, #28
 800b662:	f100 80b1 	bmi.w	800b7c8 <ai_platform_network_process+0x288>
 800b666:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	4419      	add	r1, r3
 800b66e:	6081      	str	r1, [r0, #8]
 800b670:	69a3      	ldr	r3, [r4, #24]
 800b672:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b676:	60da      	str	r2, [r3, #12]
 800b678:	f8ba 3000 	ldrh.w	r3, [sl]
 800b67c:	42bb      	cmp	r3, r7
 800b67e:	d888      	bhi.n	800b592 <ai_platform_network_process+0x52>
 800b680:	9d03      	ldr	r5, [sp, #12]
 800b682:	9b02      	ldr	r3, [sp, #8]
 800b684:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 817c 	beq.w	800b984 <ai_platform_network_process+0x444>
 800b68c:	2a01      	cmp	r2, #1
 800b68e:	f240 80bd 	bls.w	800b80c <ai_platform_network_process+0x2cc>
 800b692:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 800b696:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 80b6 	beq.w	800b80c <ai_platform_network_process+0x2cc>
 800b6a0:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b6a4:	2700      	movs	r7, #0
 800b6a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 80bd 	beq.w	800b82a <ai_platform_network_process+0x2ea>
 800b6b0:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b6b4:	2e00      	cmp	r6, #0
 800b6b6:	f000 80b8 	beq.w	800b82a <ai_platform_network_process+0x2ea>
 800b6ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b6be:	681c      	ldr	r4, [r3, #0]
 800b6c0:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800b6c4:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800b6c8:	f000 8160 	beq.w	800b98c <ai_platform_network_process+0x44c>
 800b6cc:	69b3      	ldr	r3, [r6, #24]
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	9302      	str	r3, [sp, #8]
 800b6d4:	4658      	mov	r0, fp
 800b6d6:	f7ff fbdf 	bl	800ae98 <ai_buffer_get_size>
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	4283      	cmp	r3, r0
 800b6de:	f0c0 8095 	bcc.w	800b80c <ai_platform_network_process+0x2cc>
 800b6e2:	68f0      	ldr	r0, [r6, #12]
 800b6e4:	f8db 1018 	ldr.w	r1, [fp, #24]
 800b6e8:	68c2      	ldr	r2, [r0, #12]
 800b6ea:	68cb      	ldr	r3, [r1, #12]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	f040 808d 	bne.w	800b80c <ai_platform_network_process+0x2cc>
 800b6f2:	6882      	ldr	r2, [r0, #8]
 800b6f4:	688b      	ldr	r3, [r1, #8]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	f040 8088 	bne.w	800b80c <ai_platform_network_process+0x2cc>
 800b6fc:	6842      	ldr	r2, [r0, #4]
 800b6fe:	684b      	ldr	r3, [r1, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	f040 8083 	bne.w	800b80c <ai_platform_network_process+0x2cc>
 800b706:	69b3      	ldr	r3, [r6, #24]
 800b708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b70c:	f001 fcd8 	bl	800d0c0 <ai_array_get_data_byte_size>
 800b710:	9002      	str	r0, [sp, #8]
 800b712:	4630      	mov	r0, r6
 800b714:	f001 fcec 	bl	800d0f0 <get_tensor_byte_size>
 800b718:	9b02      	ldr	r3, [sp, #8]
 800b71a:	4283      	cmp	r3, r0
 800b71c:	d376      	bcc.n	800b80c <ai_platform_network_process+0x2cc>
 800b71e:	69b3      	ldr	r3, [r6, #24]
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f001 fc5d 	bl	800cfe0 <ai_array_to_buffer_fmt>
 800b726:	f8db 3000 	ldr.w	r3, [fp]
 800b72a:	4058      	eors	r0, r3
 800b72c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800b730:	f040 8134 	bne.w	800b99c <ai_platform_network_process+0x45c>
 800b734:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 8127 	beq.w	800b98c <ai_platform_network_process+0x44c>
 800b73e:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 8133 	beq.w	800b9b0 <ai_platform_network_process+0x470>
 800b74a:	9a01      	ldr	r2, [sp, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	bf38      	it	cc
 800b750:	461a      	movcc	r2, r3
 800b752:	4630      	mov	r0, r6
 800b754:	9201      	str	r2, [sp, #4]
 800b756:	f001 fccb 	bl	800d0f0 <get_tensor_byte_size>
 800b75a:	f8c9 0008 	str.w	r0, [r9, #8]
 800b75e:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	fb00 f303 	mul.w	r3, r0, r3
 800b768:	f8c9 300c 	str.w	r3, [r9, #12]
 800b76c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b770:	f8c9 1004 	str.w	r1, [r9, #4]
 800b774:	440b      	add	r3, r1
 800b776:	f844 300a 	str.w	r3, [r4, sl]
 800b77a:	69b0      	ldr	r0, [r6, #24]
 800b77c:	6803      	ldr	r3, [r0, #0]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	f107 0701 	add.w	r7, r7, #1
 800b784:	f10b 0b1c 	add.w	fp, fp, #28
 800b788:	d44a      	bmi.n	800b820 <ai_platform_network_process+0x2e0>
 800b78a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	4419      	add	r1, r3
 800b792:	6081      	str	r1, [r0, #8]
 800b794:	69b3      	ldr	r3, [r6, #24]
 800b796:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b79a:	60da      	str	r2, [r3, #12]
 800b79c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b7a0:	42bb      	cmp	r3, r7
 800b7a2:	d880      	bhi.n	800b6a6 <ai_platform_network_process+0x166>
 800b7a4:	e041      	b.n	800b82a <ai_platform_network_process+0x2ea>
 800b7a6:	692a      	ldr	r2, [r5, #16]
 800b7a8:	61ab      	str	r3, [r5, #24]
 800b7aa:	f002 0203 	and.w	r2, r2, #3
 800b7ae:	2a03      	cmp	r2, #3
 800b7b0:	d115      	bne.n	800b7de <ai_platform_network_process+0x29e>
 800b7b2:	2217      	movs	r2, #23
 800b7b4:	2112      	movs	r1, #18
 800b7b6:	f105 000c 	add.w	r0, r5, #12
 800b7ba:	f000 f909 	bl	800b9d0 <core_set_error>
 800b7be:	2400      	movs	r4, #0
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	b005      	add	sp, #20
 800b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	f8ba 3000 	ldrh.w	r3, [sl]
 800b7cc:	429f      	cmp	r7, r3
 800b7ce:	f4ff aee0 	bcc.w	800b592 <ai_platform_network_process+0x52>
 800b7d2:	e755      	b.n	800b680 <ai_platform_network_process+0x140>
 800b7d4:	2400      	movs	r4, #0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	b005      	add	sp, #20
 800b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7de:	2230      	movs	r2, #48	; 0x30
 800b7e0:	2111      	movs	r1, #17
 800b7e2:	f105 000c 	add.w	r0, r5, #12
 800b7e6:	f000 f8f3 	bl	800b9d0 <core_set_error>
 800b7ea:	2400      	movs	r4, #0
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	b005      	add	sp, #20
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	9d03      	ldr	r5, [sp, #12]
 800b7f6:	2218      	movs	r2, #24
 800b7f8:	2112      	movs	r1, #18
 800b7fa:	f105 000c 	add.w	r0, r5, #12
 800b7fe:	f000 f8e7 	bl	800b9d0 <core_set_error>
 800b802:	2400      	movs	r4, #0
 800b804:	4620      	mov	r0, r4
 800b806:	b005      	add	sp, #20
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	2218      	movs	r2, #24
 800b80e:	2113      	movs	r1, #19
 800b810:	f105 000c 	add.w	r0, r5, #12
 800b814:	f000 f8dc 	bl	800b9d0 <core_set_error>
 800b818:	2400      	movs	r4, #0
 800b81a:	e7d1      	b.n	800b7c0 <ai_platform_network_process+0x280>
 800b81c:	a1c00100 	.word	0xa1c00100
 800b820:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b824:	429f      	cmp	r7, r3
 800b826:	f4ff af3e 	bcc.w	800b6a6 <ai_platform_network_process+0x166>
 800b82a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b82e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800b830:	832b      	strh	r3, [r5, #24]
 800b832:	2a00      	cmp	r2, #0
 800b834:	f040 808c 	bne.w	800b950 <ai_platform_network_process+0x410>
 800b838:	4616      	mov	r6, r2
 800b83a:	4617      	mov	r7, r2
 800b83c:	8b6c      	ldrh	r4, [r5, #26]
 800b83e:	429c      	cmp	r4, r3
 800b840:	bf38      	it	cc
 800b842:	46ab      	movcc	fp, r5
 800b844:	d2bc      	bcs.n	800b7c0 <ai_platform_network_process+0x280>
 800b846:	2e00      	cmp	r6, #0
 800b848:	d030      	beq.n	800b8ac <ai_platform_network_process+0x36c>
 800b84a:	f04f 0800 	mov.w	r8, #0
 800b84e:	e014      	b.n	800b87a <ai_platform_network_process+0x33a>
 800b850:	6882      	ldr	r2, [r0, #8]
 800b852:	68c5      	ldr	r5, [r0, #12]
 800b854:	6863      	ldr	r3, [r4, #4]
 800b856:	1b52      	subs	r2, r2, r5
 800b858:	4413      	add	r3, r2
 800b85a:	6083      	str	r3, [r0, #8]
 800b85c:	698b      	ldr	r3, [r1, #24]
 800b85e:	6862      	ldr	r2, [r4, #4]
 800b860:	60da      	str	r2, [r3, #12]
 800b862:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800b866:	f859 200a 	ldr.w	r2, [r9, sl]
 800b86a:	440b      	add	r3, r1
 800b86c:	4293      	cmp	r3, r2
 800b86e:	bf24      	itt	cs
 800b870:	68e3      	ldrcs	r3, [r4, #12]
 800b872:	1ad3      	subcs	r3, r2, r3
 800b874:	6063      	str	r3, [r4, #4]
 800b876:	f108 0801 	add.w	r8, r8, #1
 800b87a:	8833      	ldrh	r3, [r6, #0]
 800b87c:	4543      	cmp	r3, r8
 800b87e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800b882:	d913      	bls.n	800b8ac <ai_platform_network_process+0x36c>
 800b884:	6873      	ldr	r3, [r6, #4]
 800b886:	b18b      	cbz	r3, 800b8ac <ai_platform_network_process+0x36c>
 800b888:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800b88c:	b171      	cbz	r1, 800b8ac <ai_platform_network_process+0x36c>
 800b88e:	6988      	ldr	r0, [r1, #24]
 800b890:	68b2      	ldr	r2, [r6, #8]
 800b892:	6803      	ldr	r3, [r0, #0]
 800b894:	f8d2 9000 	ldr.w	r9, [r2]
 800b898:	009d      	lsls	r5, r3, #2
 800b89a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800b89e:	d5d7      	bpl.n	800b850 <ai_platform_network_process+0x310>
 800b8a0:	6881      	ldr	r1, [r0, #8]
 800b8a2:	68a2      	ldr	r2, [r4, #8]
 800b8a4:	6860      	ldr	r0, [r4, #4]
 800b8a6:	f001 fb15 	bl	800ced4 <st_int8_copy>
 800b8aa:	e7da      	b.n	800b862 <ai_platform_network_process+0x322>
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	f000 f8e7 	bl	800ba80 <ai_layers_forward_all>
 800b8b2:	2f00      	cmp	r7, #0
 800b8b4:	d03d      	beq.n	800b932 <ai_platform_network_process+0x3f2>
 800b8b6:	2400      	movs	r4, #0
 800b8b8:	e016      	b.n	800b8e8 <ai_platform_network_process+0x3a8>
 800b8ba:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800b8be:	f859 100a 	ldr.w	r1, [r9, sl]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	428b      	cmp	r3, r1
 800b8c6:	bf24      	itt	cs
 800b8c8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800b8cc:	1acb      	subcs	r3, r1, r3
 800b8ce:	f8c8 3004 	str.w	r3, [r8, #4]
 800b8d2:	6981      	ldr	r1, [r0, #24]
 800b8d4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b8d8:	1b52      	subs	r2, r2, r5
 800b8da:	4413      	add	r3, r2
 800b8dc:	608b      	str	r3, [r1, #8]
 800b8de:	6983      	ldr	r3, [r0, #24]
 800b8e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b8e4:	60da      	str	r2, [r3, #12]
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	883b      	ldrh	r3, [r7, #0]
 800b8ea:	42a3      	cmp	r3, r4
 800b8ec:	d921      	bls.n	800b932 <ai_platform_network_process+0x3f2>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	b1fb      	cbz	r3, 800b932 <ai_platform_network_process+0x3f2>
 800b8f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b8f6:	b1e0      	cbz	r0, 800b932 <ai_platform_network_process+0x3f2>
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	6983      	ldr	r3, [r0, #24]
 800b8fc:	f8d2 9000 	ldr.w	r9, [r2]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	0092      	lsls	r2, r2, #2
 800b904:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800b908:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800b90c:	d5d5      	bpl.n	800b8ba <ai_platform_network_process+0x37a>
 800b90e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800b912:	6898      	ldr	r0, [r3, #8]
 800b914:	f001 fade 	bl	800ced4 <st_int8_copy>
 800b918:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800b91c:	f859 200a 	ldr.w	r2, [r9, sl]
 800b920:	440b      	add	r3, r1
 800b922:	4293      	cmp	r3, r2
 800b924:	bf24      	itt	cs
 800b926:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800b92a:	1ad3      	subcs	r3, r2, r3
 800b92c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b930:	e7d9      	b.n	800b8e6 <ai_platform_network_process+0x3a6>
 800b932:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800b936:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800b93a:	3401      	adds	r4, #1
 800b93c:	b2a4      	uxth	r4, r4
 800b93e:	42a3      	cmp	r3, r4
 800b940:	f8ab 401a 	strh.w	r4, [fp, #26]
 800b944:	f63f af7f 	bhi.w	800b846 <ai_platform_network_process+0x306>
 800b948:	4620      	mov	r0, r4
 800b94a:	b005      	add	sp, #20
 800b94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b950:	2a01      	cmp	r2, #1
 800b952:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800b954:	d02a      	beq.n	800b9ac <ai_platform_network_process+0x46c>
 800b956:	f106 070c 	add.w	r7, r6, #12
 800b95a:	e76f      	b.n	800b83c <ai_platform_network_process+0x2fc>
 800b95c:	9d03      	ldr	r5, [sp, #12]
 800b95e:	e728      	b.n	800b7b2 <ai_platform_network_process+0x272>
 800b960:	9d03      	ldr	r5, [sp, #12]
 800b962:	2219      	movs	r2, #25
 800b964:	2112      	movs	r1, #18
 800b966:	f105 000c 	add.w	r0, r5, #12
 800b96a:	f000 f831 	bl	800b9d0 <core_set_error>
 800b96e:	2400      	movs	r4, #0
 800b970:	e726      	b.n	800b7c0 <ai_platform_network_process+0x280>
 800b972:	9d03      	ldr	r5, [sp, #12]
 800b974:	4604      	mov	r4, r0
 800b976:	2221      	movs	r2, #33	; 0x21
 800b978:	2112      	movs	r1, #18
 800b97a:	f105 000c 	add.w	r0, r5, #12
 800b97e:	f000 f827 	bl	800b9d0 <core_set_error>
 800b982:	e71d      	b.n	800b7c0 <ai_platform_network_process+0x280>
 800b984:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b988:	832b      	strh	r3, [r5, #24]
 800b98a:	e752      	b.n	800b832 <ai_platform_network_process+0x2f2>
 800b98c:	2217      	movs	r2, #23
 800b98e:	2113      	movs	r1, #19
 800b990:	f105 000c 	add.w	r0, r5, #12
 800b994:	f000 f81c 	bl	800b9d0 <core_set_error>
 800b998:	2400      	movs	r4, #0
 800b99a:	e711      	b.n	800b7c0 <ai_platform_network_process+0x280>
 800b99c:	2219      	movs	r2, #25
 800b99e:	2113      	movs	r1, #19
 800b9a0:	f105 000c 	add.w	r0, r5, #12
 800b9a4:	f000 f814 	bl	800b9d0 <core_set_error>
 800b9a8:	2400      	movs	r4, #0
 800b9aa:	e709      	b.n	800b7c0 <ai_platform_network_process+0x280>
 800b9ac:	2700      	movs	r7, #0
 800b9ae:	e745      	b.n	800b83c <ai_platform_network_process+0x2fc>
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	2221      	movs	r2, #33	; 0x21
 800b9b4:	2113      	movs	r1, #19
 800b9b6:	f105 000c 	add.w	r0, r5, #12
 800b9ba:	f000 f809 	bl	800b9d0 <core_set_error>
 800b9be:	e6ff      	b.n	800b7c0 <ai_platform_network_process+0x280>

0800b9c0 <core_init>:
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	4770      	bx	lr

0800b9c4 <core_get_error>:
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	6800      	ldr	r0, [r0, #0]
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop

0800b9d0 <core_set_error>:
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	7800      	ldrb	r0, [r0, #0]
 800b9d4:	b108      	cbz	r0, 800b9da <core_set_error+0xa>
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	4770      	bx	lr
 800b9da:	7019      	strb	r1, [r3, #0]
 800b9dc:	6819      	ldr	r1, [r3, #0]
 800b9de:	f362 211f 	bfi	r1, r2, #8, #24
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	6019      	str	r1, [r3, #0]
 800b9e6:	4770      	bx	lr

0800b9e8 <ai_check_custom_types>:
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	4b13      	ldr	r3, [pc, #76]	; (800ba38 <ai_check_custom_types+0x50>)
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	b118      	cbz	r0, 800b9f8 <ai_check_custom_types+0x10>
 800b9f0:	7803      	ldrb	r3, [r0, #0]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d002      	beq.n	800b9fc <ai_check_custom_types+0x14>
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	b002      	add	sp, #8
 800b9fa:	4770      	bx	lr
 800b9fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d004      	beq.n	800ba0e <ai_check_custom_types+0x26>
 800ba04:	2001      	movs	r0, #1
 800ba06:	f080 0001 	eor.w	r0, r0, #1
 800ba0a:	b002      	add	sp, #8
 800ba0c:	4770      	bx	lr
 800ba0e:	7842      	ldrb	r2, [r0, #1]
 800ba10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	f100 0001 	add.w	r0, r0, #1
 800ba1a:	d1f3      	bne.n	800ba04 <ai_check_custom_types+0x1c>
 800ba1c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ba20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d1ed      	bne.n	800ba04 <ai_check_custom_types+0x1c>
 800ba28:	7842      	ldrb	r2, [r0, #1]
 800ba2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d1e8      	bne.n	800ba04 <ai_check_custom_types+0x1c>
 800ba32:	2000      	movs	r0, #0
 800ba34:	e7e7      	b.n	800ba06 <ai_check_custom_types+0x1e>
 800ba36:	bf00      	nop
 800ba38:	84048403 	.word	0x84048403

0800ba3c <ai_layers_init_all>:
 800ba3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba3e:	2100      	movs	r1, #0
 800ba40:	b143      	cbz	r3, 800ba54 <ai_layers_init_all+0x18>
 800ba42:	691a      	ldr	r2, [r3, #16]
 800ba44:	60d8      	str	r0, [r3, #12]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	f101 0101 	add.w	r1, r1, #1
 800ba4c:	d002      	beq.n	800ba54 <ai_layers_init_all+0x18>
 800ba4e:	b10a      	cbz	r2, 800ba54 <ai_layers_init_all+0x18>
 800ba50:	4613      	mov	r3, r2
 800ba52:	e7f5      	b.n	800ba40 <ai_layers_init_all+0x4>
 800ba54:	4608      	mov	r0, r1
 800ba56:	4770      	bx	lr

0800ba58 <ai_layers_post_init_all>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	b16c      	cbz	r4, 800ba7c <ai_layers_post_init_all+0x24>
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	07db      	lsls	r3, r3, #31
 800ba64:	d504      	bpl.n	800ba70 <ai_layers_post_init_all+0x18>
 800ba66:	6a23      	ldr	r3, [r4, #32]
 800ba68:	4620      	mov	r0, r4
 800ba6a:	b10b      	cbz	r3, 800ba70 <ai_layers_post_init_all+0x18>
 800ba6c:	4798      	blx	r3
 800ba6e:	3501      	adds	r5, #1
 800ba70:	6923      	ldr	r3, [r4, #16]
 800ba72:	42a3      	cmp	r3, r4
 800ba74:	d002      	beq.n	800ba7c <ai_layers_post_init_all+0x24>
 800ba76:	b10b      	cbz	r3, 800ba7c <ai_layers_post_init_all+0x24>
 800ba78:	461c      	mov	r4, r3
 800ba7a:	e7f0      	b.n	800ba5e <ai_layers_post_init_all+0x6>
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}

0800ba80 <ai_layers_forward_all>:
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800ba88:	4604      	mov	r4, r0
 800ba8a:	f1b8 0f00 	cmp.w	r8, #0
 800ba8e:	d02b      	beq.n	800bae8 <ai_layers_forward_all+0x68>
 800ba90:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ba92:	63c1      	str	r1, [r0, #60]	; 0x3c
 800ba94:	b321      	cbz	r1, 800bae0 <ai_layers_forward_all+0x60>
 800ba96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba98:	2001      	movs	r0, #1
 800ba9a:	47c0      	blx	r8
 800ba9c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800ba9e:	b1fe      	cbz	r6, 800bae0 <ai_layers_forward_all+0x60>
 800baa0:	2700      	movs	r7, #0
 800baa2:	4631      	mov	r1, r6
 800baa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800baa6:	2002      	movs	r0, #2
 800baa8:	47c0      	blx	r8
 800baaa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800baac:	4628      	mov	r0, r5
 800baae:	696b      	ldr	r3, [r5, #20]
 800bab0:	4798      	blx	r3
 800bab2:	692e      	ldr	r6, [r5, #16]
 800bab4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bab6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bab8:	42b5      	cmp	r5, r6
 800baba:	f04f 0003 	mov.w	r0, #3
 800babe:	d007      	beq.n	800bad0 <ai_layers_forward_all+0x50>
 800bac0:	47c0      	blx	r8
 800bac2:	3701      	adds	r7, #1
 800bac4:	63e6      	str	r6, [r4, #60]	; 0x3c
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	d1eb      	bne.n	800baa2 <ai_layers_forward_all+0x22>
 800baca:	4638      	mov	r0, r7
 800bacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad0:	2003      	movs	r0, #3
 800bad2:	47c0      	blx	r8
 800bad4:	2300      	movs	r3, #0
 800bad6:	3701      	adds	r7, #1
 800bad8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bada:	4638      	mov	r0, r7
 800badc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae0:	2700      	movs	r7, #0
 800bae2:	4638      	mov	r0, r7
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae8:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800baea:	63c5      	str	r5, [r0, #60]	; 0x3c
 800baec:	2d00      	cmp	r5, #0
 800baee:	d0f7      	beq.n	800bae0 <ai_layers_forward_all+0x60>
 800baf0:	4647      	mov	r7, r8
 800baf2:	696b      	ldr	r3, [r5, #20]
 800baf4:	4628      	mov	r0, r5
 800baf6:	4798      	blx	r3
 800baf8:	462b      	mov	r3, r5
 800bafa:	692d      	ldr	r5, [r5, #16]
 800bafc:	429d      	cmp	r5, r3
 800bafe:	d004      	beq.n	800bb0a <ai_layers_forward_all+0x8a>
 800bb00:	63e5      	str	r5, [r4, #60]	; 0x3c
 800bb02:	3701      	adds	r7, #1
 800bb04:	2d00      	cmp	r5, #0
 800bb06:	d1f4      	bne.n	800baf2 <ai_layers_forward_all+0x72>
 800bb08:	e7df      	b.n	800baca <ai_layers_forward_all+0x4a>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bb0e:	3701      	adds	r7, #1
 800bb10:	e7db      	b.n	800baca <ai_layers_forward_all+0x4a>
 800bb12:	bf00      	nop

0800bb14 <forward_conv2d_if32of32wf32>:
 800bb14:	6983      	ldr	r3, [r0, #24]
 800bb16:	881a      	ldrh	r2, [r3, #0]
 800bb18:	2a00      	cmp	r2, #0
 800bb1a:	f000 80af 	beq.w	800bc7c <forward_conv2d_if32of32wf32+0x168>
 800bb1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb22:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800bb26:	f8de 3004 	ldr.w	r3, [lr, #4]
 800bb2a:	b0a3      	sub	sp, #140	; 0x8c
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	b103      	cbz	r3, 800bb32 <forward_conv2d_if32of32wf32+0x1e>
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2a01      	cmp	r2, #1
 800bb34:	f000 80dc 	beq.w	800bcf0 <forward_conv2d_if32of32wf32+0x1dc>
 800bb38:	f8de 0010 	ldr.w	r0, [lr, #16]
 800bb3c:	b100      	cbz	r0, 800bb40 <forward_conv2d_if32of32wf32+0x2c>
 800bb3e:	6800      	ldr	r0, [r0, #0]
 800bb40:	2a02      	cmp	r2, #2
 800bb42:	f000 809d 	beq.w	800bc80 <forward_conv2d_if32of32wf32+0x16c>
 800bb46:	f8de 501c 	ldr.w	r5, [lr, #28]
 800bb4a:	2d00      	cmp	r5, #0
 800bb4c:	f000 80c9 	beq.w	800bce2 <forward_conv2d_if32of32wf32+0x1ce>
 800bb50:	f8be 1018 	ldrh.w	r1, [lr, #24]
 800bb54:	682c      	ldr	r4, [r5, #0]
 800bb56:	2901      	cmp	r1, #1
 800bb58:	f240 80c5 	bls.w	800bce6 <forward_conv2d_if32of32wf32+0x1d2>
 800bb5c:	686d      	ldr	r5, [r5, #4]
 800bb5e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800bb68:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800bb6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb70:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb76:	9315      	str	r3, [sp, #84]	; 0x54
 800bb78:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bb7c:	9316      	str	r3, [sp, #88]	; 0x58
 800bb7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bb82:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb88:	9318      	str	r3, [sp, #96]	; 0x60
 800bb8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb8e:	9319      	str	r3, [sp, #100]	; 0x64
 800bb90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb92:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800bb94:	931a      	str	r3, [sp, #104]	; 0x68
 800bb96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bb98:	68e1      	ldr	r1, [r4, #12]
 800bb9a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800bb9e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bba0:	e9d7 a40c 	ldrd	sl, r4, [r7, #48]	; 0x30
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	9320      	str	r3, [sp, #128]	; 0x80
 800bba8:	8833      	ldrh	r3, [r6, #0]
 800bbaa:	931c      	str	r3, [sp, #112]	; 0x70
 800bbac:	88b3      	ldrh	r3, [r6, #4]
 800bbae:	931d      	str	r3, [sp, #116]	; 0x74
 800bbb0:	fa1f f38a 	uxth.w	r3, sl
 800bbb4:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 800bbb8:	931e      	str	r3, [sp, #120]	; 0x78
 800bbba:	b2a3      	uxth	r3, r4
 800bbbc:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800bbc0:	931f      	str	r3, [sp, #124]	; 0x7c
 800bbc2:	b10d      	cbz	r5, 800bbc8 <forward_conv2d_if32of32wf32+0xb4>
 800bbc4:	69ad      	ldr	r5, [r5, #24]
 800bbc6:	68ad      	ldr	r5, [r5, #8]
 800bbc8:	6980      	ldr	r0, [r0, #24]
 800bbca:	b2a4      	uxth	r4, r4
 800bbcc:	fa1f f38a 	uxth.w	r3, sl
 800bbd0:	3c01      	subs	r4, #1
 800bbd2:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800bbd6:	1e70      	subs	r0, r6, #1
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	fb00 6404 	mla	r4, r0, r4, r6
 800bbde:	1e78      	subs	r0, r7, #1
 800bbe0:	fb00 7303 	mla	r3, r0, r3, r7
 800bbe4:	2a03      	cmp	r2, #3
 800bbe6:	9314      	str	r3, [sp, #80]	; 0x50
 800bbe8:	d07f      	beq.n	800bcea <forward_conv2d_if32of32wf32+0x1d6>
 800bbea:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d049      	beq.n	800bc86 <forward_conv2d_if32of32wf32+0x172>
 800bbf2:	f8d3 8000 	ldr.w	r8, [r3]
 800bbf6:	f1b8 0f00 	cmp.w	r8, #0
 800bbfa:	d003      	beq.n	800bc04 <forward_conv2d_if32of32wf32+0xf0>
 800bbfc:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800bc00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800bc04:	6858      	ldr	r0, [r3, #4]
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d03e      	beq.n	800bc88 <forward_conv2d_if32of32wf32+0x174>
 800bc0a:	6983      	ldr	r3, [r0, #24]
 800bc0c:	f8dc e000 	ldr.w	lr, [ip]
 800bc10:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800bc14:	f3ce 4243 	ubfx	r2, lr, #17, #4
 800bc18:	f46f 7388 	mvn.w	r3, #272	; 0x110
 800bc1c:	4113      	asrs	r3, r2
 800bc1e:	07db      	lsls	r3, r3, #31
 800bc20:	d553      	bpl.n	800bcca <forward_conv2d_if32of32wf32+0x1b6>
 800bc22:	f1b9 0f00 	cmp.w	r9, #0
 800bc26:	bf18      	it	ne
 800bc28:	4649      	movne	r1, r9
 800bc2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc2c:	930c      	str	r3, [sp, #48]	; 0x30
 800bc2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc30:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bc34:	930a      	str	r3, [sp, #40]	; 0x28
 800bc36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc38:	940d      	str	r4, [sp, #52]	; 0x34
 800bc3a:	e9cd 6308 	strd	r6, r3, [sp, #32]
 800bc3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc40:	9306      	str	r3, [sp, #24]
 800bc42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc44:	9305      	str	r3, [sp, #20]
 800bc46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc4c:	9303      	str	r3, [sp, #12]
 800bc4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc50:	9302      	str	r3, [sp, #8]
 800bc52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800bc56:	9707      	str	r7, [sp, #28]
 800bc58:	e9cd 8300 	strd	r8, r3, [sp]
 800bc5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bc5e:	9311      	str	r3, [sp, #68]	; 0x44
 800bc60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc62:	9310      	str	r3, [sp, #64]	; 0x40
 800bc64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc68:	460a      	mov	r2, r1
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	4651      	mov	r1, sl
 800bc6e:	4658      	mov	r0, fp
 800bc70:	940e      	str	r4, [sp, #56]	; 0x38
 800bc72:	f000 f997 	bl	800bfa4 <forward_lite_conv2d_if32of32wf32>
 800bc76:	b023      	add	sp, #140	; 0x8c
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7c:	6853      	ldr	r3, [r2, #4]
 800bc7e:	deff      	udf	#255	; 0xff
 800bc80:	2300      	movs	r3, #0
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	deff      	udf	#255	; 0xff
 800bc86:	4698      	mov	r8, r3
 800bc88:	f8dc e000 	ldr.w	lr, [ip]
 800bc8c:	f46f 7088 	mvn.w	r0, #272	; 0x110
 800bc90:	f3ce 4343 	ubfx	r3, lr, #17, #4
 800bc94:	4118      	asrs	r0, r3
 800bc96:	f010 0001 	ands.w	r0, r0, #1
 800bc9a:	d1c6      	bne.n	800bc2a <forward_conv2d_if32of32wf32+0x116>
 800bc9c:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 800bca0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800bca4:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800bca8:	fa43 f30e 	asr.w	r3, r3, lr
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	d0bb      	beq.n	800bc2a <forward_conv2d_if32of32wf32+0x116>
 800bcb2:	4681      	mov	r9, r0
 800bcb4:	6980      	ldr	r0, [r0, #24]
 800bcb6:	9121      	str	r1, [sp, #132]	; 0x84
 800bcb8:	6840      	ldr	r0, [r0, #4]
 800bcba:	9001      	str	r0, [sp, #4]
 800bcbc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bcbe:	9000      	str	r0, [sp, #0]
 800bcc0:	4648      	mov	r0, r9
 800bcc2:	f000 fcfd 	bl	800c6c0 <lite_decompress_ilutof32>
 800bcc6:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bcc8:	e7ab      	b.n	800bc22 <forward_conv2d_if32of32wf32+0x10e>
 800bcca:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 800bcce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800bcd2:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800bcd6:	fa43 f30e 	asr.w	r3, r3, lr
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	2a00      	cmp	r2, #0
 800bcde:	d0a0      	beq.n	800bc22 <forward_conv2d_if32of32wf32+0x10e>
 800bce0:	e7e8      	b.n	800bcb4 <forward_conv2d_if32of32wf32+0x1a0>
 800bce2:	462c      	mov	r4, r5
 800bce4:	e73b      	b.n	800bb5e <forward_conv2d_if32of32wf32+0x4a>
 800bce6:	2500      	movs	r5, #0
 800bce8:	e739      	b.n	800bb5e <forward_conv2d_if32of32wf32+0x4a>
 800bcea:	2300      	movs	r3, #0
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	deff      	udf	#255	; 0xff
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	deff      	udf	#255	; 0xff
 800bcf6:	bf00      	nop

0800bcf8 <forward_dense>:
 800bcf8:	6982      	ldr	r2, [r0, #24]
 800bcfa:	8813      	ldrh	r3, [r2, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d043      	beq.n	800bd88 <forward_dense+0x90>
 800bd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd04:	6855      	ldr	r5, [r2, #4]
 800bd06:	6869      	ldr	r1, [r5, #4]
 800bd08:	b08e      	sub	sp, #56	; 0x38
 800bd0a:	b101      	cbz	r1, 800bd0e <forward_dense+0x16>
 800bd0c:	6809      	ldr	r1, [r1, #0]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d069      	beq.n	800bde6 <forward_dense+0xee>
 800bd12:	692a      	ldr	r2, [r5, #16]
 800bd14:	b102      	cbz	r2, 800bd18 <forward_dense+0x20>
 800bd16:	6812      	ldr	r2, [r2, #0]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d061      	beq.n	800bde0 <forward_dense+0xe8>
 800bd1c:	69ec      	ldr	r4, [r5, #28]
 800bd1e:	2c00      	cmp	r4, #0
 800bd20:	d057      	beq.n	800bdd2 <forward_dense+0xda>
 800bd22:	8b2e      	ldrh	r6, [r5, #24]
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	2e01      	cmp	r6, #1
 800bd28:	d955      	bls.n	800bdd6 <forward_dense+0xde>
 800bd2a:	6864      	ldr	r4, [r4, #4]
 800bd2c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800bd30:	68cf      	ldr	r7, [r1, #12]
 800bd32:	68d0      	ldr	r0, [r2, #12]
 800bd34:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800bd38:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800bd3c:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800bd40:	f8d9 0000 	ldr.w	r0, [r9]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	fb06 f807 	mul.w	r8, r6, r7
 800bd4a:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 800bd4e:	d044      	beq.n	800bdda <forward_dense+0xe2>
 800bd50:	6aad      	ldr	r5, [r5, #40]	; 0x28
 800bd52:	b11d      	cbz	r5, 800bd5c <forward_dense+0x64>
 800bd54:	682d      	ldr	r5, [r5, #0]
 800bd56:	b10d      	cbz	r5, 800bd5c <forward_dense+0x64>
 800bd58:	69ab      	ldr	r3, [r5, #24]
 800bd5a:	689d      	ldr	r5, [r3, #8]
 800bd5c:	6992      	ldr	r2, [r2, #24]
 800bd5e:	698b      	ldr	r3, [r1, #24]
 800bd60:	6890      	ldr	r0, [r2, #8]
 800bd62:	6899      	ldr	r1, [r3, #8]
 800bd64:	b10c      	cbz	r4, 800bd6a <forward_dense+0x72>
 800bd66:	69a3      	ldr	r3, [r4, #24]
 800bd68:	689c      	ldr	r4, [r3, #8]
 800bd6a:	4b20      	ldr	r3, [pc, #128]	; (800bdec <forward_dense+0xf4>)
 800bd6c:	459c      	cmp	ip, r3
 800bd6e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800bd72:	d023      	beq.n	800bdbc <forward_dense+0xc4>
 800bd74:	4e1e      	ldr	r6, [pc, #120]	; (800bdf0 <forward_dense+0xf8>)
 800bd76:	45b4      	cmp	ip, r6
 800bd78:	d015      	beq.n	800bda6 <forward_dense+0xae>
 800bd7a:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 800bd7e:	459c      	cmp	ip, r3
 800bd80:	d004      	beq.n	800bd8c <forward_dense+0x94>
 800bd82:	b00e      	add	sp, #56	; 0x38
 800bd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	deff      	udf	#255	; 0xff
 800bd8c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800bd90:	a807      	add	r0, sp, #28
 800bd92:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 800bd96:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 800bd9a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd9c:	f000 fcea 	bl	800c774 <forward_lite_dense_if32of32wf32>
 800bda0:	b00e      	add	sp, #56	; 0x38
 800bda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda6:	e9cd e803 	strd	lr, r8, [sp, #12]
 800bdaa:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800bdae:	9500      	str	r5, [sp, #0]
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	f000 fe39 	bl	800ca28 <forward_lite_dense_if32of32wf32_lut4>
 800bdb6:	b00e      	add	sp, #56	; 0x38
 800bdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdbc:	e9cd e803 	strd	lr, r8, [sp, #12]
 800bdc0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800bdc4:	9500      	str	r5, [sp, #0]
 800bdc6:	464b      	mov	r3, r9
 800bdc8:	f000 ff56 	bl	800cc78 <forward_lite_dense_if32of32wf32_lut8>
 800bdcc:	b00e      	add	sp, #56	; 0x38
 800bdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	e7aa      	b.n	800bd2c <forward_dense+0x34>
 800bdd6:	2400      	movs	r4, #0
 800bdd8:	e7a8      	b.n	800bd2c <forward_dense+0x34>
 800bdda:	2300      	movs	r3, #0
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	deff      	udf	#255	; 0xff
 800bde0:	2300      	movs	r3, #0
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	deff      	udf	#255	; 0xff
 800bde6:	2300      	movs	r3, #0
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	deff      	udf	#255	; 0xff
 800bdec:	01d01040 	.word	0x01d01040
 800bdf0:	01e81040 	.word	0x01e81040

0800bdf4 <forward_relu>:
 800bdf4:	6982      	ldr	r2, [r0, #24]
 800bdf6:	8813      	ldrh	r3, [r2, #0]
 800bdf8:	b323      	cbz	r3, 800be44 <forward_relu+0x50>
 800bdfa:	6851      	ldr	r1, [r2, #4]
 800bdfc:	684a      	ldr	r2, [r1, #4]
 800bdfe:	b102      	cbz	r2, 800be02 <forward_relu+0xe>
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	2b01      	cmp	r3, #1
 800be04:	f000 808d 	beq.w	800bf22 <forward_relu+0x12e>
 800be08:	b470      	push	{r4, r5, r6}
 800be0a:	6909      	ldr	r1, [r1, #16]
 800be0c:	b101      	cbz	r1, 800be10 <forward_relu+0x1c>
 800be0e:	6809      	ldr	r1, [r1, #0]
 800be10:	69c6      	ldr	r6, [r0, #28]
 800be12:	b1ce      	cbz	r6, 800be48 <forward_relu+0x54>
 800be14:	6873      	ldr	r3, [r6, #4]
 800be16:	6988      	ldr	r0, [r1, #24]
 800be18:	6991      	ldr	r1, [r2, #24]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d044      	beq.n	800bea8 <forward_relu+0xb4>
 800be1e:	6893      	ldr	r3, [r2, #8]
 800be20:	6880      	ldr	r0, [r0, #8]
 800be22:	6889      	ldr	r1, [r1, #8]
 800be24:	0a1b      	lsrs	r3, r3, #8
 800be26:	d073      	beq.n	800bf10 <forward_relu+0x11c>
 800be28:	68d5      	ldr	r5, [r2, #12]
 800be2a:	2201      	movs	r2, #1
 800be2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800be30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800be34:	429d      	cmp	r5, r3
 800be36:	fb04 f202 	mul.w	r2, r4, r2
 800be3a:	d1f9      	bne.n	800be30 <forward_relu+0x3c>
 800be3c:	68b3      	ldr	r3, [r6, #8]
 800be3e:	bc70      	pop	{r4, r5, r6}
 800be40:	f000 bbc0 	b.w	800c5c4 <forward_lite_nl_relu_generic_if32of32_kernel>
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	deff      	udf	#255	; 0xff
 800be48:	6893      	ldr	r3, [r2, #8]
 800be4a:	6989      	ldr	r1, [r1, #24]
 800be4c:	6990      	ldr	r0, [r2, #24]
 800be4e:	6889      	ldr	r1, [r1, #8]
 800be50:	6884      	ldr	r4, [r0, #8]
 800be52:	0a1b      	lsrs	r3, r3, #8
 800be54:	d05e      	beq.n	800bf14 <forward_relu+0x120>
 800be56:	68d5      	ldr	r5, [r2, #12]
 800be58:	2201      	movs	r2, #1
 800be5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800be5e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800be62:	429d      	cmp	r5, r3
 800be64:	fb00 f202 	mul.w	r2, r0, r2
 800be68:	d1f9      	bne.n	800be5e <forward_relu+0x6a>
 800be6a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800be6e:	3b01      	subs	r3, #1
 800be70:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800be74:	4294      	cmp	r4, r2
 800be76:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800be7a:	d813      	bhi.n	800bea4 <forward_relu+0xb0>
 800be7c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800bf28 <forward_relu+0x134>
 800be80:	3204      	adds	r2, #4
 800be82:	3104      	adds	r1, #4
 800be84:	4613      	mov	r3, r2
 800be86:	ed72 7a01 	vldmdb	r2!, {s15}
 800be8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be92:	f1a3 0308 	sub.w	r3, r3, #8
 800be96:	bfb8      	it	lt
 800be98:	eef0 7a47 	vmovlt.f32	s15, s14
 800be9c:	429c      	cmp	r4, r3
 800be9e:	ed61 7a01 	vstmdb	r1!, {s15}
 800bea2:	d9ef      	bls.n	800be84 <forward_relu+0x90>
 800bea4:	bc70      	pop	{r4, r5, r6}
 800bea6:	4770      	bx	lr
 800bea8:	688c      	ldr	r4, [r1, #8]
 800beaa:	6891      	ldr	r1, [r2, #8]
 800beac:	6880      	ldr	r0, [r0, #8]
 800beae:	0a09      	lsrs	r1, r1, #8
 800beb0:	d032      	beq.n	800bf18 <forward_relu+0x124>
 800beb2:	68d5      	ldr	r5, [r2, #12]
 800beb4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800beb8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bebc:	4295      	cmp	r5, r2
 800bebe:	fb01 f303 	mul.w	r3, r1, r3
 800bec2:	d1f9      	bne.n	800beb8 <forward_relu+0xc4>
 800bec4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800bec8:	3a01      	subs	r2, #1
 800beca:	68b1      	ldr	r1, [r6, #8]
 800becc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bed0:	429c      	cmp	r4, r3
 800bed2:	ed91 7a00 	vldr	s14, [r1]
 800bed6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800beda:	d8e3      	bhi.n	800bea4 <forward_relu+0xb0>
 800bedc:	2500      	movs	r5, #0
 800bede:	3304      	adds	r3, #4
 800bee0:	1d02      	adds	r2, r0, #4
 800bee2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800beea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beee:	f1a3 0104 	sub.w	r1, r3, #4
 800bef2:	f1a3 0308 	sub.w	r3, r3, #8
 800bef6:	d405      	bmi.n	800bf04 <forward_relu+0x110>
 800bef8:	429c      	cmp	r4, r3
 800befa:	f842 5d04 	str.w	r5, [r2, #-4]!
 800befe:	d8d1      	bhi.n	800bea4 <forward_relu+0xb0>
 800bf00:	460b      	mov	r3, r1
 800bf02:	e7ee      	b.n	800bee2 <forward_relu+0xee>
 800bf04:	429c      	cmp	r4, r3
 800bf06:	ed62 7a01 	vstmdb	r2!, {s15}
 800bf0a:	d8cb      	bhi.n	800bea4 <forward_relu+0xb0>
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	e7e8      	b.n	800bee2 <forward_relu+0xee>
 800bf10:	2201      	movs	r2, #1
 800bf12:	e793      	b.n	800be3c <forward_relu+0x48>
 800bf14:	4622      	mov	r2, r4
 800bf16:	e7b1      	b.n	800be7c <forward_relu+0x88>
 800bf18:	68b2      	ldr	r2, [r6, #8]
 800bf1a:	4623      	mov	r3, r4
 800bf1c:	ed92 7a00 	vldr	s14, [r2]
 800bf20:	e7dc      	b.n	800bedc <forward_relu+0xe8>
 800bf22:	2300      	movs	r3, #0
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	deff      	udf	#255	; 0xff
 800bf28:	00000000 	.word	0x00000000

0800bf2c <forward_sm>:
 800bf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf30:	6982      	ldr	r2, [r0, #24]
 800bf32:	8813      	ldrh	r3, [r2, #0]
 800bf34:	b383      	cbz	r3, 800bf98 <forward_sm+0x6c>
 800bf36:	6852      	ldr	r2, [r2, #4]
 800bf38:	6855      	ldr	r5, [r2, #4]
 800bf3a:	b105      	cbz	r5, 800bf3e <forward_sm+0x12>
 800bf3c:	682d      	ldr	r5, [r5, #0]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d029      	beq.n	800bf96 <forward_sm+0x6a>
 800bf42:	6913      	ldr	r3, [r2, #16]
 800bf44:	b363      	cbz	r3, 800bfa0 <forward_sm+0x74>
 800bf46:	681e      	ldr	r6, [r3, #0]
 800bf48:	68a9      	ldr	r1, [r5, #8]
 800bf4a:	68ec      	ldr	r4, [r5, #12]
 800bf4c:	68f3      	ldr	r3, [r6, #12]
 800bf4e:	6867      	ldr	r7, [r4, #4]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	0a09      	lsrs	r1, r1, #8
 800bf54:	d022      	beq.n	800bf9c <forward_sm+0x70>
 800bf56:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 800bf60:	428c      	cmp	r4, r1
 800bf62:	fb00 f303 	mul.w	r3, r0, r3
 800bf66:	d1f9      	bne.n	800bf5c <forward_sm+0x30>
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	69a8      	ldr	r0, [r5, #24]
 800bf6c:	69b1      	ldr	r1, [r6, #24]
 800bf6e:	6884      	ldr	r4, [r0, #8]
 800bf70:	688e      	ldr	r6, [r1, #8]
 800bf72:	18e5      	adds	r5, r4, r3
 800bf74:	42ac      	cmp	r4, r5
 800bf76:	d20c      	bcs.n	800bf92 <forward_sm+0x66>
 800bf78:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800bf7c:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800bf80:	4621      	mov	r1, r4
 800bf82:	4630      	mov	r0, r6
 800bf84:	463a      	mov	r2, r7
 800bf86:	444c      	add	r4, r9
 800bf88:	f000 fad2 	bl	800c530 <forward_lite_nl_softmax_if32of32_kernel>
 800bf8c:	42a5      	cmp	r5, r4
 800bf8e:	4446      	add	r6, r8
 800bf90:	d8f6      	bhi.n	800bf80 <forward_sm+0x54>
 800bf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf96:	2300      	movs	r3, #0
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	deff      	udf	#255	; 0xff
 800bf9c:	2304      	movs	r3, #4
 800bf9e:	e7e4      	b.n	800bf6a <forward_sm+0x3e>
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	deff      	udf	#255	; 0xff

0800bfa4 <forward_lite_conv2d_if32of32wf32>:
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	ed2d 8b02 	vpush	{d8}
 800bfac:	b0a1      	sub	sp, #132	; 0x84
 800bfae:	4686      	mov	lr, r0
 800bfb0:	910c      	str	r1, [sp, #48]	; 0x30
 800bfb2:	f8bd 10d8 	ldrh.w	r1, [sp, #216]	; 0xd8
 800bfb6:	901e      	str	r0, [sp, #120]	; 0x78
 800bfb8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800bfba:	f8bd 40d4 	ldrh.w	r4, [sp, #212]	; 0xd4
 800bfbe:	f8bd 50dc 	ldrh.w	r5, [sp, #220]	; 0xdc
 800bfc2:	f8bd 60e0 	ldrh.w	r6, [sp, #224]	; 0xe0
 800bfc6:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfc8:	424f      	negs	r7, r1
 800bfca:	4694      	mov	ip, r2
 800bfcc:	930e      	str	r3, [sp, #56]	; 0x38
 800bfce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800bfd0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800bfd2:	9418      	str	r4, [sp, #96]	; 0x60
 800bfd4:	9508      	str	r5, [sp, #32]
 800bfd6:	961f      	str	r6, [sp, #124]	; 0x7c
 800bfd8:	9711      	str	r7, [sp, #68]	; 0x44
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f000 8177 	beq.w	800c2ce <forward_lite_conv2d_if32of32wf32+0x32a>
 800bfe0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800bfe2:	910d      	str	r1, [sp, #52]	; 0x34
 800bfe4:	fb00 f303 	mul.w	r3, r0, r3
 800bfe8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800bfea:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800bfec:	ed9f 8abf 	vldr	s16, [pc, #764]	; 800c2ec <forward_lite_conv2d_if32of32wf32+0x348>
 800bff0:	fb00 f303 	mul.w	r3, r0, r3
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bff8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800bffa:	fb01 f102 	mul.w	r1, r1, r2
 800bffe:	fb00 f303 	mul.w	r3, r0, r3
 800c002:	0092      	lsls	r2, r2, #2
 800c004:	9205      	str	r2, [sp, #20]
 800c006:	fb06 f203 	mul.w	r2, r6, r3
 800c00a:	fb07 f303 	mul.w	r3, r7, r3
 800c00e:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800c012:	9312      	str	r3, [sp, #72]	; 0x48
 800c014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c016:	fb05 f303 	mul.w	r3, r5, r3
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	9306      	str	r3, [sp, #24]
 800c01e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c020:	0089      	lsls	r1, r1, #2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	911a      	str	r1, [sp, #104]	; 0x68
 800c026:	4261      	negs	r1, r4
 800c028:	9307      	str	r3, [sp, #28]
 800c02a:	fb03 f301 	mul.w	r3, r3, r1
 800c02e:	0094      	lsls	r4, r2, #2
 800c030:	9316      	str	r3, [sp, #88]	; 0x58
 800c032:	f10c 4278 	add.w	r2, ip, #4160749568	; 0xf8000000
 800c036:	2300      	movs	r3, #0
 800c038:	9115      	str	r1, [sp, #84]	; 0x54
 800c03a:	941c      	str	r4, [sp, #112]	; 0x70
 800c03c:	9219      	str	r2, [sp, #100]	; 0x64
 800c03e:	9314      	str	r3, [sp, #80]	; 0x50
 800c040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c042:	2b00      	cmp	r3, #0
 800c044:	f2c0 8270 	blt.w	800c528 <forward_lite_conv2d_if32of32wf32+0x584>
 800c048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c04a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c04c:	2300      	movs	r3, #0
 800c04e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c050:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c052:	440a      	add	r2, r1
 800c054:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800c056:	428a      	cmp	r2, r1
 800c058:	bf94      	ite	ls
 800c05a:	ebc3 0b02 	rsbls	fp, r3, r2
 800c05e:	ebc3 0b01 	rsbhi	fp, r3, r1
 800c062:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c064:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c066:	2a00      	cmp	r2, #0
 800c068:	f000 8142 	beq.w	800c2f0 <forward_lite_conv2d_if32of32wf32+0x34c>
 800c06c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c06e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800c072:	f0c0 813d 	bcc.w	800c2f0 <forward_lite_conv2d_if32of32wf32+0x34c>
 800c076:	9a05      	ldr	r2, [sp, #20]
 800c078:	188a      	adds	r2, r1, r2
 800c07a:	4291      	cmp	r1, r2
 800c07c:	921b      	str	r2, [sp, #108]	; 0x6c
 800c07e:	f080 8110 	bcs.w	800c2a2 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800c082:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800c084:	fb02 f303 	mul.w	r3, r2, r3
 800c088:	9309      	str	r3, [sp, #36]	; 0x24
 800c08a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08e:	4413      	add	r3, r2
 800c090:	931d      	str	r3, [sp, #116]	; 0x74
 800c092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c094:	9310      	str	r3, [sp, #64]	; 0x40
 800c096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c098:	9313      	str	r3, [sp, #76]	; 0x4c
 800c09a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c09c:	930a      	str	r3, [sp, #40]	; 0x28
 800c09e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800c0a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0a4:	f000 ff16 	bl	800ced4 <st_int8_copy>
 800c0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 811a 	beq.w	800c2e4 <forward_lite_conv2d_if32of32wf32+0x340>
 800c0b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0b2:	ecf3 1a01 	vldmia	r3!, {s3}
 800c0b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0b8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 80e6 	beq.w	800c28c <forward_lite_conv2d_if32of32wf32+0x2e8>
 800c0c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0c6:	9302      	str	r3, [sp, #8]
 800c0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0ca:	9303      	str	r3, [sp, #12]
 800c0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	9b01      	ldr	r3, [sp, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f2c0 80fe 	blt.w	800c2d8 <forward_lite_conv2d_if32of32wf32+0x334>
 800c0dc:	9902      	ldr	r1, [sp, #8]
 800c0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0e0:	2600      	movs	r6, #0
 800c0e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c0e4:	9807      	ldr	r0, [sp, #28]
 800c0e6:	9c00      	ldr	r4, [sp, #0]
 800c0e8:	fb00 3202 	mla	r2, r0, r2, r3
 800c0ec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800c0ee:	4423      	add	r3, r4
 800c0f0:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800c0f2:	42a3      	cmp	r3, r4
 800c0f4:	bf94      	ite	ls
 800c0f6:	ebc6 0603 	rsbls	r6, r6, r3
 800c0fa:	ebc6 0604 	rsbhi	r6, r6, r4
 800c0fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800c100:	eba3 0a06 	sub.w	sl, r3, r6
 800c104:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c106:	f1bb 0f00 	cmp.w	fp, #0
 800c10a:	eba4 0906 	sub.w	r9, r4, r6
 800c10e:	eeb0 7a61 	vmov.f32	s14, s3
 800c112:	fb03 f606 	mul.w	r6, r3, r6
 800c116:	f340 80a1 	ble.w	800c25c <forward_lite_conv2d_if32of32wf32+0x2b8>
 800c11a:	f026 070f 	bic.w	r7, r6, #15
 800c11e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c122:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c126:	f108 0801 	add.w	r8, r8, #1
 800c12a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800c12e:	fb00 fa0a 	mul.w	sl, r0, sl
 800c132:	fb00 f909 	mul.w	r9, r0, r9
 800c136:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800c13a:	f04f 0c00 	mov.w	ip, #0
 800c13e:	2f00      	cmp	r7, #0
 800c140:	bfd8      	it	le
 800c142:	2000      	movle	r0, #0
 800c144:	dd70      	ble.n	800c228 <forward_lite_conv2d_if32of32wf32+0x284>
 800c146:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800c14a:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800c14e:	2400      	movs	r4, #0
 800c150:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800c154:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800c158:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 800c15c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800c160:	ed50 4a0d 	vldr	s9, [r0, #-52]	; 0xffffffcc
 800c164:	ed10 5a0c 	vldr	s10, [r0, #-48]	; 0xffffffd0
 800c168:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 800c16c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800c170:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800c174:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 800c178:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 800c17c:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800c180:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800c184:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c188:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800c18c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c190:	3410      	adds	r4, #16
 800c192:	42bc      	cmp	r4, r7
 800c194:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800c198:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800c19c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c1a0:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800c1a4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c1a8:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800c1ac:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 800c1b0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c1b4:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800c1b8:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800c1bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1c0:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 800c1c4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800c1c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1cc:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 800c1d0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 800c1d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c1d8:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800c1dc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800c1e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c1e4:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800c1e8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800c1ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1f0:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800c1f4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800c1f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1fc:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800c200:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800c204:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c208:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c20c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c210:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c214:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c218:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c21c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c220:	db96      	blt.n	800c150 <forward_lite_conv2d_if32of32wf32+0x1ac>
 800c222:	4471      	add	r1, lr
 800c224:	4472      	add	r2, lr
 800c226:	4640      	mov	r0, r8
 800c228:	4286      	cmp	r6, r0
 800c22a:	dd10      	ble.n	800c24e <forward_lite_conv2d_if32of32wf32+0x2aa>
 800c22c:	4603      	mov	r3, r0
 800c22e:	460d      	mov	r5, r1
 800c230:	4614      	mov	r4, r2
 800c232:	ecf4 6a01 	vldmia	r4!, {s13}
 800c236:	ecf5 7a01 	vldmia	r5!, {s15}
 800c23a:	3301      	adds	r3, #1
 800c23c:	429e      	cmp	r6, r3
 800c23e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c242:	d1f6      	bne.n	800c232 <forward_lite_conv2d_if32of32wf32+0x28e>
 800c244:	1a30      	subs	r0, r6, r0
 800c246:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c24a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c24e:	f10c 0c01 	add.w	ip, ip, #1
 800c252:	45e3      	cmp	fp, ip
 800c254:	4451      	add	r1, sl
 800c256:	444a      	add	r2, r9
 800c258:	f47f af71 	bne.w	800c13e <forward_lite_conv2d_if32of32wf32+0x19a>
 800c25c:	9901      	ldr	r1, [sp, #4]
 800c25e:	9808      	ldr	r0, [sp, #32]
 800c260:	9a03      	ldr	r2, [sp, #12]
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	ed82 7a00 	vstr	s14, [r2]
 800c268:	4401      	add	r1, r0
 800c26a:	9101      	str	r1, [sp, #4]
 800c26c:	9905      	ldr	r1, [sp, #20]
 800c26e:	440a      	add	r2, r1
 800c270:	9203      	str	r2, [sp, #12]
 800c272:	9a00      	ldr	r2, [sp, #0]
 800c274:	9906      	ldr	r1, [sp, #24]
 800c276:	1a12      	subs	r2, r2, r0
 800c278:	9200      	str	r2, [sp, #0]
 800c27a:	9a02      	ldr	r2, [sp, #8]
 800c27c:	440a      	add	r2, r1
 800c27e:	9202      	str	r2, [sp, #8]
 800c280:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800c282:	3301      	adds	r3, #1
 800c284:	429a      	cmp	r2, r3
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	f47f af24 	bne.w	800c0d4 <forward_lite_conv2d_if32of32wf32+0x130>
 800c28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c28e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c292:	440a      	add	r2, r1
 800c294:	920a      	str	r2, [sp, #40]	; 0x28
 800c296:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c298:	3304      	adds	r3, #4
 800c29a:	4293      	cmp	r3, r2
 800c29c:	9310      	str	r3, [sp, #64]	; 0x40
 800c29e:	f4ff aefe 	bcc.w	800c09e <forward_lite_conv2d_if32of32wf32+0xfa>
 800c2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c2a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2a8:	440a      	add	r2, r1
 800c2aa:	920c      	str	r2, [sp, #48]	; 0x30
 800c2ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800c2ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2b0:	440a      	add	r2, r1
 800c2b2:	9211      	str	r2, [sp, #68]	; 0x44
 800c2b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2b6:	1a52      	subs	r2, r2, r1
 800c2b8:	920d      	str	r2, [sp, #52]	; 0x34
 800c2ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2be:	440a      	add	r2, r1
 800c2c0:	9212      	str	r2, [sp, #72]	; 0x48
 800c2c2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	9314      	str	r3, [sp, #80]	; 0x50
 800c2ca:	f47f aeb9 	bne.w	800c040 <forward_lite_conv2d_if32of32wf32+0x9c>
 800c2ce:	b021      	add	sp, #132	; 0x84
 800c2d0:	ecbd 8b02 	vpop	{d8}
 800c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d8:	9a00      	ldr	r2, [sp, #0]
 800c2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2de:	4616      	mov	r6, r2
 800c2e0:	189a      	adds	r2, r3, r2
 800c2e2:	e6fe      	b.n	800c0e2 <forward_lite_conv2d_if32of32wf32+0x13e>
 800c2e4:	eef0 1a48 	vmov.f32	s3, s16
 800c2e8:	e6e6      	b.n	800c0b8 <forward_lite_conv2d_if32of32wf32+0x114>
 800c2ea:	bf00      	nop
 800c2ec:	00000000 	.word	0x00000000
 800c2f0:	9a05      	ldr	r2, [sp, #20]
 800c2f2:	188a      	adds	r2, r1, r2
 800c2f4:	4291      	cmp	r1, r2
 800c2f6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2f8:	d2d3      	bcs.n	800c2a2 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800c2fa:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800c2fc:	fb02 f303 	mul.w	r3, r2, r3
 800c300:	930a      	str	r3, [sp, #40]	; 0x28
 800c302:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c306:	4413      	add	r3, r2
 800c308:	931d      	str	r3, [sp, #116]	; 0x74
 800c30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c30c:	9310      	str	r3, [sp, #64]	; 0x40
 800c30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c310:	9313      	str	r3, [sp, #76]	; 0x4c
 800c312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c314:	9309      	str	r3, [sp, #36]	; 0x24
 800c316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80fc 	beq.w	800c516 <forward_lite_conv2d_if32of32wf32+0x572>
 800c31e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c320:	ecf3 1a01 	vldmia	r3!, {s3}
 800c324:	9313      	str	r3, [sp, #76]	; 0x4c
 800c326:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 80e5 	beq.w	800c4f8 <forward_lite_conv2d_if32of32wf32+0x554>
 800c32e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	2300      	movs	r3, #0
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	9b01      	ldr	r3, [sp, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	f2c0 80e9 	blt.w	800c51c <forward_lite_conv2d_if32of32wf32+0x578>
 800c34a:	9a02      	ldr	r2, [sp, #8]
 800c34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34e:	2400      	movs	r4, #0
 800c350:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c352:	9807      	ldr	r0, [sp, #28]
 800c354:	9d00      	ldr	r5, [sp, #0]
 800c356:	fb03 1300 	mla	r3, r3, r0, r1
 800c35a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800c35c:	4429      	add	r1, r5
 800c35e:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800c360:	42a9      	cmp	r1, r5
 800c362:	bf94      	ite	ls
 800c364:	ebc4 0401 	rsbls	r4, r4, r1
 800c368:	ebc4 0405 	rsbhi	r4, r4, r5
 800c36c:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800c36e:	eba1 0a04 	sub.w	sl, r1, r4
 800c372:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800c374:	f1bb 0f00 	cmp.w	fp, #0
 800c378:	eba5 0904 	sub.w	r9, r5, r4
 800c37c:	eeb0 7a61 	vmov.f32	s14, s3
 800c380:	fb01 f404 	mul.w	r4, r1, r4
 800c384:	f340 80a0 	ble.w	800c4c8 <forward_lite_conv2d_if32of32wf32+0x524>
 800c388:	f024 0c0f 	bic.w	ip, r4, #15
 800c38c:	f10c 38ff 	add.w	r8, ip, #4294967295
 800c390:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800c394:	f108 0801 	add.w	r8, r8, #1
 800c398:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800c39c:	fb00 fa0a 	mul.w	sl, r0, sl
 800c3a0:	fb00 f909 	mul.w	r9, r0, r9
 800c3a4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800c3a8:	2700      	movs	r7, #0
 800c3aa:	f1bc 0f00 	cmp.w	ip, #0
 800c3ae:	bfd8      	it	le
 800c3b0:	2100      	movle	r1, #0
 800c3b2:	dd70      	ble.n	800c496 <forward_lite_conv2d_if32of32wf32+0x4f2>
 800c3b4:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800c3b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c3bc:	2500      	movs	r5, #0
 800c3be:	ed51 5a0f 	vldr	s11, [r1, #-60]	; 0xffffffc4
 800c3c2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800c3c6:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 800c3ca:	ed51 6a10 	vldr	s13, [r1, #-64]	; 0xffffffc0
 800c3ce:	ed50 4a0d 	vldr	s9, [r0, #-52]	; 0xffffffcc
 800c3d2:	ed10 5a0c 	vldr	s10, [r0, #-48]	; 0xffffffd0
 800c3d6:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 800c3da:	ed51 3a0a 	vldr	s7, [r1, #-40]	; 0xffffffd8
 800c3de:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800c3e2:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 800c3e6:	ed11 1a06 	vldr	s2, [r1, #-24]	; 0xffffffe8
 800c3ea:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800c3ee:	ed51 2a05 	vldr	s5, [r1, #-20]	; 0xffffffec
 800c3f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c3f6:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800c3fa:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c3fe:	3510      	adds	r5, #16
 800c400:	4565      	cmp	r5, ip
 800c402:	ed11 6a0e 	vldr	s12, [r1, #-56]	; 0xffffffc8
 800c406:	ed51 6a0d 	vldr	s13, [r1, #-52]	; 0xffffffcc
 800c40a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c40e:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800c412:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800c416:	ed51 5a1c 	vldr	s11, [r1, #-112]	; 0xffffff90
 800c41a:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 800c41e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c422:	ed51 6a1b 	vldr	s13, [r1, #-108]	; 0xffffff94
 800c426:	ed51 4a19 	vldr	s9, [r1, #-100]	; 0xffffff9c
 800c42a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c42e:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 800c432:	ed51 5a18 	vldr	s11, [r1, #-96]	; 0xffffffa0
 800c436:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c43a:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 800c43e:	ed51 6a17 	vldr	s13, [r1, #-92]	; 0xffffffa4
 800c442:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c446:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800c44a:	ed51 3a14 	vldr	s7, [r1, #-80]	; 0xffffffb0
 800c44e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c452:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800c456:	ed51 4a13 	vldr	s9, [r1, #-76]	; 0xffffffb4
 800c45a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c45e:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800c462:	ed51 5a12 	vldr	s11, [r1, #-72]	; 0xffffffb8
 800c466:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c46a:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800c46e:	ed51 6a11 	vldr	s13, [r1, #-68]	; 0xffffffbc
 800c472:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c476:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c47a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c47e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c482:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c486:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c48a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c48e:	db96      	blt.n	800c3be <forward_lite_conv2d_if32of32wf32+0x41a>
 800c490:	4472      	add	r2, lr
 800c492:	4473      	add	r3, lr
 800c494:	4641      	mov	r1, r8
 800c496:	428c      	cmp	r4, r1
 800c498:	dd10      	ble.n	800c4bc <forward_lite_conv2d_if32of32wf32+0x518>
 800c49a:	4608      	mov	r0, r1
 800c49c:	4616      	mov	r6, r2
 800c49e:	461d      	mov	r5, r3
 800c4a0:	ecf5 6a01 	vldmia	r5!, {s13}
 800c4a4:	ecf6 7a01 	vldmia	r6!, {s15}
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	4284      	cmp	r4, r0
 800c4ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c4b0:	d1f6      	bne.n	800c4a0 <forward_lite_conv2d_if32of32wf32+0x4fc>
 800c4b2:	1a61      	subs	r1, r4, r1
 800c4b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c4b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c4bc:	3701      	adds	r7, #1
 800c4be:	45bb      	cmp	fp, r7
 800c4c0:	4452      	add	r2, sl
 800c4c2:	444b      	add	r3, r9
 800c4c4:	f47f af71 	bne.w	800c3aa <forward_lite_conv2d_if32of32wf32+0x406>
 800c4c8:	9901      	ldr	r1, [sp, #4]
 800c4ca:	9808      	ldr	r0, [sp, #32]
 800c4cc:	9a03      	ldr	r2, [sp, #12]
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	ed82 7a00 	vstr	s14, [r2]
 800c4d4:	4401      	add	r1, r0
 800c4d6:	9101      	str	r1, [sp, #4]
 800c4d8:	9905      	ldr	r1, [sp, #20]
 800c4da:	440a      	add	r2, r1
 800c4dc:	9203      	str	r2, [sp, #12]
 800c4de:	9a00      	ldr	r2, [sp, #0]
 800c4e0:	9906      	ldr	r1, [sp, #24]
 800c4e2:	1a12      	subs	r2, r2, r0
 800c4e4:	9200      	str	r2, [sp, #0]
 800c4e6:	9a02      	ldr	r2, [sp, #8]
 800c4e8:	440a      	add	r2, r1
 800c4ea:	9202      	str	r2, [sp, #8]
 800c4ec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	9304      	str	r3, [sp, #16]
 800c4f4:	f47f af25 	bne.w	800c342 <forward_lite_conv2d_if32of32wf32+0x39e>
 800c4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4fe:	440a      	add	r2, r1
 800c500:	9209      	str	r2, [sp, #36]	; 0x24
 800c502:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c504:	3304      	adds	r3, #4
 800c506:	4293      	cmp	r3, r2
 800c508:	9310      	str	r3, [sp, #64]	; 0x40
 800c50a:	f4bf aeca 	bcs.w	800c2a2 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800c50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c510:	2b00      	cmp	r3, #0
 800c512:	f47f af04 	bne.w	800c31e <forward_lite_conv2d_if32of32wf32+0x37a>
 800c516:	eef0 1a48 	vmov.f32	s3, s16
 800c51a:	e704      	b.n	800c326 <forward_lite_conv2d_if32of32wf32+0x382>
 800c51c:	9a00      	ldr	r2, [sp, #0]
 800c51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c520:	4614      	mov	r4, r2
 800c522:	4413      	add	r3, r2
 800c524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c526:	e713      	b.n	800c350 <forward_lite_conv2d_if32of32wf32+0x3ac>
 800c528:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c52c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c52e:	e58e      	b.n	800c04e <forward_lite_conv2d_if32of32wf32+0xaa>

0800c530 <forward_lite_nl_softmax_if32of32_kernel>:
 800c530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c534:	2a01      	cmp	r2, #1
 800c536:	ed2d 8b02 	vpush	{d8}
 800c53a:	4617      	mov	r7, r2
 800c53c:	ed91 8a00 	vldr	s16, [r1]
 800c540:	d937      	bls.n	800c5b2 <forward_lite_nl_softmax_if32of32_kernel+0x82>
 800c542:	1d0b      	adds	r3, r1, #4
 800c544:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c548:	ecf3 7a01 	vldmia	r3!, {s15}
 800c54c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c554:	bfb8      	it	lt
 800c556:	eeb0 8a67 	vmovlt.f32	s16, s15
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d1f4      	bne.n	800c548 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 800c55e:	eddf 8a18 	vldr	s17, [pc, #96]	; 800c5c0 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800c562:	4606      	mov	r6, r0
 800c564:	460d      	mov	r5, r1
 800c566:	4680      	mov	r8, r0
 800c568:	2400      	movs	r4, #0
 800c56a:	ecb5 0a01 	vldmia	r5!, {s0}
 800c56e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c572:	f003 faff 	bl	800fb74 <expf>
 800c576:	3401      	adds	r4, #1
 800c578:	42a7      	cmp	r7, r4
 800c57a:	ee78 8a80 	vadd.f32	s17, s17, s0
 800c57e:	eca8 0a01 	vstmia	r8!, {s0}
 800c582:	d8f2      	bhi.n	800c56a <forward_lite_nl_softmax_if32of32_kernel+0x3a>
 800c584:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58c:	d00d      	beq.n	800c5aa <forward_lite_nl_softmax_if32of32_kernel+0x7a>
 800c58e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c592:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800c596:	2300      	movs	r3, #0
 800c598:	3301      	adds	r3, #1
 800c59a:	429f      	cmp	r7, r3
 800c59c:	edd6 7a00 	vldr	s15, [r6]
 800c5a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5a4:	ece6 7a01 	vstmia	r6!, {s15}
 800c5a8:	d8f6      	bhi.n	800c598 <forward_lite_nl_softmax_if32of32_kernel+0x68>
 800c5aa:	ecbd 8b02 	vpop	{d8}
 800c5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b2:	2a00      	cmp	r2, #0
 800c5b4:	d1d3      	bne.n	800c55e <forward_lite_nl_softmax_if32of32_kernel+0x2e>
 800c5b6:	ecbd 8b02 	vpop	{d8}
 800c5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5be:	bf00      	nop
 800c5c0:	00000000 	.word	0x00000000

0800c5c4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800c5c4:	edd3 6a02 	vldr	s13, [r3, #8]
 800c5c8:	ed93 7a00 	vldr	s14, [r3]
 800c5cc:	ed93 6a01 	vldr	s12, [r3, #4]
 800c5d0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d8:	d42a      	bmi.n	800c630 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800c5da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c5de:	3a01      	subs	r2, #1
 800c5e0:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c5e4:	4561      	cmp	r1, ip
 800c5e6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c5ea:	d85d      	bhi.n	800c6a8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800c5ec:	1d11      	adds	r1, r2, #4
 800c5ee:	f10c 0304 	add.w	r3, ip, #4
 800c5f2:	4408      	add	r0, r1
 800c5f4:	ebac 0202 	sub.w	r2, ip, r2
 800c5f8:	e00c      	b.n	800c614 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800c5fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c602:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c606:	db01      	blt.n	800c60c <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800c608:	ee65 7a86 	vmul.f32	s15, s11, s12
 800c60c:	4293      	cmp	r3, r2
 800c60e:	ed60 7a01 	vstmdb	r0!, {s15}
 800c612:	d00c      	beq.n	800c62e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800c614:	ed73 7a01 	vldmdb	r3!, {s15}
 800c618:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c620:	daeb      	bge.n	800c5fa <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800c622:	eef0 7a66 	vmov.f32	s15, s13
 800c626:	4293      	cmp	r3, r2
 800c628:	ed60 7a01 	vstmdb	r0!, {s15}
 800c62c:	d1f2      	bne.n	800c614 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800c62e:	4770      	bx	lr
 800c630:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c634:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c638:	3a01      	subs	r2, #1
 800c63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c642:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c646:	d017      	beq.n	800c678 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800c648:	4561      	cmp	r1, ip
 800c64a:	d82d      	bhi.n	800c6a8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800c64c:	1d11      	adds	r1, r2, #4
 800c64e:	f10c 0304 	add.w	r3, ip, #4
 800c652:	4401      	add	r1, r0
 800c654:	ebac 0202 	sub.w	r2, ip, r2
 800c658:	ed73 7a01 	vldmdb	r3!, {s15}
 800c65c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c660:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c668:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c66c:	d81d      	bhi.n	800c6aa <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800c66e:	4293      	cmp	r3, r2
 800c670:	ed61 6a01 	vstmdb	r1!, {s13}
 800c674:	d1f0      	bne.n	800c658 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800c676:	4770      	bx	lr
 800c678:	4561      	cmp	r1, ip
 800c67a:	d815      	bhi.n	800c6a8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800c67c:	1d11      	adds	r1, r2, #4
 800c67e:	b500      	push	{lr}
 800c680:	f10c 0304 	add.w	r3, ip, #4
 800c684:	f04f 0e00 	mov.w	lr, #0
 800c688:	4401      	add	r1, r0
 800c68a:	ebac 0202 	sub.w	r2, ip, r2
 800c68e:	ed73 7a01 	vldmdb	r3!, {s15}
 800c692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69a:	d40b      	bmi.n	800c6b4 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800c69c:	4293      	cmp	r3, r2
 800c69e:	f841 ed04 	str.w	lr, [r1, #-4]!
 800c6a2:	d1f4      	bne.n	800c68e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800c6a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	ed61 7a01 	vstmdb	r1!, {s15}
 800c6b0:	d1d2      	bne.n	800c658 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800c6b2:	4770      	bx	lr
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	ed61 7a01 	vstmdb	r1!, {s15}
 800c6ba:	d1e8      	bne.n	800c68e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800c6bc:	e7f2      	b.n	800c6a4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800c6be:	bf00      	nop

0800c6c0 <lite_decompress_ilutof32>:
 800c6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	9d08      	ldr	r5, [sp, #32]
 800c6c6:	2b04      	cmp	r3, #4
 800c6c8:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800c6cc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c6d0:	d015      	beq.n	800c6fe <lite_decompress_ilutof32+0x3e>
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d110      	bne.n	800c6f8 <lite_decompress_ilutof32+0x38>
 800c6d6:	42a8      	cmp	r0, r5
 800c6d8:	bf38      	it	cc
 800c6da:	460c      	movcc	r4, r1
 800c6dc:	d20c      	bcs.n	800c6f8 <lite_decompress_ilutof32+0x38>
 800c6de:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f840 3b04 	str.w	r3, [r0], #4
 800c6ec:	4285      	cmp	r5, r0
 800c6ee:	d8f6      	bhi.n	800c6de <lite_decompress_ilutof32+0x1e>
 800c6f0:	3e01      	subs	r6, #1
 800c6f2:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 800c6f6:	1c71      	adds	r1, r6, #1
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6fe:	9b07      	ldr	r3, [sp, #28]
 800c700:	085e      	lsrs	r6, r3, #1
 800c702:	f003 0701 	and.w	r7, r3, #1
 800c706:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800c70a:	f106 38ff 	add.w	r8, r6, #4294967295
 800c70e:	42a8      	cmp	r0, r5
 800c710:	d2f2      	bcs.n	800c6f8 <lite_decompress_ilutof32+0x38>
 800c712:	b33e      	cbz	r6, 800c764 <lite_decompress_ilutof32+0xa4>
 800c714:	f100 0e08 	add.w	lr, r0, #8
 800c718:	f101 3cff 	add.w	ip, r1, #4294967295
 800c71c:	eb01 0408 	add.w	r4, r1, r8
 800c720:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800c724:	091b      	lsrs	r3, r3, #4
 800c726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c72a:	f10e 0e08 	add.w	lr, lr, #8
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f84e 3c10 	str.w	r3, [lr, #-16]
 800c734:	f89c 3000 	ldrb.w	r3, [ip]
 800c738:	f003 030f 	and.w	r3, r3, #15
 800c73c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c740:	4564      	cmp	r4, ip
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800c748:	d1ea      	bne.n	800c720 <lite_decompress_ilutof32+0x60>
 800c74a:	4431      	add	r1, r6
 800c74c:	4448      	add	r0, r9
 800c74e:	2f00      	cmp	r7, #0
 800c750:	d0dd      	beq.n	800c70e <lite_decompress_ilutof32+0x4e>
 800c752:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c756:	091b      	lsrs	r3, r3, #4
 800c758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f840 3b04 	str.w	r3, [r0], #4
 800c762:	e7d4      	b.n	800c70e <lite_decompress_ilutof32+0x4e>
 800c764:	2f00      	cmp	r7, #0
 800c766:	d1f4      	bne.n	800c752 <lite_decompress_ilutof32+0x92>
 800c768:	42a8      	cmp	r0, r5
 800c76a:	d3fd      	bcc.n	800c768 <lite_decompress_ilutof32+0xa8>
 800c76c:	4608      	mov	r0, r1
 800c76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c772:	bf00      	nop

0800c774 <forward_lite_dense_if32of32wf32>:
 800c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c778:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800c77c:	6801      	ldr	r1, [r0, #0]
 800c77e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c782:	fb02 f303 	mul.w	r3, r2, r3
 800c786:	b083      	sub	sp, #12
 800c788:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c78c:	4299      	cmp	r1, r3
 800c78e:	9100      	str	r1, [sp, #0]
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	f080 811e 	bcs.w	800c9d2 <forward_lite_dense_if32of32wf32+0x25e>
 800c796:	6904      	ldr	r4, [r0, #16]
 800c798:	4607      	mov	r7, r0
 800c79a:	0096      	lsls	r6, r2, #2
 800c79c:	9b00      	ldr	r3, [sp, #0]
 800c79e:	68bd      	ldr	r5, [r7, #8]
 800c7a0:	eb03 0e06 	add.w	lr, r3, r6
 800c7a4:	459e      	cmp	lr, r3
 800c7a6:	461e      	mov	r6, r3
 800c7a8:	f240 8104 	bls.w	800c9b4 <forward_lite_dense_if32of32wf32+0x240>
 800c7ac:	f1a4 0c10 	sub.w	ip, r4, #16
 800c7b0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800c7b4:	f10c 0c01 	add.w	ip, ip, #1
 800c7b8:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800c7bc:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800c7c0:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800c7c4:	2c0f      	cmp	r4, #15
 800c7c6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800ca24 <forward_lite_dense_if32of32wf32+0x2b0>
 800c7ca:	f240 8105 	bls.w	800c9d8 <forward_lite_dense_if32of32wf32+0x264>
 800c7ce:	f108 0240 	add.w	r2, r8, #64	; 0x40
 800c7d2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800c7dc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800c7e0:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800c7e4:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800c7e8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800c7ec:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800c7f0:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800c7f4:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800c7f8:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 800c7fc:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800c800:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800c804:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800c808:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800c80c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c810:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800c814:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c818:	3910      	subs	r1, #16
 800c81a:	290f      	cmp	r1, #15
 800c81c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800c820:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800c824:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c828:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800c82c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c830:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800c834:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800c838:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800c83c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800c840:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800c844:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c848:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800c84c:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800c850:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c854:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800c858:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 800c85c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c860:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800c864:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800c868:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c86c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800c870:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800c874:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c878:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800c87c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800c880:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c884:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800c888:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800c88c:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c890:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c894:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c898:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c89c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c8a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c8a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8a8:	d896      	bhi.n	800c7d8 <forward_lite_dense_if32of32wf32+0x64>
 800c8aa:	eb05 020b 	add.w	r2, r5, fp
 800c8ae:	f004 010f 	and.w	r1, r4, #15
 800c8b2:	4663      	mov	r3, ip
 800c8b4:	2903      	cmp	r1, #3
 800c8b6:	d95f      	bls.n	800c978 <forward_lite_dense_if32of32wf32+0x204>
 800c8b8:	edd2 6a01 	vldr	s13, [r2, #4]
 800c8bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800c8c0:	ed93 6a00 	vldr	s12, [r3]
 800c8c4:	ed93 5a02 	vldr	s10, [r3, #8]
 800c8c8:	edd2 5a02 	vldr	s11, [r2, #8]
 800c8cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c8d0:	edd2 6a00 	vldr	s13, [r2]
 800c8d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c8d8:	1f08      	subs	r0, r1, #4
 800c8da:	2803      	cmp	r0, #3
 800c8dc:	ed93 6a03 	vldr	s12, [r3, #12]
 800c8e0:	edd2 6a03 	vldr	s13, [r2, #12]
 800c8e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c8ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c8f0:	eeb0 7a67 	vmov.f32	s14, s15
 800c8f4:	d938      	bls.n	800c968 <forward_lite_dense_if32of32wf32+0x1f4>
 800c8f6:	edd2 6a05 	vldr	s13, [r2, #20]
 800c8fa:	edd3 7a05 	vldr	s15, [r3, #20]
 800c8fe:	ed93 6a04 	vldr	s12, [r3, #16]
 800c902:	ed93 5a06 	vldr	s10, [r3, #24]
 800c906:	edd2 5a06 	vldr	s11, [r2, #24]
 800c90a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c90e:	edd2 6a04 	vldr	s13, [r2, #16]
 800c912:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c916:	f1a1 0a08 	sub.w	sl, r1, #8
 800c91a:	f1ba 0f03 	cmp.w	sl, #3
 800c91e:	ed93 6a07 	vldr	s12, [r3, #28]
 800c922:	edd2 6a07 	vldr	s13, [r2, #28]
 800c926:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c92a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c92e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c932:	d919      	bls.n	800c968 <forward_lite_dense_if32of32wf32+0x1f4>
 800c934:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c938:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800c93c:	ed92 6a08 	vldr	s12, [r2, #32]
 800c940:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 800c944:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800c948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c94c:	edd3 6a08 	vldr	s13, [r3, #32]
 800c950:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c954:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 800c958:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800c95c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c960:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c964:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c968:	0880      	lsrs	r0, r0, #2
 800c96a:	3001      	adds	r0, #1
 800c96c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800c970:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c974:	f001 0103 	and.w	r1, r1, #3
 800c978:	b1a9      	cbz	r1, 800c9a6 <forward_lite_dense_if32of32wf32+0x232>
 800c97a:	edd3 6a00 	vldr	s13, [r3]
 800c97e:	edd2 7a00 	vldr	s15, [r2]
 800c982:	3901      	subs	r1, #1
 800c984:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c988:	d00d      	beq.n	800c9a6 <forward_lite_dense_if32of32wf32+0x232>
 800c98a:	edd3 6a01 	vldr	s13, [r3, #4]
 800c98e:	edd2 7a01 	vldr	s15, [r2, #4]
 800c992:	2901      	cmp	r1, #1
 800c994:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c998:	d005      	beq.n	800c9a6 <forward_lite_dense_if32of32wf32+0x232>
 800c99a:	edd2 6a02 	vldr	s13, [r2, #8]
 800c99e:	edd3 7a02 	vldr	s15, [r3, #8]
 800c9a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c9a6:	444d      	add	r5, r9
 800c9a8:	eca6 7a01 	vstmia	r6!, {s14}
 800c9ac:	45b6      	cmp	lr, r6
 800c9ae:	f63f af09 	bhi.w	800c7c4 <forward_lite_dense_if32of32wf32+0x50>
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	b99b      	cbnz	r3, 800c9e0 <forward_lite_dense_if32of32wf32+0x26c>
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	9901      	ldr	r1, [sp, #4]
 800c9bc:	693c      	ldr	r4, [r7, #16]
 800c9be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c9c2:	4299      	cmp	r1, r3
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800c9ca:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800c9ce:	f63f aee5 	bhi.w	800c79c <forward_lite_dense_if32of32wf32+0x28>
 800c9d2:	b003      	add	sp, #12
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	4621      	mov	r1, r4
 800c9da:	462a      	mov	r2, r5
 800c9dc:	4643      	mov	r3, r8
 800c9de:	e769      	b.n	800c8b4 <forward_lite_dense_if32of32wf32+0x140>
 800c9e0:	2a00      	cmp	r2, #0
 800c9e2:	d0e9      	beq.n	800c9b8 <forward_lite_dense_if32of32wf32+0x244>
 800c9e4:	9a00      	ldr	r2, [sp, #0]
 800c9e6:	ed93 7a00 	vldr	s14, [r3]
 800c9ea:	edd2 7a00 	vldr	s15, [r2]
 800c9ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	edc2 7a00 	vstr	s15, [r2]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	2a01      	cmp	r2, #1
 800c9fc:	d9dc      	bls.n	800c9b8 <forward_lite_dense_if32of32wf32+0x244>
 800c9fe:	1d19      	adds	r1, r3, #4
 800ca00:	2301      	movs	r3, #1
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	ed91 7a00 	vldr	s14, [r1]
 800ca08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ca0c:	edd2 7a00 	vldr	s15, [r2]
 800ca10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca14:	3301      	adds	r3, #1
 800ca16:	ece1 7a01 	vstmia	r1!, {s15}
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d8f0      	bhi.n	800ca02 <forward_lite_dense_if32of32wf32+0x28e>
 800ca20:	e7ca      	b.n	800c9b8 <forward_lite_dense_if32of32wf32+0x244>
 800ca22:	bf00      	nop
 800ca24:	00000000 	.word	0x00000000

0800ca28 <forward_lite_dense_if32of32wf32_lut4>:
 800ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	b08d      	sub	sp, #52	; 0x34
 800ca2e:	4605      	mov	r5, r0
 800ca30:	9005      	str	r0, [sp, #20]
 800ca32:	920a      	str	r2, [sp, #40]	; 0x28
 800ca34:	4618      	mov	r0, r3
 800ca36:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 800ca3a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800ca3c:	fb02 f303 	mul.w	r3, r2, r3
 800ca40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ca44:	460c      	mov	r4, r1
 800ca46:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ca48:	9308      	str	r3, [sp, #32]
 800ca4a:	b126      	cbz	r6, 800ca56 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800ca4c:	2240      	movs	r2, #64	; 0x40
 800ca4e:	4631      	mov	r1, r6
 800ca50:	f000 fa40 	bl	800ced4 <st_int8_copy>
 800ca54:	4630      	mov	r0, r6
 800ca56:	9b05      	ldr	r3, [sp, #20]
 800ca58:	9a08      	ldr	r2, [sp, #32]
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	f080 80f5 	bcs.w	800cc4a <forward_lite_dense_if32of32wf32_lut4+0x222>
 800ca60:	08eb      	lsrs	r3, r5, #3
 800ca62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	f005 0101 	and.w	r1, r5, #1
 800ca6a:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	f025 0801 	bic.w	r8, r5, #1
 800ca76:	9102      	str	r1, [sp, #8]
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	00a9      	lsls	r1, r5, #2
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	9207      	str	r2, [sp, #28]
 800ca80:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800ca84:	9109      	str	r1, [sp, #36]	; 0x24
 800ca86:	f104 0b20 	add.w	fp, r4, #32
 800ca8a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca8c:	9a07      	ldr	r2, [sp, #28]
 800ca8e:	eb03 0902 	add.w	r9, r3, r2
 800ca92:	4599      	cmp	r9, r3
 800ca94:	f1ab 0220 	sub.w	r2, fp, #32
 800ca98:	9206      	str	r2, [sp, #24]
 800ca9a:	f240 80d9 	bls.w	800cc50 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800ca9e:	469e      	mov	lr, r3
 800caa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caa2:	f108 33ff 	add.w	r3, r8, #4294967295
 800caa6:	9303      	str	r3, [sp, #12]
 800caa8:	9b01      	ldr	r3, [sp, #4]
 800caaa:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800cc74 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 80b2 	beq.w	800cc18 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	18d5      	adds	r5, r2, r3
 800cab8:	465b      	mov	r3, fp
 800caba:	7814      	ldrb	r4, [r2, #0]
 800cabc:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 800cac0:	7851      	ldrb	r1, [r2, #1]
 800cac2:	ed53 3a08 	vldr	s7, [r3, #-32]	; 0xffffffe0
 800cac6:	ed13 4a06 	vldr	s8, [r3, #-24]	; 0xffffffe8
 800caca:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
 800cace:	ed13 5a04 	vldr	s10, [r3, #-16]
 800cad2:	ed53 5a03 	vldr	s11, [r3, #-12]
 800cad6:	ed13 6a02 	vldr	s12, [r3, #-8]
 800cada:	ed53 6a01 	vldr	s13, [r3, #-4]
 800cade:	f004 060f 	and.w	r6, r4, #15
 800cae2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800cae6:	edd6 7a00 	vldr	s15, [r6]
 800caea:	0924      	lsrs	r4, r4, #4
 800caec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800caf0:	ed94 3a00 	vldr	s6, [r4]
 800caf4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800caf8:	090c      	lsrs	r4, r1, #4
 800cafa:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cafe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800cb02:	f001 010f 	and.w	r1, r1, #15
 800cb06:	edd4 3a00 	vldr	s7, [r4]
 800cb0a:	7894      	ldrb	r4, [r2, #2]
 800cb0c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800cb10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb14:	0926      	lsrs	r6, r4, #4
 800cb16:	ed91 4a00 	vldr	s8, [r1]
 800cb1a:	78d1      	ldrb	r1, [r2, #3]
 800cb1c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cb20:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800cb24:	f004 040f 	and.w	r4, r4, #15
 800cb28:	edd6 4a00 	vldr	s9, [r6]
 800cb2c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cb30:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800cb34:	3204      	adds	r2, #4
 800cb36:	ed94 5a00 	vldr	s10, [r4]
 800cb3a:	090c      	lsrs	r4, r1, #4
 800cb3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cb40:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800cb44:	f001 010f 	and.w	r1, r1, #15
 800cb48:	edd4 5a00 	vldr	s11, [r4]
 800cb4c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cb50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb54:	42aa      	cmp	r2, r5
 800cb56:	ed91 6a00 	vldr	s12, [r1]
 800cb5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cb5e:	f103 0320 	add.w	r3, r3, #32
 800cb62:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cb66:	d1a8      	bne.n	800caba <forward_lite_dense_if32of32wf32_lut4+0x92>
 800cb68:	4656      	mov	r6, sl
 800cb6a:	4546      	cmp	r6, r8
 800cb6c:	d258      	bcs.n	800cc20 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800cb6e:	9b03      	ldr	r3, [sp, #12]
 800cb70:	1b9c      	subs	r4, r3, r6
 800cb72:	08e7      	lsrs	r7, r4, #3
 800cb74:	f106 0208 	add.w	r2, r6, #8
 800cb78:	1e69      	subs	r1, r5, #1
 800cb7a:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800cb7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cb82:	ed52 5a01 	vldr	s11, [r2, #-4]
 800cb86:	ed52 6a02 	vldr	s13, [r2, #-8]
 800cb8a:	f003 0c0f 	and.w	ip, r3, #15
 800cb8e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800cb92:	eddc 7a00 	vldr	s15, [ip]
 800cb96:	091b      	lsrs	r3, r3, #4
 800cb98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cb9c:	ed93 6a00 	vldr	s12, [r3]
 800cba0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cba4:	42a1      	cmp	r1, r4
 800cba6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cbaa:	f102 0208 	add.w	r2, r2, #8
 800cbae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cbb2:	d1e4      	bne.n	800cb7e <forward_lite_dense_if32of32wf32_lut4+0x156>
 800cbb4:	3701      	adds	r7, #1
 800cbb6:	19ea      	adds	r2, r5, r7
 800cbb8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800cbbc:	9b02      	ldr	r3, [sp, #8]
 800cbbe:	b30b      	cbz	r3, 800cc04 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800cbc0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cbc4:	edd6 7a00 	vldr	s15, [r6]
 800cbc8:	091b      	lsrs	r3, r3, #4
 800cbca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cbce:	edd3 6a00 	vldr	s13, [r3]
 800cbd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cbd6:	ecae 7a01 	vstmia	lr!, {s14}
 800cbda:	45f1      	cmp	r9, lr
 800cbdc:	f63f af64 	bhi.w	800caa8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 800cbe0:	9b05      	ldr	r3, [sp, #20]
 800cbe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbe4:	1899      	adds	r1, r3, r2
 800cbe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbe8:	b9e3      	cbnz	r3, 800cc24 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800cbea:	9b08      	ldr	r3, [sp, #32]
 800cbec:	428b      	cmp	r3, r1
 800cbee:	d92c      	bls.n	800cc4a <forward_lite_dense_if32of32wf32_lut4+0x222>
 800cbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf2:	4498      	add	r8, r3
 800cbf4:	449a      	add	sl, r3
 800cbf6:	449b      	add	fp, r3
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	4599      	cmp	r9, r3
 800cbfc:	d92a      	bls.n	800cc54 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800cbfe:	9105      	str	r1, [sp, #20]
 800cc00:	460b      	mov	r3, r1
 800cc02:	e743      	b.n	800ca8c <forward_lite_dense_if32of32wf32_lut4+0x64>
 800cc04:	ecae 7a01 	vstmia	lr!, {s14}
 800cc08:	45f1      	cmp	r9, lr
 800cc0a:	d9e9      	bls.n	800cbe0 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800cc74 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f47f af4e 	bne.w	800cab4 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 800cc18:	9e06      	ldr	r6, [sp, #24]
 800cc1a:	4546      	cmp	r6, r8
 800cc1c:	4615      	mov	r5, r2
 800cc1e:	d3a6      	bcc.n	800cb6e <forward_lite_dense_if32of32wf32_lut4+0x146>
 800cc20:	462a      	mov	r2, r5
 800cc22:	e7cb      	b.n	800cbbc <forward_lite_dense_if32of32wf32_lut4+0x194>
 800cc24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0df      	beq.n	800cbea <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800cc2a:	9b07      	ldr	r3, [sp, #28]
 800cc2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc2e:	1acb      	subs	r3, r1, r3
 800cc30:	edd3 7a00 	vldr	s15, [r3]
 800cc34:	ecb2 7a01 	vldmia	r2!, {s14}
 800cc38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc3c:	ece3 7a01 	vstmia	r3!, {s15}
 800cc40:	428b      	cmp	r3, r1
 800cc42:	d1f5      	bne.n	800cc30 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800cc44:	9b08      	ldr	r3, [sp, #32]
 800cc46:	428b      	cmp	r3, r1
 800cc48:	d8d2      	bhi.n	800cbf0 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800cc4a:	b00d      	add	sp, #52	; 0x34
 800cc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc50:	4619      	mov	r1, r3
 800cc52:	e7c8      	b.n	800cbe6 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800cc54:	9b07      	ldr	r3, [sp, #28]
 800cc56:	1acb      	subs	r3, r1, r3
 800cc58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	ed92 7a00 	vldr	s14, [r2]
 800cc60:	ecf0 7a01 	vldmia	r0!, {s15}
 800cc64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc68:	ece2 7a01 	vstmia	r2!, {s15}
 800cc6c:	428a      	cmp	r2, r1
 800cc6e:	d1f5      	bne.n	800cc5c <forward_lite_dense_if32of32wf32_lut4+0x234>
 800cc70:	e7f2      	b.n	800cc58 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800cc72:	bf00      	nop
 800cc74:	00000000 	.word	0x00000000

0800cc78 <forward_lite_dense_if32of32wf32_lut8>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	b087      	sub	sp, #28
 800cc7e:	460f      	mov	r7, r1
 800cc80:	9204      	str	r2, [sp, #16]
 800cc82:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
 800cc86:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800cc88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800cc8a:	fb01 f202 	mul.w	r2, r1, r2
 800cc8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cc92:	4605      	mov	r5, r0
 800cc94:	9202      	str	r2, [sp, #8]
 800cc96:	b136      	cbz	r6, 800cca6 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc9e:	4631      	mov	r1, r6
 800cca0:	f000 f918 	bl	800ced4 <st_int8_copy>
 800cca4:	4633      	mov	r3, r6
 800cca6:	9a02      	ldr	r2, [sp, #8]
 800cca8:	4295      	cmp	r5, r2
 800ccaa:	f080 80f9 	bcs.w	800cea0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800ccae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccb0:	0092      	lsls	r2, r2, #2
 800ccb2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800ccb6:	9201      	str	r2, [sp, #4]
 800ccb8:	9205      	str	r2, [sp, #20]
 800ccba:	462a      	mov	r2, r5
 800ccbc:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800ccc0:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800ccc4:	464d      	mov	r5, r9
 800ccc6:	4691      	mov	r9, r2
 800ccc8:	9a01      	ldr	r2, [sp, #4]
 800ccca:	eb09 0e02 	add.w	lr, r9, r2
 800ccce:	00a1      	lsls	r1, r4, #2
 800ccd0:	3720      	adds	r7, #32
 800ccd2:	45ce      	cmp	lr, r9
 800ccd4:	f004 0007 	and.w	r0, r4, #7
 800ccd8:	9103      	str	r1, [sp, #12]
 800ccda:	f1a7 0b20 	sub.w	fp, r7, #32
 800ccde:	f240 80c8 	bls.w	800ce72 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800cce2:	9a04      	ldr	r2, [sp, #16]
 800cce4:	46cc      	mov	ip, r9
 800cce6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800ced0 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800ccea:	2d00      	cmp	r5, #0
 800ccec:	f000 80dd 	beq.w	800ceaa <forward_lite_dense_if32of32wf32_lut8+0x232>
 800ccf0:	eb02 060a 	add.w	r6, r2, sl
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	7854      	ldrb	r4, [r2, #1]
 800ccf8:	ed11 3a07 	vldr	s6, [r1, #-28]	; 0xffffffe4
 800ccfc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800cd00:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800cd04:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800cd08:	ed11 5a04 	vldr	s10, [r1, #-16]
 800cd0c:	ed51 5a03 	vldr	s11, [r1, #-12]
 800cd10:	ed11 6a02 	vldr	s12, [r1, #-8]
 800cd14:	ed51 6a01 	vldr	s13, [r1, #-4]
 800cd18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd1c:	edd4 7a00 	vldr	s15, [r4]
 800cd20:	7814      	ldrb	r4, [r2, #0]
 800cd22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd26:	ee67 7a83 	vmul.f32	s15, s15, s6
 800cd2a:	ed94 3a00 	vldr	s6, [r4]
 800cd2e:	7894      	ldrb	r4, [r2, #2]
 800cd30:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cd34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd38:	3208      	adds	r2, #8
 800cd3a:	edd4 3a00 	vldr	s7, [r4]
 800cd3e:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800cd42:	eee3 7a84 	vfma.f32	s15, s7, s8
 800cd46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd4a:	3120      	adds	r1, #32
 800cd4c:	ed94 4a00 	vldr	s8, [r4]
 800cd50:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 800cd54:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cd58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd5c:	edd4 4a00 	vldr	s9, [r4]
 800cd60:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 800cd64:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cd68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd6c:	ed94 5a00 	vldr	s10, [r4]
 800cd70:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800cd74:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd7c:	edd4 5a00 	vldr	s11, [r4]
 800cd80:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 800cd84:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cd88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd8c:	42b2      	cmp	r2, r6
 800cd8e:	ed94 6a00 	vldr	s12, [r4]
 800cd92:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd96:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd9a:	d1ac      	bne.n	800ccf6 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800cd9c:	4642      	mov	r2, r8
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	f000 8081 	beq.w	800cea6 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800cda4:	7831      	ldrb	r1, [r6, #0]
 800cda6:	edd2 7a00 	vldr	s15, [r2]
 800cdaa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cdae:	edd1 6a00 	vldr	s13, [r1]
 800cdb2:	2801      	cmp	r0, #1
 800cdb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdb8:	d03f      	beq.n	800ce3a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cdba:	7871      	ldrb	r1, [r6, #1]
 800cdbc:	edd2 7a01 	vldr	s15, [r2, #4]
 800cdc0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cdc4:	edd1 6a00 	vldr	s13, [r1]
 800cdc8:	2802      	cmp	r0, #2
 800cdca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdce:	d034      	beq.n	800ce3a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cdd0:	78b1      	ldrb	r1, [r6, #2]
 800cdd2:	edd2 7a02 	vldr	s15, [r2, #8]
 800cdd6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cdda:	edd1 6a00 	vldr	s13, [r1]
 800cdde:	2803      	cmp	r0, #3
 800cde0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cde4:	d029      	beq.n	800ce3a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cde6:	78f1      	ldrb	r1, [r6, #3]
 800cde8:	edd2 6a03 	vldr	s13, [r2, #12]
 800cdec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cdf0:	edd1 7a00 	vldr	s15, [r1]
 800cdf4:	2804      	cmp	r0, #4
 800cdf6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cdfa:	d01e      	beq.n	800ce3a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800cdfc:	7931      	ldrb	r1, [r6, #4]
 800cdfe:	edd2 6a04 	vldr	s13, [r2, #16]
 800ce02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce06:	edd1 7a00 	vldr	s15, [r1]
 800ce0a:	2805      	cmp	r0, #5
 800ce0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce10:	d013      	beq.n	800ce3a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800ce12:	7971      	ldrb	r1, [r6, #5]
 800ce14:	edd2 6a05 	vldr	s13, [r2, #20]
 800ce18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce1c:	edd1 7a00 	vldr	s15, [r1]
 800ce20:	2806      	cmp	r0, #6
 800ce22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce26:	d008      	beq.n	800ce3a <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800ce28:	edd2 7a06 	vldr	s15, [r2, #24]
 800ce2c:	79b2      	ldrb	r2, [r6, #6]
 800ce2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ce32:	edd2 6a00 	vldr	s13, [r2]
 800ce36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce3a:	1832      	adds	r2, r6, r0
 800ce3c:	ecac 7a01 	vstmia	ip!, {s14}
 800ce40:	45e6      	cmp	lr, ip
 800ce42:	f63f af50 	bhi.w	800cce6 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800ce46:	9a05      	ldr	r2, [sp, #20]
 800ce48:	eb09 0402 	add.w	r4, r9, r2
 800ce4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce4e:	b9a2      	cbnz	r2, 800ce7a <forward_lite_dense_if32of32wf32_lut8+0x202>
 800ce50:	9a02      	ldr	r2, [sp, #8]
 800ce52:	42a2      	cmp	r2, r4
 800ce54:	d924      	bls.n	800cea0 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800ce56:	9a03      	ldr	r2, [sp, #12]
 800ce58:	45ce      	cmp	lr, r9
 800ce5a:	4490      	add	r8, r2
 800ce5c:	4417      	add	r7, r2
 800ce5e:	d927      	bls.n	800ceb0 <forward_lite_dense_if32of32wf32_lut8+0x238>
 800ce60:	9a01      	ldr	r2, [sp, #4]
 800ce62:	46a1      	mov	r9, r4
 800ce64:	eb09 0e02 	add.w	lr, r9, r2
 800ce68:	45ce      	cmp	lr, r9
 800ce6a:	f1a7 0b20 	sub.w	fp, r7, #32
 800ce6e:	f63f af38 	bhi.w	800cce2 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800ce72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce74:	464c      	mov	r4, r9
 800ce76:	2a00      	cmp	r2, #0
 800ce78:	d0ea      	beq.n	800ce50 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800ce7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	d0e7      	beq.n	800ce50 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800ce80:	9a01      	ldr	r2, [sp, #4]
 800ce82:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce84:	1aa2      	subs	r2, r4, r2
 800ce86:	edd2 7a00 	vldr	s15, [r2]
 800ce8a:	ecb1 7a01 	vldmia	r1!, {s14}
 800ce8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce92:	ece2 7a01 	vstmia	r2!, {s15}
 800ce96:	4294      	cmp	r4, r2
 800ce98:	d1f5      	bne.n	800ce86 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800ce9a:	9a02      	ldr	r2, [sp, #8]
 800ce9c:	42a2      	cmp	r2, r4
 800ce9e:	d8da      	bhi.n	800ce56 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800cea0:	b007      	add	sp, #28
 800cea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea6:	4632      	mov	r2, r6
 800cea8:	e7c8      	b.n	800ce3c <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800ceaa:	4616      	mov	r6, r2
 800ceac:	465a      	mov	r2, fp
 800ceae:	e776      	b.n	800cd9e <forward_lite_dense_if32of32wf32_lut8+0x126>
 800ceb0:	9b01      	ldr	r3, [sp, #4]
 800ceb2:	1ae3      	subs	r3, r4, r3
 800ceb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	ed92 7a00 	vldr	s14, [r2]
 800cebc:	ecf1 7a01 	vldmia	r1!, {s15}
 800cec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cec4:	ece2 7a01 	vstmia	r2!, {s15}
 800cec8:	42a2      	cmp	r2, r4
 800ceca:	d1f5      	bne.n	800ceb8 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800cecc:	e7f2      	b.n	800ceb4 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800cece:	bf00      	nop
 800ced0:	00000000 	.word	0x00000000

0800ced4 <st_int8_copy>:
 800ced4:	4288      	cmp	r0, r1
 800ced6:	d056      	beq.n	800cf86 <st_int8_copy+0xb2>
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	d054      	beq.n	800cf86 <st_int8_copy+0xb2>
 800cedc:	4288      	cmp	r0, r1
 800cede:	d353      	bcc.n	800cf88 <st_int8_copy+0xb4>
 800cee0:	078b      	lsls	r3, r1, #30
 800cee2:	d102      	bne.n	800ceea <st_int8_copy+0x16>
 800cee4:	e009      	b.n	800cefa <st_int8_copy+0x26>
 800cee6:	2a00      	cmp	r2, #0
 800cee8:	d05b      	beq.n	800cfa2 <st_int8_copy+0xce>
 800ceea:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ceee:	f801 3b01 	strb.w	r3, [r1], #1
 800cef2:	078b      	lsls	r3, r1, #30
 800cef4:	f102 32ff 	add.w	r2, r2, #4294967295
 800cef8:	d1f5      	bne.n	800cee6 <st_int8_copy+0x12>
 800cefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800cf02:	d068      	beq.n	800cfd6 <st_int8_copy+0x102>
 800cf04:	ea40 0301 	orr.w	r3, r0, r1
 800cf08:	075b      	lsls	r3, r3, #29
 800cf0a:	d14b      	bne.n	800cfa4 <st_int8_copy+0xd0>
 800cf0c:	f1be 0f01 	cmp.w	lr, #1
 800cf10:	d048      	beq.n	800cfa4 <st_int8_copy+0xd0>
 800cf12:	f100 0310 	add.w	r3, r0, #16
 800cf16:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cf1a:	f101 0c10 	add.w	ip, r1, #16
 800cf1e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800cf22:	ed13 6b04 	vldr	d6, [r3, #-16]
 800cf26:	ed13 7b02 	vldr	d7, [r3, #-8]
 800cf2a:	3310      	adds	r3, #16
 800cf2c:	4573      	cmp	r3, lr
 800cf2e:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800cf32:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800cf36:	f10c 0c10 	add.w	ip, ip, #16
 800cf3a:	d1f2      	bne.n	800cf22 <st_int8_copy+0x4e>
 800cf3c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800cf40:	4421      	add	r1, r4
 800cf42:	4420      	add	r0, r4
 800cf44:	f002 0203 	and.w	r2, r2, #3
 800cf48:	b16b      	cbz	r3, 800cf66 <st_int8_copy+0x92>
 800cf4a:	6804      	ldr	r4, [r0, #0]
 800cf4c:	600c      	str	r4, [r1, #0]
 800cf4e:	1e5c      	subs	r4, r3, #1
 800cf50:	d005      	beq.n	800cf5e <st_int8_copy+0x8a>
 800cf52:	6845      	ldr	r5, [r0, #4]
 800cf54:	604d      	str	r5, [r1, #4]
 800cf56:	2c01      	cmp	r4, #1
 800cf58:	bf1c      	itt	ne
 800cf5a:	6884      	ldrne	r4, [r0, #8]
 800cf5c:	608c      	strne	r4, [r1, #8]
 800cf5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cf62:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cf66:	b162      	cbz	r2, 800cf82 <st_int8_copy+0xae>
 800cf68:	f990 3000 	ldrsb.w	r3, [r0]
 800cf6c:	700b      	strb	r3, [r1, #0]
 800cf6e:	3a01      	subs	r2, #1
 800cf70:	d007      	beq.n	800cf82 <st_int8_copy+0xae>
 800cf72:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf76:	704b      	strb	r3, [r1, #1]
 800cf78:	2a01      	cmp	r2, #1
 800cf7a:	bf1c      	itt	ne
 800cf7c:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800cf80:	708b      	strbne	r3, [r1, #2]
 800cf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf86:	4770      	bx	lr
 800cf88:	1883      	adds	r3, r0, r2
 800cf8a:	428b      	cmp	r3, r1
 800cf8c:	d9a8      	bls.n	800cee0 <st_int8_copy+0xc>
 800cf8e:	4283      	cmp	r3, r0
 800cf90:	440a      	add	r2, r1
 800cf92:	d9f8      	bls.n	800cf86 <st_int8_copy+0xb2>
 800cf94:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800cf98:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800cf9c:	4283      	cmp	r3, r0
 800cf9e:	d1f9      	bne.n	800cf94 <st_int8_copy+0xc0>
 800cfa0:	4770      	bx	lr
 800cfa2:	4770      	bx	lr
 800cfa4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800cfae:	4684      	mov	ip, r0
 800cfb0:	f8dc 7000 	ldr.w	r7, [ip]
 800cfb4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800cfb8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800cfbc:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800cfc0:	f8c3 800c 	str.w	r8, [r3, #12]
 800cfc4:	601f      	str	r7, [r3, #0]
 800cfc6:	605e      	str	r6, [r3, #4]
 800cfc8:	609d      	str	r5, [r3, #8]
 800cfca:	3310      	adds	r3, #16
 800cfcc:	459e      	cmp	lr, r3
 800cfce:	f10c 0c10 	add.w	ip, ip, #16
 800cfd2:	d1ed      	bne.n	800cfb0 <st_int8_copy+0xdc>
 800cfd4:	e7b2      	b.n	800cf3c <st_int8_copy+0x68>
 800cfd6:	0893      	lsrs	r3, r2, #2
 800cfd8:	f002 0203 	and.w	r2, r2, #3
 800cfdc:	e7b4      	b.n	800cf48 <st_int8_copy+0x74>
 800cfde:	bf00      	nop

0800cfe0 <ai_array_to_buffer_fmt>:
 800cfe0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d053      	beq.n	800d090 <ai_array_to_buffer_fmt+0xb0>
 800cfe8:	4a2c      	ldr	r2, [pc, #176]	; (800d09c <ai_array_to_buffer_fmt+0xbc>)
 800cfea:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d010      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800cff2:	dc21      	bgt.n	800d038 <ai_array_to_buffer_fmt+0x58>
 800cff4:	4a2a      	ldr	r2, [pc, #168]	; (800d0a0 <ai_array_to_buffer_fmt+0xc0>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d00c      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800cffa:	dd0f      	ble.n	800d01c <ai_array_to_buffer_fmt+0x3c>
 800cffc:	4a29      	ldr	r2, [pc, #164]	; (800d0a4 <ai_array_to_buffer_fmt+0xc4>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d008      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d002:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800d006:	4293      	cmp	r3, r2
 800d008:	d004      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d00a:	4a27      	ldr	r2, [pc, #156]	; (800d0a8 <ai_array_to_buffer_fmt+0xc8>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	bf0c      	ite	eq
 800d010:	4613      	moveq	r3, r2
 800d012:	2340      	movne	r3, #64	; 0x40
 800d014:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d018:	4318      	orrs	r0, r3
 800d01a:	4770      	bx	lr
 800d01c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d020:	4293      	cmp	r3, r2
 800d022:	d0f7      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d024:	dd2a      	ble.n	800d07c <ai_array_to_buffer_fmt+0x9c>
 800d026:	4a21      	ldr	r2, [pc, #132]	; (800d0ac <ai_array_to_buffer_fmt+0xcc>)
 800d028:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d02c:	4293      	cmp	r3, r2
 800d02e:	bf0c      	ite	eq
 800d030:	4613      	moveq	r3, r2
 800d032:	2340      	movne	r3, #64	; 0x40
 800d034:	4318      	orrs	r0, r3
 800d036:	4770      	bx	lr
 800d038:	4a1d      	ldr	r2, [pc, #116]	; (800d0b0 <ai_array_to_buffer_fmt+0xd0>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d0ea      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d03e:	dd0f      	ble.n	800d060 <ai_array_to_buffer_fmt+0x80>
 800d040:	4a1c      	ldr	r2, [pc, #112]	; (800d0b4 <ai_array_to_buffer_fmt+0xd4>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d0e6      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d046:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d0e2      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d04e:	4a1a      	ldr	r2, [pc, #104]	; (800d0b8 <ai_array_to_buffer_fmt+0xd8>)
 800d050:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d054:	4293      	cmp	r3, r2
 800d056:	bf0c      	ite	eq
 800d058:	4613      	moveq	r3, r2
 800d05a:	2340      	movne	r3, #64	; 0x40
 800d05c:	4318      	orrs	r0, r3
 800d05e:	4770      	bx	lr
 800d060:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d064:	4293      	cmp	r3, r2
 800d066:	d0d5      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d068:	3207      	adds	r2, #7
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d0d2      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d06e:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800d072:	4293      	cmp	r3, r2
 800d074:	bf0c      	ite	eq
 800d076:	4613      	moveq	r3, r2
 800d078:	2340      	movne	r3, #64	; 0x40
 800d07a:	e7cb      	b.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d07c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d080:	4293      	cmp	r3, r2
 800d082:	d0c7      	beq.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d084:	3280      	adds	r2, #128	; 0x80
 800d086:	4293      	cmp	r3, r2
 800d088:	bf0c      	ite	eq
 800d08a:	4613      	moveq	r3, r2
 800d08c:	2340      	movne	r3, #64	; 0x40
 800d08e:	e7c1      	b.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <ai_array_to_buffer_fmt+0xdc>)
 800d092:	4003      	ands	r3, r0
 800d094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d098:	e7bc      	b.n	800d014 <ai_array_to_buffer_fmt+0x34>
 800d09a:	bf00      	nop
 800d09c:	00840040 	.word	0x00840040
 800d0a0:	00040840 	.word	0x00040840
 800d0a4:	00041040 	.word	0x00041040
 800d0a8:	0004084f 	.word	0x0004084f
 800d0ac:	00040447 	.word	0x00040447
 800d0b0:	00840840 	.word	0x00840840
 800d0b4:	00841040 	.word	0x00841040
 800d0b8:	0084084f 	.word	0x0084084f
 800d0bc:	00803fff 	.word	0x00803fff

0800d0c0 <ai_array_get_data_byte_size>:
 800d0c0:	b169      	cbz	r1, 800d0de <ai_array_get_data_byte_size+0x1e>
 800d0c2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d0c6:	fb03 f101 	mul.w	r1, r3, r1
 800d0ca:	1dcb      	adds	r3, r1, #7
 800d0cc:	f023 0307 	bic.w	r3, r3, #7
 800d0d0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d0d4:	fa23 f000 	lsr.w	r0, r3, r0
 800d0d8:	3007      	adds	r0, #7
 800d0da:	08c0      	lsrs	r0, r0, #3
 800d0dc:	4770      	bx	lr
 800d0de:	4608      	mov	r0, r1
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop

0800d0e4 <ai_version_get>:
 800d0e4:	0212      	lsls	r2, r2, #8
 800d0e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d0ea:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d0ee:	4770      	bx	lr

0800d0f0 <get_tensor_byte_size>:
 800d0f0:	b410      	push	{r4}
 800d0f2:	6983      	ldr	r3, [r0, #24]
 800d0f4:	68c4      	ldr	r4, [r0, #12]
 800d0f6:	6941      	ldr	r1, [r0, #20]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	68e0      	ldr	r0, [r4, #12]
 800d0fc:	4a07      	ldr	r2, [pc, #28]	; (800d11c <get_tensor_byte_size+0x2c>)
 800d0fe:	68c9      	ldr	r1, [r1, #12]
 800d100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d104:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800d108:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d10c:	fb01 f000 	mul.w	r0, r1, r0
 800d110:	4293      	cmp	r3, r2
 800d112:	bf04      	itt	eq
 800d114:	3007      	addeq	r0, #7
 800d116:	08c0      	lsreq	r0, r0, #3
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	000400c0 	.word	0x000400c0

0800d120 <malloc>:
 800d120:	4b02      	ldr	r3, [pc, #8]	; (800d12c <malloc+0xc>)
 800d122:	4601      	mov	r1, r0
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	f000 b823 	b.w	800d170 <_malloc_r>
 800d12a:	bf00      	nop
 800d12c:	20000c18 	.word	0x20000c18

0800d130 <sbrk_aligned>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	4e0e      	ldr	r6, [pc, #56]	; (800d16c <sbrk_aligned+0x3c>)
 800d134:	460c      	mov	r4, r1
 800d136:	6831      	ldr	r1, [r6, #0]
 800d138:	4605      	mov	r5, r0
 800d13a:	b911      	cbnz	r1, 800d142 <sbrk_aligned+0x12>
 800d13c:	f000 ff52 	bl	800dfe4 <_sbrk_r>
 800d140:	6030      	str	r0, [r6, #0]
 800d142:	4621      	mov	r1, r4
 800d144:	4628      	mov	r0, r5
 800d146:	f000 ff4d 	bl	800dfe4 <_sbrk_r>
 800d14a:	1c43      	adds	r3, r0, #1
 800d14c:	d00a      	beq.n	800d164 <sbrk_aligned+0x34>
 800d14e:	1cc4      	adds	r4, r0, #3
 800d150:	f024 0403 	bic.w	r4, r4, #3
 800d154:	42a0      	cmp	r0, r4
 800d156:	d007      	beq.n	800d168 <sbrk_aligned+0x38>
 800d158:	1a21      	subs	r1, r4, r0
 800d15a:	4628      	mov	r0, r5
 800d15c:	f000 ff42 	bl	800dfe4 <_sbrk_r>
 800d160:	3001      	adds	r0, #1
 800d162:	d101      	bne.n	800d168 <sbrk_aligned+0x38>
 800d164:	f04f 34ff 	mov.w	r4, #4294967295
 800d168:	4620      	mov	r0, r4
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
 800d16c:	2000341c 	.word	0x2000341c

0800d170 <_malloc_r>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	1ccd      	adds	r5, r1, #3
 800d176:	f025 0503 	bic.w	r5, r5, #3
 800d17a:	3508      	adds	r5, #8
 800d17c:	2d0c      	cmp	r5, #12
 800d17e:	bf38      	it	cc
 800d180:	250c      	movcc	r5, #12
 800d182:	2d00      	cmp	r5, #0
 800d184:	4607      	mov	r7, r0
 800d186:	db01      	blt.n	800d18c <_malloc_r+0x1c>
 800d188:	42a9      	cmp	r1, r5
 800d18a:	d905      	bls.n	800d198 <_malloc_r+0x28>
 800d18c:	230c      	movs	r3, #12
 800d18e:	603b      	str	r3, [r7, #0]
 800d190:	2600      	movs	r6, #0
 800d192:	4630      	mov	r0, r6
 800d194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d26c <_malloc_r+0xfc>
 800d19c:	f000 f868 	bl	800d270 <__malloc_lock>
 800d1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	bb5c      	cbnz	r4, 800d200 <_malloc_r+0x90>
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f7ff ffc0 	bl	800d130 <sbrk_aligned>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	d155      	bne.n	800d262 <_malloc_r+0xf2>
 800d1b6:	f8d8 4000 	ldr.w	r4, [r8]
 800d1ba:	4626      	mov	r6, r4
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	d145      	bne.n	800d24c <_malloc_r+0xdc>
 800d1c0:	2c00      	cmp	r4, #0
 800d1c2:	d048      	beq.n	800d256 <_malloc_r+0xe6>
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	eb04 0903 	add.w	r9, r4, r3
 800d1ce:	f000 ff09 	bl	800dfe4 <_sbrk_r>
 800d1d2:	4581      	cmp	r9, r0
 800d1d4:	d13f      	bne.n	800d256 <_malloc_r+0xe6>
 800d1d6:	6821      	ldr	r1, [r4, #0]
 800d1d8:	1a6d      	subs	r5, r5, r1
 800d1da:	4629      	mov	r1, r5
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f7ff ffa7 	bl	800d130 <sbrk_aligned>
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	d037      	beq.n	800d256 <_malloc_r+0xe6>
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	442b      	add	r3, r5
 800d1ea:	6023      	str	r3, [r4, #0]
 800d1ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d038      	beq.n	800d266 <_malloc_r+0xf6>
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	42a2      	cmp	r2, r4
 800d1f8:	d12b      	bne.n	800d252 <_malloc_r+0xe2>
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	605a      	str	r2, [r3, #4]
 800d1fe:	e00f      	b.n	800d220 <_malloc_r+0xb0>
 800d200:	6822      	ldr	r2, [r4, #0]
 800d202:	1b52      	subs	r2, r2, r5
 800d204:	d41f      	bmi.n	800d246 <_malloc_r+0xd6>
 800d206:	2a0b      	cmp	r2, #11
 800d208:	d917      	bls.n	800d23a <_malloc_r+0xca>
 800d20a:	1961      	adds	r1, r4, r5
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	6025      	str	r5, [r4, #0]
 800d210:	bf18      	it	ne
 800d212:	6059      	strne	r1, [r3, #4]
 800d214:	6863      	ldr	r3, [r4, #4]
 800d216:	bf08      	it	eq
 800d218:	f8c8 1000 	streq.w	r1, [r8]
 800d21c:	5162      	str	r2, [r4, r5]
 800d21e:	604b      	str	r3, [r1, #4]
 800d220:	4638      	mov	r0, r7
 800d222:	f104 060b 	add.w	r6, r4, #11
 800d226:	f000 f829 	bl	800d27c <__malloc_unlock>
 800d22a:	f026 0607 	bic.w	r6, r6, #7
 800d22e:	1d23      	adds	r3, r4, #4
 800d230:	1af2      	subs	r2, r6, r3
 800d232:	d0ae      	beq.n	800d192 <_malloc_r+0x22>
 800d234:	1b9b      	subs	r3, r3, r6
 800d236:	50a3      	str	r3, [r4, r2]
 800d238:	e7ab      	b.n	800d192 <_malloc_r+0x22>
 800d23a:	42a3      	cmp	r3, r4
 800d23c:	6862      	ldr	r2, [r4, #4]
 800d23e:	d1dd      	bne.n	800d1fc <_malloc_r+0x8c>
 800d240:	f8c8 2000 	str.w	r2, [r8]
 800d244:	e7ec      	b.n	800d220 <_malloc_r+0xb0>
 800d246:	4623      	mov	r3, r4
 800d248:	6864      	ldr	r4, [r4, #4]
 800d24a:	e7ac      	b.n	800d1a6 <_malloc_r+0x36>
 800d24c:	4634      	mov	r4, r6
 800d24e:	6876      	ldr	r6, [r6, #4]
 800d250:	e7b4      	b.n	800d1bc <_malloc_r+0x4c>
 800d252:	4613      	mov	r3, r2
 800d254:	e7cc      	b.n	800d1f0 <_malloc_r+0x80>
 800d256:	230c      	movs	r3, #12
 800d258:	603b      	str	r3, [r7, #0]
 800d25a:	4638      	mov	r0, r7
 800d25c:	f000 f80e 	bl	800d27c <__malloc_unlock>
 800d260:	e797      	b.n	800d192 <_malloc_r+0x22>
 800d262:	6025      	str	r5, [r4, #0]
 800d264:	e7dc      	b.n	800d220 <_malloc_r+0xb0>
 800d266:	605b      	str	r3, [r3, #4]
 800d268:	deff      	udf	#255	; 0xff
 800d26a:	bf00      	nop
 800d26c:	20003418 	.word	0x20003418

0800d270 <__malloc_lock>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__malloc_lock+0x8>)
 800d272:	f000 bf04 	b.w	800e07e <__retarget_lock_acquire_recursive>
 800d276:	bf00      	nop
 800d278:	20003560 	.word	0x20003560

0800d27c <__malloc_unlock>:
 800d27c:	4801      	ldr	r0, [pc, #4]	; (800d284 <__malloc_unlock+0x8>)
 800d27e:	f000 beff 	b.w	800e080 <__retarget_lock_release_recursive>
 800d282:	bf00      	nop
 800d284:	20003560 	.word	0x20003560

0800d288 <__cvt>:
 800d288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	ec55 4b10 	vmov	r4, r5, d0
 800d290:	2d00      	cmp	r5, #0
 800d292:	460e      	mov	r6, r1
 800d294:	4619      	mov	r1, r3
 800d296:	462b      	mov	r3, r5
 800d298:	bfbb      	ittet	lt
 800d29a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d29e:	461d      	movlt	r5, r3
 800d2a0:	2300      	movge	r3, #0
 800d2a2:	232d      	movlt	r3, #45	; 0x2d
 800d2a4:	700b      	strb	r3, [r1, #0]
 800d2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d2ac:	4691      	mov	r9, r2
 800d2ae:	f023 0820 	bic.w	r8, r3, #32
 800d2b2:	bfbc      	itt	lt
 800d2b4:	4622      	movlt	r2, r4
 800d2b6:	4614      	movlt	r4, r2
 800d2b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2bc:	d005      	beq.n	800d2ca <__cvt+0x42>
 800d2be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d2c2:	d100      	bne.n	800d2c6 <__cvt+0x3e>
 800d2c4:	3601      	adds	r6, #1
 800d2c6:	2102      	movs	r1, #2
 800d2c8:	e000      	b.n	800d2cc <__cvt+0x44>
 800d2ca:	2103      	movs	r1, #3
 800d2cc:	ab03      	add	r3, sp, #12
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	ab02      	add	r3, sp, #8
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	ec45 4b10 	vmov	d0, r4, r5
 800d2d8:	4653      	mov	r3, sl
 800d2da:	4632      	mov	r2, r6
 800d2dc:	f000 ff68 	bl	800e1b0 <_dtoa_r>
 800d2e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	d102      	bne.n	800d2ee <__cvt+0x66>
 800d2e8:	f019 0f01 	tst.w	r9, #1
 800d2ec:	d022      	beq.n	800d334 <__cvt+0xac>
 800d2ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2f2:	eb07 0906 	add.w	r9, r7, r6
 800d2f6:	d110      	bne.n	800d31a <__cvt+0x92>
 800d2f8:	783b      	ldrb	r3, [r7, #0]
 800d2fa:	2b30      	cmp	r3, #48	; 0x30
 800d2fc:	d10a      	bne.n	800d314 <__cvt+0x8c>
 800d2fe:	2200      	movs	r2, #0
 800d300:	2300      	movs	r3, #0
 800d302:	4620      	mov	r0, r4
 800d304:	4629      	mov	r1, r5
 800d306:	f7f3 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d30a:	b918      	cbnz	r0, 800d314 <__cvt+0x8c>
 800d30c:	f1c6 0601 	rsb	r6, r6, #1
 800d310:	f8ca 6000 	str.w	r6, [sl]
 800d314:	f8da 3000 	ldr.w	r3, [sl]
 800d318:	4499      	add	r9, r3
 800d31a:	2200      	movs	r2, #0
 800d31c:	2300      	movs	r3, #0
 800d31e:	4620      	mov	r0, r4
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d326:	b108      	cbz	r0, 800d32c <__cvt+0xa4>
 800d328:	f8cd 900c 	str.w	r9, [sp, #12]
 800d32c:	2230      	movs	r2, #48	; 0x30
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	454b      	cmp	r3, r9
 800d332:	d307      	bcc.n	800d344 <__cvt+0xbc>
 800d334:	9b03      	ldr	r3, [sp, #12]
 800d336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d338:	1bdb      	subs	r3, r3, r7
 800d33a:	4638      	mov	r0, r7
 800d33c:	6013      	str	r3, [r2, #0]
 800d33e:	b004      	add	sp, #16
 800d340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d344:	1c59      	adds	r1, r3, #1
 800d346:	9103      	str	r1, [sp, #12]
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	e7f0      	b.n	800d32e <__cvt+0xa6>

0800d34c <__exponent>:
 800d34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d34e:	4603      	mov	r3, r0
 800d350:	2900      	cmp	r1, #0
 800d352:	bfb8      	it	lt
 800d354:	4249      	neglt	r1, r1
 800d356:	f803 2b02 	strb.w	r2, [r3], #2
 800d35a:	bfb4      	ite	lt
 800d35c:	222d      	movlt	r2, #45	; 0x2d
 800d35e:	222b      	movge	r2, #43	; 0x2b
 800d360:	2909      	cmp	r1, #9
 800d362:	7042      	strb	r2, [r0, #1]
 800d364:	dd2a      	ble.n	800d3bc <__exponent+0x70>
 800d366:	f10d 0207 	add.w	r2, sp, #7
 800d36a:	4617      	mov	r7, r2
 800d36c:	260a      	movs	r6, #10
 800d36e:	4694      	mov	ip, r2
 800d370:	fb91 f5f6 	sdiv	r5, r1, r6
 800d374:	fb06 1415 	mls	r4, r6, r5, r1
 800d378:	3430      	adds	r4, #48	; 0x30
 800d37a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d37e:	460c      	mov	r4, r1
 800d380:	2c63      	cmp	r4, #99	; 0x63
 800d382:	f102 32ff 	add.w	r2, r2, #4294967295
 800d386:	4629      	mov	r1, r5
 800d388:	dcf1      	bgt.n	800d36e <__exponent+0x22>
 800d38a:	3130      	adds	r1, #48	; 0x30
 800d38c:	f1ac 0402 	sub.w	r4, ip, #2
 800d390:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d394:	1c41      	adds	r1, r0, #1
 800d396:	4622      	mov	r2, r4
 800d398:	42ba      	cmp	r2, r7
 800d39a:	d30a      	bcc.n	800d3b2 <__exponent+0x66>
 800d39c:	f10d 0209 	add.w	r2, sp, #9
 800d3a0:	eba2 020c 	sub.w	r2, r2, ip
 800d3a4:	42bc      	cmp	r4, r7
 800d3a6:	bf88      	it	hi
 800d3a8:	2200      	movhi	r2, #0
 800d3aa:	4413      	add	r3, r2
 800d3ac:	1a18      	subs	r0, r3, r0
 800d3ae:	b003      	add	sp, #12
 800d3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d3b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d3ba:	e7ed      	b.n	800d398 <__exponent+0x4c>
 800d3bc:	2330      	movs	r3, #48	; 0x30
 800d3be:	3130      	adds	r1, #48	; 0x30
 800d3c0:	7083      	strb	r3, [r0, #2]
 800d3c2:	70c1      	strb	r1, [r0, #3]
 800d3c4:	1d03      	adds	r3, r0, #4
 800d3c6:	e7f1      	b.n	800d3ac <__exponent+0x60>

0800d3c8 <_printf_float>:
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	ed2d 8b02 	vpush	{d8}
 800d3d0:	b08d      	sub	sp, #52	; 0x34
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d3d8:	4616      	mov	r6, r2
 800d3da:	461f      	mov	r7, r3
 800d3dc:	4605      	mov	r5, r0
 800d3de:	f000 fdc9 	bl	800df74 <_localeconv_r>
 800d3e2:	f8d0 a000 	ldr.w	sl, [r0]
 800d3e6:	4650      	mov	r0, sl
 800d3e8:	f7f2 ff42 	bl	8000270 <strlen>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	9305      	str	r3, [sp, #20]
 800d3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800d3f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d3fc:	3307      	adds	r3, #7
 800d3fe:	f023 0307 	bic.w	r3, r3, #7
 800d402:	f103 0208 	add.w	r2, r3, #8
 800d406:	f8c8 2000 	str.w	r2, [r8]
 800d40a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d40e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d412:	9307      	str	r3, [sp, #28]
 800d414:	f8cd 8018 	str.w	r8, [sp, #24]
 800d418:	ee08 0a10 	vmov	s16, r0
 800d41c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d424:	4b9e      	ldr	r3, [pc, #632]	; (800d6a0 <_printf_float+0x2d8>)
 800d426:	f04f 32ff 	mov.w	r2, #4294967295
 800d42a:	f7f3 fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800d42e:	bb88      	cbnz	r0, 800d494 <_printf_float+0xcc>
 800d430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d434:	4b9a      	ldr	r3, [pc, #616]	; (800d6a0 <_printf_float+0x2d8>)
 800d436:	f04f 32ff 	mov.w	r2, #4294967295
 800d43a:	f7f3 fb59 	bl	8000af0 <__aeabi_dcmple>
 800d43e:	bb48      	cbnz	r0, 800d494 <_printf_float+0xcc>
 800d440:	2200      	movs	r2, #0
 800d442:	2300      	movs	r3, #0
 800d444:	4640      	mov	r0, r8
 800d446:	4649      	mov	r1, r9
 800d448:	f7f3 fb48 	bl	8000adc <__aeabi_dcmplt>
 800d44c:	b110      	cbz	r0, 800d454 <_printf_float+0x8c>
 800d44e:	232d      	movs	r3, #45	; 0x2d
 800d450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d454:	4a93      	ldr	r2, [pc, #588]	; (800d6a4 <_printf_float+0x2dc>)
 800d456:	4b94      	ldr	r3, [pc, #592]	; (800d6a8 <_printf_float+0x2e0>)
 800d458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d45c:	bf94      	ite	ls
 800d45e:	4690      	movls	r8, r2
 800d460:	4698      	movhi	r8, r3
 800d462:	2303      	movs	r3, #3
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	9b05      	ldr	r3, [sp, #20]
 800d468:	f023 0304 	bic.w	r3, r3, #4
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	f04f 0900 	mov.w	r9, #0
 800d472:	9700      	str	r7, [sp, #0]
 800d474:	4633      	mov	r3, r6
 800d476:	aa0b      	add	r2, sp, #44	; 0x2c
 800d478:	4621      	mov	r1, r4
 800d47a:	4628      	mov	r0, r5
 800d47c:	f000 f9da 	bl	800d834 <_printf_common>
 800d480:	3001      	adds	r0, #1
 800d482:	f040 8090 	bne.w	800d5a6 <_printf_float+0x1de>
 800d486:	f04f 30ff 	mov.w	r0, #4294967295
 800d48a:	b00d      	add	sp, #52	; 0x34
 800d48c:	ecbd 8b02 	vpop	{d8}
 800d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	4642      	mov	r2, r8
 800d496:	464b      	mov	r3, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	4649      	mov	r1, r9
 800d49c:	f7f3 fb46 	bl	8000b2c <__aeabi_dcmpun>
 800d4a0:	b140      	cbz	r0, 800d4b4 <_printf_float+0xec>
 800d4a2:	464b      	mov	r3, r9
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	bfbc      	itt	lt
 800d4a8:	232d      	movlt	r3, #45	; 0x2d
 800d4aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d4ae:	4a7f      	ldr	r2, [pc, #508]	; (800d6ac <_printf_float+0x2e4>)
 800d4b0:	4b7f      	ldr	r3, [pc, #508]	; (800d6b0 <_printf_float+0x2e8>)
 800d4b2:	e7d1      	b.n	800d458 <_printf_float+0x90>
 800d4b4:	6863      	ldr	r3, [r4, #4]
 800d4b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d4ba:	9206      	str	r2, [sp, #24]
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	d13f      	bne.n	800d540 <_printf_float+0x178>
 800d4c0:	2306      	movs	r3, #6
 800d4c2:	6063      	str	r3, [r4, #4]
 800d4c4:	9b05      	ldr	r3, [sp, #20]
 800d4c6:	6861      	ldr	r1, [r4, #4]
 800d4c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	9303      	str	r3, [sp, #12]
 800d4d0:	ab0a      	add	r3, sp, #40	; 0x28
 800d4d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d4d6:	ab09      	add	r3, sp, #36	; 0x24
 800d4d8:	ec49 8b10 	vmov	d0, r8, r9
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	6022      	str	r2, [r4, #0]
 800d4e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f7ff fecf 	bl	800d288 <__cvt>
 800d4ea:	9b06      	ldr	r3, [sp, #24]
 800d4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4ee:	2b47      	cmp	r3, #71	; 0x47
 800d4f0:	4680      	mov	r8, r0
 800d4f2:	d108      	bne.n	800d506 <_printf_float+0x13e>
 800d4f4:	1cc8      	adds	r0, r1, #3
 800d4f6:	db02      	blt.n	800d4fe <_printf_float+0x136>
 800d4f8:	6863      	ldr	r3, [r4, #4]
 800d4fa:	4299      	cmp	r1, r3
 800d4fc:	dd41      	ble.n	800d582 <_printf_float+0x1ba>
 800d4fe:	f1ab 0302 	sub.w	r3, fp, #2
 800d502:	fa5f fb83 	uxtb.w	fp, r3
 800d506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d50a:	d820      	bhi.n	800d54e <_printf_float+0x186>
 800d50c:	3901      	subs	r1, #1
 800d50e:	465a      	mov	r2, fp
 800d510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d514:	9109      	str	r1, [sp, #36]	; 0x24
 800d516:	f7ff ff19 	bl	800d34c <__exponent>
 800d51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d51c:	1813      	adds	r3, r2, r0
 800d51e:	2a01      	cmp	r2, #1
 800d520:	4681      	mov	r9, r0
 800d522:	6123      	str	r3, [r4, #16]
 800d524:	dc02      	bgt.n	800d52c <_printf_float+0x164>
 800d526:	6822      	ldr	r2, [r4, #0]
 800d528:	07d2      	lsls	r2, r2, #31
 800d52a:	d501      	bpl.n	800d530 <_printf_float+0x168>
 800d52c:	3301      	adds	r3, #1
 800d52e:	6123      	str	r3, [r4, #16]
 800d530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d534:	2b00      	cmp	r3, #0
 800d536:	d09c      	beq.n	800d472 <_printf_float+0xaa>
 800d538:	232d      	movs	r3, #45	; 0x2d
 800d53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d53e:	e798      	b.n	800d472 <_printf_float+0xaa>
 800d540:	9a06      	ldr	r2, [sp, #24]
 800d542:	2a47      	cmp	r2, #71	; 0x47
 800d544:	d1be      	bne.n	800d4c4 <_printf_float+0xfc>
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1bc      	bne.n	800d4c4 <_printf_float+0xfc>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e7b9      	b.n	800d4c2 <_printf_float+0xfa>
 800d54e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d552:	d118      	bne.n	800d586 <_printf_float+0x1be>
 800d554:	2900      	cmp	r1, #0
 800d556:	6863      	ldr	r3, [r4, #4]
 800d558:	dd0b      	ble.n	800d572 <_printf_float+0x1aa>
 800d55a:	6121      	str	r1, [r4, #16]
 800d55c:	b913      	cbnz	r3, 800d564 <_printf_float+0x19c>
 800d55e:	6822      	ldr	r2, [r4, #0]
 800d560:	07d0      	lsls	r0, r2, #31
 800d562:	d502      	bpl.n	800d56a <_printf_float+0x1a2>
 800d564:	3301      	adds	r3, #1
 800d566:	440b      	add	r3, r1
 800d568:	6123      	str	r3, [r4, #16]
 800d56a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d56c:	f04f 0900 	mov.w	r9, #0
 800d570:	e7de      	b.n	800d530 <_printf_float+0x168>
 800d572:	b913      	cbnz	r3, 800d57a <_printf_float+0x1b2>
 800d574:	6822      	ldr	r2, [r4, #0]
 800d576:	07d2      	lsls	r2, r2, #31
 800d578:	d501      	bpl.n	800d57e <_printf_float+0x1b6>
 800d57a:	3302      	adds	r3, #2
 800d57c:	e7f4      	b.n	800d568 <_printf_float+0x1a0>
 800d57e:	2301      	movs	r3, #1
 800d580:	e7f2      	b.n	800d568 <_printf_float+0x1a0>
 800d582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d588:	4299      	cmp	r1, r3
 800d58a:	db05      	blt.n	800d598 <_printf_float+0x1d0>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	6121      	str	r1, [r4, #16]
 800d590:	07d8      	lsls	r0, r3, #31
 800d592:	d5ea      	bpl.n	800d56a <_printf_float+0x1a2>
 800d594:	1c4b      	adds	r3, r1, #1
 800d596:	e7e7      	b.n	800d568 <_printf_float+0x1a0>
 800d598:	2900      	cmp	r1, #0
 800d59a:	bfd4      	ite	le
 800d59c:	f1c1 0202 	rsble	r2, r1, #2
 800d5a0:	2201      	movgt	r2, #1
 800d5a2:	4413      	add	r3, r2
 800d5a4:	e7e0      	b.n	800d568 <_printf_float+0x1a0>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	055a      	lsls	r2, r3, #21
 800d5aa:	d407      	bmi.n	800d5bc <_printf_float+0x1f4>
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	4642      	mov	r2, r8
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	47b8      	blx	r7
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d12c      	bne.n	800d614 <_printf_float+0x24c>
 800d5ba:	e764      	b.n	800d486 <_printf_float+0xbe>
 800d5bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d5c0:	f240 80e0 	bls.w	800d784 <_printf_float+0x3bc>
 800d5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f7f3 fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d034      	beq.n	800d63e <_printf_float+0x276>
 800d5d4:	4a37      	ldr	r2, [pc, #220]	; (800d6b4 <_printf_float+0x2ec>)
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	4631      	mov	r1, r6
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b8      	blx	r7
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f43f af51 	beq.w	800d486 <_printf_float+0xbe>
 800d5e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	db02      	blt.n	800d5f2 <_printf_float+0x22a>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	07d8      	lsls	r0, r3, #31
 800d5f0:	d510      	bpl.n	800d614 <_printf_float+0x24c>
 800d5f2:	ee18 3a10 	vmov	r3, s16
 800d5f6:	4652      	mov	r2, sl
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	47b8      	blx	r7
 800d5fe:	3001      	adds	r0, #1
 800d600:	f43f af41 	beq.w	800d486 <_printf_float+0xbe>
 800d604:	f04f 0800 	mov.w	r8, #0
 800d608:	f104 091a 	add.w	r9, r4, #26
 800d60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d60e:	3b01      	subs	r3, #1
 800d610:	4543      	cmp	r3, r8
 800d612:	dc09      	bgt.n	800d628 <_printf_float+0x260>
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	079b      	lsls	r3, r3, #30
 800d618:	f100 8107 	bmi.w	800d82a <_printf_float+0x462>
 800d61c:	68e0      	ldr	r0, [r4, #12]
 800d61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d620:	4298      	cmp	r0, r3
 800d622:	bfb8      	it	lt
 800d624:	4618      	movlt	r0, r3
 800d626:	e730      	b.n	800d48a <_printf_float+0xc2>
 800d628:	2301      	movs	r3, #1
 800d62a:	464a      	mov	r2, r9
 800d62c:	4631      	mov	r1, r6
 800d62e:	4628      	mov	r0, r5
 800d630:	47b8      	blx	r7
 800d632:	3001      	adds	r0, #1
 800d634:	f43f af27 	beq.w	800d486 <_printf_float+0xbe>
 800d638:	f108 0801 	add.w	r8, r8, #1
 800d63c:	e7e6      	b.n	800d60c <_printf_float+0x244>
 800d63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d640:	2b00      	cmp	r3, #0
 800d642:	dc39      	bgt.n	800d6b8 <_printf_float+0x2f0>
 800d644:	4a1b      	ldr	r2, [pc, #108]	; (800d6b4 <_printf_float+0x2ec>)
 800d646:	2301      	movs	r3, #1
 800d648:	4631      	mov	r1, r6
 800d64a:	4628      	mov	r0, r5
 800d64c:	47b8      	blx	r7
 800d64e:	3001      	adds	r0, #1
 800d650:	f43f af19 	beq.w	800d486 <_printf_float+0xbe>
 800d654:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d658:	4313      	orrs	r3, r2
 800d65a:	d102      	bne.n	800d662 <_printf_float+0x29a>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	07d9      	lsls	r1, r3, #31
 800d660:	d5d8      	bpl.n	800d614 <_printf_float+0x24c>
 800d662:	ee18 3a10 	vmov	r3, s16
 800d666:	4652      	mov	r2, sl
 800d668:	4631      	mov	r1, r6
 800d66a:	4628      	mov	r0, r5
 800d66c:	47b8      	blx	r7
 800d66e:	3001      	adds	r0, #1
 800d670:	f43f af09 	beq.w	800d486 <_printf_float+0xbe>
 800d674:	f04f 0900 	mov.w	r9, #0
 800d678:	f104 0a1a 	add.w	sl, r4, #26
 800d67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d67e:	425b      	negs	r3, r3
 800d680:	454b      	cmp	r3, r9
 800d682:	dc01      	bgt.n	800d688 <_printf_float+0x2c0>
 800d684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d686:	e792      	b.n	800d5ae <_printf_float+0x1e6>
 800d688:	2301      	movs	r3, #1
 800d68a:	4652      	mov	r2, sl
 800d68c:	4631      	mov	r1, r6
 800d68e:	4628      	mov	r0, r5
 800d690:	47b8      	blx	r7
 800d692:	3001      	adds	r0, #1
 800d694:	f43f aef7 	beq.w	800d486 <_printf_float+0xbe>
 800d698:	f109 0901 	add.w	r9, r9, #1
 800d69c:	e7ee      	b.n	800d67c <_printf_float+0x2b4>
 800d69e:	bf00      	nop
 800d6a0:	7fefffff 	.word	0x7fefffff
 800d6a4:	0801bcb0 	.word	0x0801bcb0
 800d6a8:	0801bcb4 	.word	0x0801bcb4
 800d6ac:	0801bcb8 	.word	0x0801bcb8
 800d6b0:	0801bcbc 	.word	0x0801bcbc
 800d6b4:	0801bcc0 	.word	0x0801bcc0
 800d6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	bfa8      	it	ge
 800d6c0:	461a      	movge	r2, r3
 800d6c2:	2a00      	cmp	r2, #0
 800d6c4:	4691      	mov	r9, r2
 800d6c6:	dc37      	bgt.n	800d738 <_printf_float+0x370>
 800d6c8:	f04f 0b00 	mov.w	fp, #0
 800d6cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6d0:	f104 021a 	add.w	r2, r4, #26
 800d6d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6d6:	9305      	str	r3, [sp, #20]
 800d6d8:	eba3 0309 	sub.w	r3, r3, r9
 800d6dc:	455b      	cmp	r3, fp
 800d6de:	dc33      	bgt.n	800d748 <_printf_float+0x380>
 800d6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	db3b      	blt.n	800d760 <_printf_float+0x398>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	07da      	lsls	r2, r3, #31
 800d6ec:	d438      	bmi.n	800d760 <_printf_float+0x398>
 800d6ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d6f2:	eba2 0903 	sub.w	r9, r2, r3
 800d6f6:	9b05      	ldr	r3, [sp, #20]
 800d6f8:	1ad2      	subs	r2, r2, r3
 800d6fa:	4591      	cmp	r9, r2
 800d6fc:	bfa8      	it	ge
 800d6fe:	4691      	movge	r9, r2
 800d700:	f1b9 0f00 	cmp.w	r9, #0
 800d704:	dc35      	bgt.n	800d772 <_printf_float+0x3aa>
 800d706:	f04f 0800 	mov.w	r8, #0
 800d70a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d70e:	f104 0a1a 	add.w	sl, r4, #26
 800d712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d716:	1a9b      	subs	r3, r3, r2
 800d718:	eba3 0309 	sub.w	r3, r3, r9
 800d71c:	4543      	cmp	r3, r8
 800d71e:	f77f af79 	ble.w	800d614 <_printf_float+0x24c>
 800d722:	2301      	movs	r3, #1
 800d724:	4652      	mov	r2, sl
 800d726:	4631      	mov	r1, r6
 800d728:	4628      	mov	r0, r5
 800d72a:	47b8      	blx	r7
 800d72c:	3001      	adds	r0, #1
 800d72e:	f43f aeaa 	beq.w	800d486 <_printf_float+0xbe>
 800d732:	f108 0801 	add.w	r8, r8, #1
 800d736:	e7ec      	b.n	800d712 <_printf_float+0x34a>
 800d738:	4613      	mov	r3, r2
 800d73a:	4631      	mov	r1, r6
 800d73c:	4642      	mov	r2, r8
 800d73e:	4628      	mov	r0, r5
 800d740:	47b8      	blx	r7
 800d742:	3001      	adds	r0, #1
 800d744:	d1c0      	bne.n	800d6c8 <_printf_float+0x300>
 800d746:	e69e      	b.n	800d486 <_printf_float+0xbe>
 800d748:	2301      	movs	r3, #1
 800d74a:	4631      	mov	r1, r6
 800d74c:	4628      	mov	r0, r5
 800d74e:	9205      	str	r2, [sp, #20]
 800d750:	47b8      	blx	r7
 800d752:	3001      	adds	r0, #1
 800d754:	f43f ae97 	beq.w	800d486 <_printf_float+0xbe>
 800d758:	9a05      	ldr	r2, [sp, #20]
 800d75a:	f10b 0b01 	add.w	fp, fp, #1
 800d75e:	e7b9      	b.n	800d6d4 <_printf_float+0x30c>
 800d760:	ee18 3a10 	vmov	r3, s16
 800d764:	4652      	mov	r2, sl
 800d766:	4631      	mov	r1, r6
 800d768:	4628      	mov	r0, r5
 800d76a:	47b8      	blx	r7
 800d76c:	3001      	adds	r0, #1
 800d76e:	d1be      	bne.n	800d6ee <_printf_float+0x326>
 800d770:	e689      	b.n	800d486 <_printf_float+0xbe>
 800d772:	9a05      	ldr	r2, [sp, #20]
 800d774:	464b      	mov	r3, r9
 800d776:	4442      	add	r2, r8
 800d778:	4631      	mov	r1, r6
 800d77a:	4628      	mov	r0, r5
 800d77c:	47b8      	blx	r7
 800d77e:	3001      	adds	r0, #1
 800d780:	d1c1      	bne.n	800d706 <_printf_float+0x33e>
 800d782:	e680      	b.n	800d486 <_printf_float+0xbe>
 800d784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d786:	2a01      	cmp	r2, #1
 800d788:	dc01      	bgt.n	800d78e <_printf_float+0x3c6>
 800d78a:	07db      	lsls	r3, r3, #31
 800d78c:	d53a      	bpl.n	800d804 <_printf_float+0x43c>
 800d78e:	2301      	movs	r3, #1
 800d790:	4642      	mov	r2, r8
 800d792:	4631      	mov	r1, r6
 800d794:	4628      	mov	r0, r5
 800d796:	47b8      	blx	r7
 800d798:	3001      	adds	r0, #1
 800d79a:	f43f ae74 	beq.w	800d486 <_printf_float+0xbe>
 800d79e:	ee18 3a10 	vmov	r3, s16
 800d7a2:	4652      	mov	r2, sl
 800d7a4:	4631      	mov	r1, r6
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	47b8      	blx	r7
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	f43f ae6b 	beq.w	800d486 <_printf_float+0xbe>
 800d7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d7bc:	f7f3 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7c0:	b9d8      	cbnz	r0, 800d7fa <_printf_float+0x432>
 800d7c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d7c6:	f108 0201 	add.w	r2, r8, #1
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d10e      	bne.n	800d7f2 <_printf_float+0x42a>
 800d7d4:	e657      	b.n	800d486 <_printf_float+0xbe>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4652      	mov	r2, sl
 800d7da:	4631      	mov	r1, r6
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b8      	blx	r7
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	f43f ae50 	beq.w	800d486 <_printf_float+0xbe>
 800d7e6:	f108 0801 	add.w	r8, r8, #1
 800d7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4543      	cmp	r3, r8
 800d7f0:	dcf1      	bgt.n	800d7d6 <_printf_float+0x40e>
 800d7f2:	464b      	mov	r3, r9
 800d7f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d7f8:	e6da      	b.n	800d5b0 <_printf_float+0x1e8>
 800d7fa:	f04f 0800 	mov.w	r8, #0
 800d7fe:	f104 0a1a 	add.w	sl, r4, #26
 800d802:	e7f2      	b.n	800d7ea <_printf_float+0x422>
 800d804:	2301      	movs	r3, #1
 800d806:	4642      	mov	r2, r8
 800d808:	e7df      	b.n	800d7ca <_printf_float+0x402>
 800d80a:	2301      	movs	r3, #1
 800d80c:	464a      	mov	r2, r9
 800d80e:	4631      	mov	r1, r6
 800d810:	4628      	mov	r0, r5
 800d812:	47b8      	blx	r7
 800d814:	3001      	adds	r0, #1
 800d816:	f43f ae36 	beq.w	800d486 <_printf_float+0xbe>
 800d81a:	f108 0801 	add.w	r8, r8, #1
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d822:	1a5b      	subs	r3, r3, r1
 800d824:	4543      	cmp	r3, r8
 800d826:	dcf0      	bgt.n	800d80a <_printf_float+0x442>
 800d828:	e6f8      	b.n	800d61c <_printf_float+0x254>
 800d82a:	f04f 0800 	mov.w	r8, #0
 800d82e:	f104 0919 	add.w	r9, r4, #25
 800d832:	e7f4      	b.n	800d81e <_printf_float+0x456>

0800d834 <_printf_common>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	4616      	mov	r6, r2
 800d83a:	4699      	mov	r9, r3
 800d83c:	688a      	ldr	r2, [r1, #8]
 800d83e:	690b      	ldr	r3, [r1, #16]
 800d840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d844:	4293      	cmp	r3, r2
 800d846:	bfb8      	it	lt
 800d848:	4613      	movlt	r3, r2
 800d84a:	6033      	str	r3, [r6, #0]
 800d84c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d850:	4607      	mov	r7, r0
 800d852:	460c      	mov	r4, r1
 800d854:	b10a      	cbz	r2, 800d85a <_printf_common+0x26>
 800d856:	3301      	adds	r3, #1
 800d858:	6033      	str	r3, [r6, #0]
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	0699      	lsls	r1, r3, #26
 800d85e:	bf42      	ittt	mi
 800d860:	6833      	ldrmi	r3, [r6, #0]
 800d862:	3302      	addmi	r3, #2
 800d864:	6033      	strmi	r3, [r6, #0]
 800d866:	6825      	ldr	r5, [r4, #0]
 800d868:	f015 0506 	ands.w	r5, r5, #6
 800d86c:	d106      	bne.n	800d87c <_printf_common+0x48>
 800d86e:	f104 0a19 	add.w	sl, r4, #25
 800d872:	68e3      	ldr	r3, [r4, #12]
 800d874:	6832      	ldr	r2, [r6, #0]
 800d876:	1a9b      	subs	r3, r3, r2
 800d878:	42ab      	cmp	r3, r5
 800d87a:	dc26      	bgt.n	800d8ca <_printf_common+0x96>
 800d87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d880:	1e13      	subs	r3, r2, #0
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	bf18      	it	ne
 800d886:	2301      	movne	r3, #1
 800d888:	0692      	lsls	r2, r2, #26
 800d88a:	d42b      	bmi.n	800d8e4 <_printf_common+0xb0>
 800d88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d890:	4649      	mov	r1, r9
 800d892:	4638      	mov	r0, r7
 800d894:	47c0      	blx	r8
 800d896:	3001      	adds	r0, #1
 800d898:	d01e      	beq.n	800d8d8 <_printf_common+0xa4>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	6922      	ldr	r2, [r4, #16]
 800d89e:	f003 0306 	and.w	r3, r3, #6
 800d8a2:	2b04      	cmp	r3, #4
 800d8a4:	bf02      	ittt	eq
 800d8a6:	68e5      	ldreq	r5, [r4, #12]
 800d8a8:	6833      	ldreq	r3, [r6, #0]
 800d8aa:	1aed      	subeq	r5, r5, r3
 800d8ac:	68a3      	ldr	r3, [r4, #8]
 800d8ae:	bf0c      	ite	eq
 800d8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8b4:	2500      	movne	r5, #0
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	bfc4      	itt	gt
 800d8ba:	1a9b      	subgt	r3, r3, r2
 800d8bc:	18ed      	addgt	r5, r5, r3
 800d8be:	2600      	movs	r6, #0
 800d8c0:	341a      	adds	r4, #26
 800d8c2:	42b5      	cmp	r5, r6
 800d8c4:	d11a      	bne.n	800d8fc <_printf_common+0xc8>
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	e008      	b.n	800d8dc <_printf_common+0xa8>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	47c0      	blx	r8
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d103      	bne.n	800d8e0 <_printf_common+0xac>
 800d8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e0:	3501      	adds	r5, #1
 800d8e2:	e7c6      	b.n	800d872 <_printf_common+0x3e>
 800d8e4:	18e1      	adds	r1, r4, r3
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	2030      	movs	r0, #48	; 0x30
 800d8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8ee:	4422      	add	r2, r4
 800d8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8f8:	3302      	adds	r3, #2
 800d8fa:	e7c7      	b.n	800d88c <_printf_common+0x58>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	4622      	mov	r2, r4
 800d900:	4649      	mov	r1, r9
 800d902:	4638      	mov	r0, r7
 800d904:	47c0      	blx	r8
 800d906:	3001      	adds	r0, #1
 800d908:	d0e6      	beq.n	800d8d8 <_printf_common+0xa4>
 800d90a:	3601      	adds	r6, #1
 800d90c:	e7d9      	b.n	800d8c2 <_printf_common+0x8e>
	...

0800d910 <_printf_i>:
 800d910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d914:	7e0f      	ldrb	r7, [r1, #24]
 800d916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d918:	2f78      	cmp	r7, #120	; 0x78
 800d91a:	4691      	mov	r9, r2
 800d91c:	4680      	mov	r8, r0
 800d91e:	460c      	mov	r4, r1
 800d920:	469a      	mov	sl, r3
 800d922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d926:	d807      	bhi.n	800d938 <_printf_i+0x28>
 800d928:	2f62      	cmp	r7, #98	; 0x62
 800d92a:	d80a      	bhi.n	800d942 <_printf_i+0x32>
 800d92c:	2f00      	cmp	r7, #0
 800d92e:	f000 80d4 	beq.w	800dada <_printf_i+0x1ca>
 800d932:	2f58      	cmp	r7, #88	; 0x58
 800d934:	f000 80c0 	beq.w	800dab8 <_printf_i+0x1a8>
 800d938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d940:	e03a      	b.n	800d9b8 <_printf_i+0xa8>
 800d942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d946:	2b15      	cmp	r3, #21
 800d948:	d8f6      	bhi.n	800d938 <_printf_i+0x28>
 800d94a:	a101      	add	r1, pc, #4	; (adr r1, 800d950 <_printf_i+0x40>)
 800d94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d950:	0800d9a9 	.word	0x0800d9a9
 800d954:	0800d9bd 	.word	0x0800d9bd
 800d958:	0800d939 	.word	0x0800d939
 800d95c:	0800d939 	.word	0x0800d939
 800d960:	0800d939 	.word	0x0800d939
 800d964:	0800d939 	.word	0x0800d939
 800d968:	0800d9bd 	.word	0x0800d9bd
 800d96c:	0800d939 	.word	0x0800d939
 800d970:	0800d939 	.word	0x0800d939
 800d974:	0800d939 	.word	0x0800d939
 800d978:	0800d939 	.word	0x0800d939
 800d97c:	0800dac1 	.word	0x0800dac1
 800d980:	0800d9e9 	.word	0x0800d9e9
 800d984:	0800da7b 	.word	0x0800da7b
 800d988:	0800d939 	.word	0x0800d939
 800d98c:	0800d939 	.word	0x0800d939
 800d990:	0800dae3 	.word	0x0800dae3
 800d994:	0800d939 	.word	0x0800d939
 800d998:	0800d9e9 	.word	0x0800d9e9
 800d99c:	0800d939 	.word	0x0800d939
 800d9a0:	0800d939 	.word	0x0800d939
 800d9a4:	0800da83 	.word	0x0800da83
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	1d1a      	adds	r2, r3, #4
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	602a      	str	r2, [r5, #0]
 800d9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e09f      	b.n	800dafc <_printf_i+0x1ec>
 800d9bc:	6820      	ldr	r0, [r4, #0]
 800d9be:	682b      	ldr	r3, [r5, #0]
 800d9c0:	0607      	lsls	r7, r0, #24
 800d9c2:	f103 0104 	add.w	r1, r3, #4
 800d9c6:	6029      	str	r1, [r5, #0]
 800d9c8:	d501      	bpl.n	800d9ce <_printf_i+0xbe>
 800d9ca:	681e      	ldr	r6, [r3, #0]
 800d9cc:	e003      	b.n	800d9d6 <_printf_i+0xc6>
 800d9ce:	0646      	lsls	r6, r0, #25
 800d9d0:	d5fb      	bpl.n	800d9ca <_printf_i+0xba>
 800d9d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d9d6:	2e00      	cmp	r6, #0
 800d9d8:	da03      	bge.n	800d9e2 <_printf_i+0xd2>
 800d9da:	232d      	movs	r3, #45	; 0x2d
 800d9dc:	4276      	negs	r6, r6
 800d9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9e2:	485a      	ldr	r0, [pc, #360]	; (800db4c <_printf_i+0x23c>)
 800d9e4:	230a      	movs	r3, #10
 800d9e6:	e012      	b.n	800da0e <_printf_i+0xfe>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	6820      	ldr	r0, [r4, #0]
 800d9ec:	1d19      	adds	r1, r3, #4
 800d9ee:	6029      	str	r1, [r5, #0]
 800d9f0:	0605      	lsls	r5, r0, #24
 800d9f2:	d501      	bpl.n	800d9f8 <_printf_i+0xe8>
 800d9f4:	681e      	ldr	r6, [r3, #0]
 800d9f6:	e002      	b.n	800d9fe <_printf_i+0xee>
 800d9f8:	0641      	lsls	r1, r0, #25
 800d9fa:	d5fb      	bpl.n	800d9f4 <_printf_i+0xe4>
 800d9fc:	881e      	ldrh	r6, [r3, #0]
 800d9fe:	4853      	ldr	r0, [pc, #332]	; (800db4c <_printf_i+0x23c>)
 800da00:	2f6f      	cmp	r7, #111	; 0x6f
 800da02:	bf0c      	ite	eq
 800da04:	2308      	moveq	r3, #8
 800da06:	230a      	movne	r3, #10
 800da08:	2100      	movs	r1, #0
 800da0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da0e:	6865      	ldr	r5, [r4, #4]
 800da10:	60a5      	str	r5, [r4, #8]
 800da12:	2d00      	cmp	r5, #0
 800da14:	bfa2      	ittt	ge
 800da16:	6821      	ldrge	r1, [r4, #0]
 800da18:	f021 0104 	bicge.w	r1, r1, #4
 800da1c:	6021      	strge	r1, [r4, #0]
 800da1e:	b90e      	cbnz	r6, 800da24 <_printf_i+0x114>
 800da20:	2d00      	cmp	r5, #0
 800da22:	d04b      	beq.n	800dabc <_printf_i+0x1ac>
 800da24:	4615      	mov	r5, r2
 800da26:	fbb6 f1f3 	udiv	r1, r6, r3
 800da2a:	fb03 6711 	mls	r7, r3, r1, r6
 800da2e:	5dc7      	ldrb	r7, [r0, r7]
 800da30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da34:	4637      	mov	r7, r6
 800da36:	42bb      	cmp	r3, r7
 800da38:	460e      	mov	r6, r1
 800da3a:	d9f4      	bls.n	800da26 <_printf_i+0x116>
 800da3c:	2b08      	cmp	r3, #8
 800da3e:	d10b      	bne.n	800da58 <_printf_i+0x148>
 800da40:	6823      	ldr	r3, [r4, #0]
 800da42:	07de      	lsls	r6, r3, #31
 800da44:	d508      	bpl.n	800da58 <_printf_i+0x148>
 800da46:	6923      	ldr	r3, [r4, #16]
 800da48:	6861      	ldr	r1, [r4, #4]
 800da4a:	4299      	cmp	r1, r3
 800da4c:	bfde      	ittt	le
 800da4e:	2330      	movle	r3, #48	; 0x30
 800da50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da58:	1b52      	subs	r2, r2, r5
 800da5a:	6122      	str	r2, [r4, #16]
 800da5c:	f8cd a000 	str.w	sl, [sp]
 800da60:	464b      	mov	r3, r9
 800da62:	aa03      	add	r2, sp, #12
 800da64:	4621      	mov	r1, r4
 800da66:	4640      	mov	r0, r8
 800da68:	f7ff fee4 	bl	800d834 <_printf_common>
 800da6c:	3001      	adds	r0, #1
 800da6e:	d14a      	bne.n	800db06 <_printf_i+0x1f6>
 800da70:	f04f 30ff 	mov.w	r0, #4294967295
 800da74:	b004      	add	sp, #16
 800da76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	f043 0320 	orr.w	r3, r3, #32
 800da80:	6023      	str	r3, [r4, #0]
 800da82:	4833      	ldr	r0, [pc, #204]	; (800db50 <_printf_i+0x240>)
 800da84:	2778      	movs	r7, #120	; 0x78
 800da86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	6829      	ldr	r1, [r5, #0]
 800da8e:	061f      	lsls	r7, r3, #24
 800da90:	f851 6b04 	ldr.w	r6, [r1], #4
 800da94:	d402      	bmi.n	800da9c <_printf_i+0x18c>
 800da96:	065f      	lsls	r7, r3, #25
 800da98:	bf48      	it	mi
 800da9a:	b2b6      	uxthmi	r6, r6
 800da9c:	07df      	lsls	r7, r3, #31
 800da9e:	bf48      	it	mi
 800daa0:	f043 0320 	orrmi.w	r3, r3, #32
 800daa4:	6029      	str	r1, [r5, #0]
 800daa6:	bf48      	it	mi
 800daa8:	6023      	strmi	r3, [r4, #0]
 800daaa:	b91e      	cbnz	r6, 800dab4 <_printf_i+0x1a4>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	f023 0320 	bic.w	r3, r3, #32
 800dab2:	6023      	str	r3, [r4, #0]
 800dab4:	2310      	movs	r3, #16
 800dab6:	e7a7      	b.n	800da08 <_printf_i+0xf8>
 800dab8:	4824      	ldr	r0, [pc, #144]	; (800db4c <_printf_i+0x23c>)
 800daba:	e7e4      	b.n	800da86 <_printf_i+0x176>
 800dabc:	4615      	mov	r5, r2
 800dabe:	e7bd      	b.n	800da3c <_printf_i+0x12c>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	6826      	ldr	r6, [r4, #0]
 800dac4:	6961      	ldr	r1, [r4, #20]
 800dac6:	1d18      	adds	r0, r3, #4
 800dac8:	6028      	str	r0, [r5, #0]
 800daca:	0635      	lsls	r5, r6, #24
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	d501      	bpl.n	800dad4 <_printf_i+0x1c4>
 800dad0:	6019      	str	r1, [r3, #0]
 800dad2:	e002      	b.n	800dada <_printf_i+0x1ca>
 800dad4:	0670      	lsls	r0, r6, #25
 800dad6:	d5fb      	bpl.n	800dad0 <_printf_i+0x1c0>
 800dad8:	8019      	strh	r1, [r3, #0]
 800dada:	2300      	movs	r3, #0
 800dadc:	6123      	str	r3, [r4, #16]
 800dade:	4615      	mov	r5, r2
 800dae0:	e7bc      	b.n	800da5c <_printf_i+0x14c>
 800dae2:	682b      	ldr	r3, [r5, #0]
 800dae4:	1d1a      	adds	r2, r3, #4
 800dae6:	602a      	str	r2, [r5, #0]
 800dae8:	681d      	ldr	r5, [r3, #0]
 800daea:	6862      	ldr	r2, [r4, #4]
 800daec:	2100      	movs	r1, #0
 800daee:	4628      	mov	r0, r5
 800daf0:	f7f2 fb6e 	bl	80001d0 <memchr>
 800daf4:	b108      	cbz	r0, 800dafa <_printf_i+0x1ea>
 800daf6:	1b40      	subs	r0, r0, r5
 800daf8:	6060      	str	r0, [r4, #4]
 800dafa:	6863      	ldr	r3, [r4, #4]
 800dafc:	6123      	str	r3, [r4, #16]
 800dafe:	2300      	movs	r3, #0
 800db00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db04:	e7aa      	b.n	800da5c <_printf_i+0x14c>
 800db06:	6923      	ldr	r3, [r4, #16]
 800db08:	462a      	mov	r2, r5
 800db0a:	4649      	mov	r1, r9
 800db0c:	4640      	mov	r0, r8
 800db0e:	47d0      	blx	sl
 800db10:	3001      	adds	r0, #1
 800db12:	d0ad      	beq.n	800da70 <_printf_i+0x160>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	079b      	lsls	r3, r3, #30
 800db18:	d413      	bmi.n	800db42 <_printf_i+0x232>
 800db1a:	68e0      	ldr	r0, [r4, #12]
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	4298      	cmp	r0, r3
 800db20:	bfb8      	it	lt
 800db22:	4618      	movlt	r0, r3
 800db24:	e7a6      	b.n	800da74 <_printf_i+0x164>
 800db26:	2301      	movs	r3, #1
 800db28:	4632      	mov	r2, r6
 800db2a:	4649      	mov	r1, r9
 800db2c:	4640      	mov	r0, r8
 800db2e:	47d0      	blx	sl
 800db30:	3001      	adds	r0, #1
 800db32:	d09d      	beq.n	800da70 <_printf_i+0x160>
 800db34:	3501      	adds	r5, #1
 800db36:	68e3      	ldr	r3, [r4, #12]
 800db38:	9903      	ldr	r1, [sp, #12]
 800db3a:	1a5b      	subs	r3, r3, r1
 800db3c:	42ab      	cmp	r3, r5
 800db3e:	dcf2      	bgt.n	800db26 <_printf_i+0x216>
 800db40:	e7eb      	b.n	800db1a <_printf_i+0x20a>
 800db42:	2500      	movs	r5, #0
 800db44:	f104 0619 	add.w	r6, r4, #25
 800db48:	e7f5      	b.n	800db36 <_printf_i+0x226>
 800db4a:	bf00      	nop
 800db4c:	0801bcc2 	.word	0x0801bcc2
 800db50:	0801bcd3 	.word	0x0801bcd3

0800db54 <std>:
 800db54:	2300      	movs	r3, #0
 800db56:	b510      	push	{r4, lr}
 800db58:	4604      	mov	r4, r0
 800db5a:	e9c0 3300 	strd	r3, r3, [r0]
 800db5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db62:	6083      	str	r3, [r0, #8]
 800db64:	8181      	strh	r1, [r0, #12]
 800db66:	6643      	str	r3, [r0, #100]	; 0x64
 800db68:	81c2      	strh	r2, [r0, #14]
 800db6a:	6183      	str	r3, [r0, #24]
 800db6c:	4619      	mov	r1, r3
 800db6e:	2208      	movs	r2, #8
 800db70:	305c      	adds	r0, #92	; 0x5c
 800db72:	f000 f9f7 	bl	800df64 <memset>
 800db76:	4b0d      	ldr	r3, [pc, #52]	; (800dbac <std+0x58>)
 800db78:	6263      	str	r3, [r4, #36]	; 0x24
 800db7a:	4b0d      	ldr	r3, [pc, #52]	; (800dbb0 <std+0x5c>)
 800db7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800db7e:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <std+0x60>)
 800db80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db82:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <std+0x64>)
 800db84:	6323      	str	r3, [r4, #48]	; 0x30
 800db86:	4b0d      	ldr	r3, [pc, #52]	; (800dbbc <std+0x68>)
 800db88:	6224      	str	r4, [r4, #32]
 800db8a:	429c      	cmp	r4, r3
 800db8c:	d006      	beq.n	800db9c <std+0x48>
 800db8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800db92:	4294      	cmp	r4, r2
 800db94:	d002      	beq.n	800db9c <std+0x48>
 800db96:	33d0      	adds	r3, #208	; 0xd0
 800db98:	429c      	cmp	r4, r3
 800db9a:	d105      	bne.n	800dba8 <std+0x54>
 800db9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dba4:	f000 ba6a 	b.w	800e07c <__retarget_lock_init_recursive>
 800dba8:	bd10      	pop	{r4, pc}
 800dbaa:	bf00      	nop
 800dbac:	0800ddb5 	.word	0x0800ddb5
 800dbb0:	0800ddd7 	.word	0x0800ddd7
 800dbb4:	0800de0f 	.word	0x0800de0f
 800dbb8:	0800de33 	.word	0x0800de33
 800dbbc:	20003420 	.word	0x20003420

0800dbc0 <stdio_exit_handler>:
 800dbc0:	4a02      	ldr	r2, [pc, #8]	; (800dbcc <stdio_exit_handler+0xc>)
 800dbc2:	4903      	ldr	r1, [pc, #12]	; (800dbd0 <stdio_exit_handler+0x10>)
 800dbc4:	4803      	ldr	r0, [pc, #12]	; (800dbd4 <stdio_exit_handler+0x14>)
 800dbc6:	f000 b869 	b.w	800dc9c <_fwalk_sglue>
 800dbca:	bf00      	nop
 800dbcc:	20000bc0 	.word	0x20000bc0
 800dbd0:	0800f8b9 	.word	0x0800f8b9
 800dbd4:	20000bcc 	.word	0x20000bcc

0800dbd8 <cleanup_stdio>:
 800dbd8:	6841      	ldr	r1, [r0, #4]
 800dbda:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <cleanup_stdio+0x34>)
 800dbdc:	4299      	cmp	r1, r3
 800dbde:	b510      	push	{r4, lr}
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	d001      	beq.n	800dbe8 <cleanup_stdio+0x10>
 800dbe4:	f001 fe68 	bl	800f8b8 <_fflush_r>
 800dbe8:	68a1      	ldr	r1, [r4, #8]
 800dbea:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <cleanup_stdio+0x38>)
 800dbec:	4299      	cmp	r1, r3
 800dbee:	d002      	beq.n	800dbf6 <cleanup_stdio+0x1e>
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f001 fe61 	bl	800f8b8 <_fflush_r>
 800dbf6:	68e1      	ldr	r1, [r4, #12]
 800dbf8:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <cleanup_stdio+0x3c>)
 800dbfa:	4299      	cmp	r1, r3
 800dbfc:	d004      	beq.n	800dc08 <cleanup_stdio+0x30>
 800dbfe:	4620      	mov	r0, r4
 800dc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc04:	f001 be58 	b.w	800f8b8 <_fflush_r>
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	bf00      	nop
 800dc0c:	20003420 	.word	0x20003420
 800dc10:	20003488 	.word	0x20003488
 800dc14:	200034f0 	.word	0x200034f0

0800dc18 <global_stdio_init.part.0>:
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	4b0b      	ldr	r3, [pc, #44]	; (800dc48 <global_stdio_init.part.0+0x30>)
 800dc1c:	4c0b      	ldr	r4, [pc, #44]	; (800dc4c <global_stdio_init.part.0+0x34>)
 800dc1e:	4a0c      	ldr	r2, [pc, #48]	; (800dc50 <global_stdio_init.part.0+0x38>)
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	4620      	mov	r0, r4
 800dc24:	2200      	movs	r2, #0
 800dc26:	2104      	movs	r1, #4
 800dc28:	f7ff ff94 	bl	800db54 <std>
 800dc2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dc30:	2201      	movs	r2, #1
 800dc32:	2109      	movs	r1, #9
 800dc34:	f7ff ff8e 	bl	800db54 <std>
 800dc38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc42:	2112      	movs	r1, #18
 800dc44:	f7ff bf86 	b.w	800db54 <std>
 800dc48:	20003558 	.word	0x20003558
 800dc4c:	20003420 	.word	0x20003420
 800dc50:	0800dbc1 	.word	0x0800dbc1

0800dc54 <__sfp_lock_acquire>:
 800dc54:	4801      	ldr	r0, [pc, #4]	; (800dc5c <__sfp_lock_acquire+0x8>)
 800dc56:	f000 ba12 	b.w	800e07e <__retarget_lock_acquire_recursive>
 800dc5a:	bf00      	nop
 800dc5c:	20003561 	.word	0x20003561

0800dc60 <__sfp_lock_release>:
 800dc60:	4801      	ldr	r0, [pc, #4]	; (800dc68 <__sfp_lock_release+0x8>)
 800dc62:	f000 ba0d 	b.w	800e080 <__retarget_lock_release_recursive>
 800dc66:	bf00      	nop
 800dc68:	20003561 	.word	0x20003561

0800dc6c <__sinit>:
 800dc6c:	b510      	push	{r4, lr}
 800dc6e:	4604      	mov	r4, r0
 800dc70:	f7ff fff0 	bl	800dc54 <__sfp_lock_acquire>
 800dc74:	6a23      	ldr	r3, [r4, #32]
 800dc76:	b11b      	cbz	r3, 800dc80 <__sinit+0x14>
 800dc78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc7c:	f7ff bff0 	b.w	800dc60 <__sfp_lock_release>
 800dc80:	4b04      	ldr	r3, [pc, #16]	; (800dc94 <__sinit+0x28>)
 800dc82:	6223      	str	r3, [r4, #32]
 800dc84:	4b04      	ldr	r3, [pc, #16]	; (800dc98 <__sinit+0x2c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1f5      	bne.n	800dc78 <__sinit+0xc>
 800dc8c:	f7ff ffc4 	bl	800dc18 <global_stdio_init.part.0>
 800dc90:	e7f2      	b.n	800dc78 <__sinit+0xc>
 800dc92:	bf00      	nop
 800dc94:	0800dbd9 	.word	0x0800dbd9
 800dc98:	20003558 	.word	0x20003558

0800dc9c <_fwalk_sglue>:
 800dc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca0:	4607      	mov	r7, r0
 800dca2:	4688      	mov	r8, r1
 800dca4:	4614      	mov	r4, r2
 800dca6:	2600      	movs	r6, #0
 800dca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcac:	f1b9 0901 	subs.w	r9, r9, #1
 800dcb0:	d505      	bpl.n	800dcbe <_fwalk_sglue+0x22>
 800dcb2:	6824      	ldr	r4, [r4, #0]
 800dcb4:	2c00      	cmp	r4, #0
 800dcb6:	d1f7      	bne.n	800dca8 <_fwalk_sglue+0xc>
 800dcb8:	4630      	mov	r0, r6
 800dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcbe:	89ab      	ldrh	r3, [r5, #12]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d907      	bls.n	800dcd4 <_fwalk_sglue+0x38>
 800dcc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	d003      	beq.n	800dcd4 <_fwalk_sglue+0x38>
 800dccc:	4629      	mov	r1, r5
 800dcce:	4638      	mov	r0, r7
 800dcd0:	47c0      	blx	r8
 800dcd2:	4306      	orrs	r6, r0
 800dcd4:	3568      	adds	r5, #104	; 0x68
 800dcd6:	e7e9      	b.n	800dcac <_fwalk_sglue+0x10>

0800dcd8 <iprintf>:
 800dcd8:	b40f      	push	{r0, r1, r2, r3}
 800dcda:	b507      	push	{r0, r1, r2, lr}
 800dcdc:	4906      	ldr	r1, [pc, #24]	; (800dcf8 <iprintf+0x20>)
 800dcde:	ab04      	add	r3, sp, #16
 800dce0:	6808      	ldr	r0, [r1, #0]
 800dce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce6:	6881      	ldr	r1, [r0, #8]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	f001 fc45 	bl	800f578 <_vfiprintf_r>
 800dcee:	b003      	add	sp, #12
 800dcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf4:	b004      	add	sp, #16
 800dcf6:	4770      	bx	lr
 800dcf8:	20000c18 	.word	0x20000c18

0800dcfc <_puts_r>:
 800dcfc:	6a03      	ldr	r3, [r0, #32]
 800dcfe:	b570      	push	{r4, r5, r6, lr}
 800dd00:	6884      	ldr	r4, [r0, #8]
 800dd02:	4605      	mov	r5, r0
 800dd04:	460e      	mov	r6, r1
 800dd06:	b90b      	cbnz	r3, 800dd0c <_puts_r+0x10>
 800dd08:	f7ff ffb0 	bl	800dc6c <__sinit>
 800dd0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd0e:	07db      	lsls	r3, r3, #31
 800dd10:	d405      	bmi.n	800dd1e <_puts_r+0x22>
 800dd12:	89a3      	ldrh	r3, [r4, #12]
 800dd14:	0598      	lsls	r0, r3, #22
 800dd16:	d402      	bmi.n	800dd1e <_puts_r+0x22>
 800dd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd1a:	f000 f9b0 	bl	800e07e <__retarget_lock_acquire_recursive>
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	0719      	lsls	r1, r3, #28
 800dd22:	d513      	bpl.n	800dd4c <_puts_r+0x50>
 800dd24:	6923      	ldr	r3, [r4, #16]
 800dd26:	b18b      	cbz	r3, 800dd4c <_puts_r+0x50>
 800dd28:	3e01      	subs	r6, #1
 800dd2a:	68a3      	ldr	r3, [r4, #8]
 800dd2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dd30:	3b01      	subs	r3, #1
 800dd32:	60a3      	str	r3, [r4, #8]
 800dd34:	b9e9      	cbnz	r1, 800dd72 <_puts_r+0x76>
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	da2e      	bge.n	800dd98 <_puts_r+0x9c>
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	210a      	movs	r1, #10
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 f87b 	bl	800de3a <__swbuf_r>
 800dd44:	3001      	adds	r0, #1
 800dd46:	d007      	beq.n	800dd58 <_puts_r+0x5c>
 800dd48:	250a      	movs	r5, #10
 800dd4a:	e007      	b.n	800dd5c <_puts_r+0x60>
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f000 f8b0 	bl	800deb4 <__swsetup_r>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d0e7      	beq.n	800dd28 <_puts_r+0x2c>
 800dd58:	f04f 35ff 	mov.w	r5, #4294967295
 800dd5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd5e:	07da      	lsls	r2, r3, #31
 800dd60:	d405      	bmi.n	800dd6e <_puts_r+0x72>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	059b      	lsls	r3, r3, #22
 800dd66:	d402      	bmi.n	800dd6e <_puts_r+0x72>
 800dd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd6a:	f000 f989 	bl	800e080 <__retarget_lock_release_recursive>
 800dd6e:	4628      	mov	r0, r5
 800dd70:	bd70      	pop	{r4, r5, r6, pc}
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da04      	bge.n	800dd80 <_puts_r+0x84>
 800dd76:	69a2      	ldr	r2, [r4, #24]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	dc06      	bgt.n	800dd8a <_puts_r+0x8e>
 800dd7c:	290a      	cmp	r1, #10
 800dd7e:	d004      	beq.n	800dd8a <_puts_r+0x8e>
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	6022      	str	r2, [r4, #0]
 800dd86:	7019      	strb	r1, [r3, #0]
 800dd88:	e7cf      	b.n	800dd2a <_puts_r+0x2e>
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f000 f854 	bl	800de3a <__swbuf_r>
 800dd92:	3001      	adds	r0, #1
 800dd94:	d1c9      	bne.n	800dd2a <_puts_r+0x2e>
 800dd96:	e7df      	b.n	800dd58 <_puts_r+0x5c>
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	250a      	movs	r5, #10
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	6022      	str	r2, [r4, #0]
 800dda0:	701d      	strb	r5, [r3, #0]
 800dda2:	e7db      	b.n	800dd5c <_puts_r+0x60>

0800dda4 <puts>:
 800dda4:	4b02      	ldr	r3, [pc, #8]	; (800ddb0 <puts+0xc>)
 800dda6:	4601      	mov	r1, r0
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f7ff bfa7 	b.w	800dcfc <_puts_r>
 800ddae:	bf00      	nop
 800ddb0:	20000c18 	.word	0x20000c18

0800ddb4 <__sread>:
 800ddb4:	b510      	push	{r4, lr}
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddbc:	f000 f900 	bl	800dfc0 <_read_r>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	bfab      	itete	ge
 800ddc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddc6:	89a3      	ldrhlt	r3, [r4, #12]
 800ddc8:	181b      	addge	r3, r3, r0
 800ddca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddce:	bfac      	ite	ge
 800ddd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddd2:	81a3      	strhlt	r3, [r4, #12]
 800ddd4:	bd10      	pop	{r4, pc}

0800ddd6 <__swrite>:
 800ddd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddda:	461f      	mov	r7, r3
 800dddc:	898b      	ldrh	r3, [r1, #12]
 800ddde:	05db      	lsls	r3, r3, #23
 800dde0:	4605      	mov	r5, r0
 800dde2:	460c      	mov	r4, r1
 800dde4:	4616      	mov	r6, r2
 800dde6:	d505      	bpl.n	800ddf4 <__swrite+0x1e>
 800dde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddec:	2302      	movs	r3, #2
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f000 f8d4 	bl	800df9c <_lseek_r>
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddfe:	81a3      	strh	r3, [r4, #12]
 800de00:	4632      	mov	r2, r6
 800de02:	463b      	mov	r3, r7
 800de04:	4628      	mov	r0, r5
 800de06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de0a:	f000 b8fb 	b.w	800e004 <_write_r>

0800de0e <__sseek>:
 800de0e:	b510      	push	{r4, lr}
 800de10:	460c      	mov	r4, r1
 800de12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de16:	f000 f8c1 	bl	800df9c <_lseek_r>
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	bf15      	itete	ne
 800de20:	6560      	strne	r0, [r4, #84]	; 0x54
 800de22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de2a:	81a3      	strheq	r3, [r4, #12]
 800de2c:	bf18      	it	ne
 800de2e:	81a3      	strhne	r3, [r4, #12]
 800de30:	bd10      	pop	{r4, pc}

0800de32 <__sclose>:
 800de32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de36:	f000 b8a1 	b.w	800df7c <_close_r>

0800de3a <__swbuf_r>:
 800de3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3c:	460e      	mov	r6, r1
 800de3e:	4614      	mov	r4, r2
 800de40:	4605      	mov	r5, r0
 800de42:	b118      	cbz	r0, 800de4c <__swbuf_r+0x12>
 800de44:	6a03      	ldr	r3, [r0, #32]
 800de46:	b90b      	cbnz	r3, 800de4c <__swbuf_r+0x12>
 800de48:	f7ff ff10 	bl	800dc6c <__sinit>
 800de4c:	69a3      	ldr	r3, [r4, #24]
 800de4e:	60a3      	str	r3, [r4, #8]
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	071a      	lsls	r2, r3, #28
 800de54:	d525      	bpl.n	800dea2 <__swbuf_r+0x68>
 800de56:	6923      	ldr	r3, [r4, #16]
 800de58:	b31b      	cbz	r3, 800dea2 <__swbuf_r+0x68>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	6922      	ldr	r2, [r4, #16]
 800de5e:	1a98      	subs	r0, r3, r2
 800de60:	6963      	ldr	r3, [r4, #20]
 800de62:	b2f6      	uxtb	r6, r6
 800de64:	4283      	cmp	r3, r0
 800de66:	4637      	mov	r7, r6
 800de68:	dc04      	bgt.n	800de74 <__swbuf_r+0x3a>
 800de6a:	4621      	mov	r1, r4
 800de6c:	4628      	mov	r0, r5
 800de6e:	f001 fd23 	bl	800f8b8 <_fflush_r>
 800de72:	b9e0      	cbnz	r0, 800deae <__swbuf_r+0x74>
 800de74:	68a3      	ldr	r3, [r4, #8]
 800de76:	3b01      	subs	r3, #1
 800de78:	60a3      	str	r3, [r4, #8]
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	1c5a      	adds	r2, r3, #1
 800de7e:	6022      	str	r2, [r4, #0]
 800de80:	701e      	strb	r6, [r3, #0]
 800de82:	6962      	ldr	r2, [r4, #20]
 800de84:	1c43      	adds	r3, r0, #1
 800de86:	429a      	cmp	r2, r3
 800de88:	d004      	beq.n	800de94 <__swbuf_r+0x5a>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	07db      	lsls	r3, r3, #31
 800de8e:	d506      	bpl.n	800de9e <__swbuf_r+0x64>
 800de90:	2e0a      	cmp	r6, #10
 800de92:	d104      	bne.n	800de9e <__swbuf_r+0x64>
 800de94:	4621      	mov	r1, r4
 800de96:	4628      	mov	r0, r5
 800de98:	f001 fd0e 	bl	800f8b8 <_fflush_r>
 800de9c:	b938      	cbnz	r0, 800deae <__swbuf_r+0x74>
 800de9e:	4638      	mov	r0, r7
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea2:	4621      	mov	r1, r4
 800dea4:	4628      	mov	r0, r5
 800dea6:	f000 f805 	bl	800deb4 <__swsetup_r>
 800deaa:	2800      	cmp	r0, #0
 800deac:	d0d5      	beq.n	800de5a <__swbuf_r+0x20>
 800deae:	f04f 37ff 	mov.w	r7, #4294967295
 800deb2:	e7f4      	b.n	800de9e <__swbuf_r+0x64>

0800deb4 <__swsetup_r>:
 800deb4:	b538      	push	{r3, r4, r5, lr}
 800deb6:	4b2a      	ldr	r3, [pc, #168]	; (800df60 <__swsetup_r+0xac>)
 800deb8:	4605      	mov	r5, r0
 800deba:	6818      	ldr	r0, [r3, #0]
 800debc:	460c      	mov	r4, r1
 800debe:	b118      	cbz	r0, 800dec8 <__swsetup_r+0x14>
 800dec0:	6a03      	ldr	r3, [r0, #32]
 800dec2:	b90b      	cbnz	r3, 800dec8 <__swsetup_r+0x14>
 800dec4:	f7ff fed2 	bl	800dc6c <__sinit>
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dece:	0718      	lsls	r0, r3, #28
 800ded0:	d422      	bmi.n	800df18 <__swsetup_r+0x64>
 800ded2:	06d9      	lsls	r1, r3, #27
 800ded4:	d407      	bmi.n	800dee6 <__swsetup_r+0x32>
 800ded6:	2309      	movs	r3, #9
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dede:	81a3      	strh	r3, [r4, #12]
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	e034      	b.n	800df50 <__swsetup_r+0x9c>
 800dee6:	0758      	lsls	r0, r3, #29
 800dee8:	d512      	bpl.n	800df10 <__swsetup_r+0x5c>
 800deea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800deec:	b141      	cbz	r1, 800df00 <__swsetup_r+0x4c>
 800deee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800def2:	4299      	cmp	r1, r3
 800def4:	d002      	beq.n	800defc <__swsetup_r+0x48>
 800def6:	4628      	mov	r0, r5
 800def8:	f000 ff4c 	bl	800ed94 <_free_r>
 800defc:	2300      	movs	r3, #0
 800defe:	6363      	str	r3, [r4, #52]	; 0x34
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df06:	81a3      	strh	r3, [r4, #12]
 800df08:	2300      	movs	r3, #0
 800df0a:	6063      	str	r3, [r4, #4]
 800df0c:	6923      	ldr	r3, [r4, #16]
 800df0e:	6023      	str	r3, [r4, #0]
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	f043 0308 	orr.w	r3, r3, #8
 800df16:	81a3      	strh	r3, [r4, #12]
 800df18:	6923      	ldr	r3, [r4, #16]
 800df1a:	b94b      	cbnz	r3, 800df30 <__swsetup_r+0x7c>
 800df1c:	89a3      	ldrh	r3, [r4, #12]
 800df1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df26:	d003      	beq.n	800df30 <__swsetup_r+0x7c>
 800df28:	4621      	mov	r1, r4
 800df2a:	4628      	mov	r0, r5
 800df2c:	f001 fd12 	bl	800f954 <__smakebuf_r>
 800df30:	89a0      	ldrh	r0, [r4, #12]
 800df32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df36:	f010 0301 	ands.w	r3, r0, #1
 800df3a:	d00a      	beq.n	800df52 <__swsetup_r+0x9e>
 800df3c:	2300      	movs	r3, #0
 800df3e:	60a3      	str	r3, [r4, #8]
 800df40:	6963      	ldr	r3, [r4, #20]
 800df42:	425b      	negs	r3, r3
 800df44:	61a3      	str	r3, [r4, #24]
 800df46:	6923      	ldr	r3, [r4, #16]
 800df48:	b943      	cbnz	r3, 800df5c <__swsetup_r+0xa8>
 800df4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df4e:	d1c4      	bne.n	800deda <__swsetup_r+0x26>
 800df50:	bd38      	pop	{r3, r4, r5, pc}
 800df52:	0781      	lsls	r1, r0, #30
 800df54:	bf58      	it	pl
 800df56:	6963      	ldrpl	r3, [r4, #20]
 800df58:	60a3      	str	r3, [r4, #8]
 800df5a:	e7f4      	b.n	800df46 <__swsetup_r+0x92>
 800df5c:	2000      	movs	r0, #0
 800df5e:	e7f7      	b.n	800df50 <__swsetup_r+0x9c>
 800df60:	20000c18 	.word	0x20000c18

0800df64 <memset>:
 800df64:	4402      	add	r2, r0
 800df66:	4603      	mov	r3, r0
 800df68:	4293      	cmp	r3, r2
 800df6a:	d100      	bne.n	800df6e <memset+0xa>
 800df6c:	4770      	bx	lr
 800df6e:	f803 1b01 	strb.w	r1, [r3], #1
 800df72:	e7f9      	b.n	800df68 <memset+0x4>

0800df74 <_localeconv_r>:
 800df74:	4800      	ldr	r0, [pc, #0]	; (800df78 <_localeconv_r+0x4>)
 800df76:	4770      	bx	lr
 800df78:	20000d0c 	.word	0x20000d0c

0800df7c <_close_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4d06      	ldr	r5, [pc, #24]	; (800df98 <_close_r+0x1c>)
 800df80:	2300      	movs	r3, #0
 800df82:	4604      	mov	r4, r0
 800df84:	4608      	mov	r0, r1
 800df86:	602b      	str	r3, [r5, #0]
 800df88:	f001 ff28 	bl	800fddc <_close>
 800df8c:	1c43      	adds	r3, r0, #1
 800df8e:	d102      	bne.n	800df96 <_close_r+0x1a>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	b103      	cbz	r3, 800df96 <_close_r+0x1a>
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	2000355c 	.word	0x2000355c

0800df9c <_lseek_r>:
 800df9c:	b538      	push	{r3, r4, r5, lr}
 800df9e:	4d07      	ldr	r5, [pc, #28]	; (800dfbc <_lseek_r+0x20>)
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	4608      	mov	r0, r1
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	602a      	str	r2, [r5, #0]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	f001 ff3e 	bl	800fe2c <_lseek>
 800dfb0:	1c43      	adds	r3, r0, #1
 800dfb2:	d102      	bne.n	800dfba <_lseek_r+0x1e>
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	b103      	cbz	r3, 800dfba <_lseek_r+0x1e>
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	bd38      	pop	{r3, r4, r5, pc}
 800dfbc:	2000355c 	.word	0x2000355c

0800dfc0 <_read_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4d07      	ldr	r5, [pc, #28]	; (800dfe0 <_read_r+0x20>)
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	4608      	mov	r0, r1
 800dfc8:	4611      	mov	r1, r2
 800dfca:	2200      	movs	r2, #0
 800dfcc:	602a      	str	r2, [r5, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f001 ff34 	bl	800fe3c <_read>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_read_r+0x1e>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_read_r+0x1e>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	2000355c 	.word	0x2000355c

0800dfe4 <_sbrk_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d06      	ldr	r5, [pc, #24]	; (800e000 <_sbrk_r+0x1c>)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4604      	mov	r4, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	602b      	str	r3, [r5, #0]
 800dff0:	f7f4 fa06 	bl	8002400 <_sbrk>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	d102      	bne.n	800dffe <_sbrk_r+0x1a>
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	b103      	cbz	r3, 800dffe <_sbrk_r+0x1a>
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	2000355c 	.word	0x2000355c

0800e004 <_write_r>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	4d07      	ldr	r5, [pc, #28]	; (800e024 <_write_r+0x20>)
 800e008:	4604      	mov	r4, r0
 800e00a:	4608      	mov	r0, r1
 800e00c:	4611      	mov	r1, r2
 800e00e:	2200      	movs	r2, #0
 800e010:	602a      	str	r2, [r5, #0]
 800e012:	461a      	mov	r2, r3
 800e014:	f7f3 fdd6 	bl	8001bc4 <_write>
 800e018:	1c43      	adds	r3, r0, #1
 800e01a:	d102      	bne.n	800e022 <_write_r+0x1e>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	b103      	cbz	r3, 800e022 <_write_r+0x1e>
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	2000355c 	.word	0x2000355c

0800e028 <__errno>:
 800e028:	4b01      	ldr	r3, [pc, #4]	; (800e030 <__errno+0x8>)
 800e02a:	6818      	ldr	r0, [r3, #0]
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	20000c18 	.word	0x20000c18

0800e034 <__libc_init_array>:
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	4d0d      	ldr	r5, [pc, #52]	; (800e06c <__libc_init_array+0x38>)
 800e038:	4c0d      	ldr	r4, [pc, #52]	; (800e070 <__libc_init_array+0x3c>)
 800e03a:	1b64      	subs	r4, r4, r5
 800e03c:	10a4      	asrs	r4, r4, #2
 800e03e:	2600      	movs	r6, #0
 800e040:	42a6      	cmp	r6, r4
 800e042:	d109      	bne.n	800e058 <__libc_init_array+0x24>
 800e044:	4d0b      	ldr	r5, [pc, #44]	; (800e074 <__libc_init_array+0x40>)
 800e046:	4c0c      	ldr	r4, [pc, #48]	; (800e078 <__libc_init_array+0x44>)
 800e048:	f001 ff02 	bl	800fe50 <_init>
 800e04c:	1b64      	subs	r4, r4, r5
 800e04e:	10a4      	asrs	r4, r4, #2
 800e050:	2600      	movs	r6, #0
 800e052:	42a6      	cmp	r6, r4
 800e054:	d105      	bne.n	800e062 <__libc_init_array+0x2e>
 800e056:	bd70      	pop	{r4, r5, r6, pc}
 800e058:	f855 3b04 	ldr.w	r3, [r5], #4
 800e05c:	4798      	blx	r3
 800e05e:	3601      	adds	r6, #1
 800e060:	e7ee      	b.n	800e040 <__libc_init_array+0xc>
 800e062:	f855 3b04 	ldr.w	r3, [r5], #4
 800e066:	4798      	blx	r3
 800e068:	3601      	adds	r6, #1
 800e06a:	e7f2      	b.n	800e052 <__libc_init_array+0x1e>
 800e06c:	0801c044 	.word	0x0801c044
 800e070:	0801c044 	.word	0x0801c044
 800e074:	0801c044 	.word	0x0801c044
 800e078:	0801c048 	.word	0x0801c048

0800e07c <__retarget_lock_init_recursive>:
 800e07c:	4770      	bx	lr

0800e07e <__retarget_lock_acquire_recursive>:
 800e07e:	4770      	bx	lr

0800e080 <__retarget_lock_release_recursive>:
 800e080:	4770      	bx	lr

0800e082 <memcpy>:
 800e082:	440a      	add	r2, r1
 800e084:	4291      	cmp	r1, r2
 800e086:	f100 33ff 	add.w	r3, r0, #4294967295
 800e08a:	d100      	bne.n	800e08e <memcpy+0xc>
 800e08c:	4770      	bx	lr
 800e08e:	b510      	push	{r4, lr}
 800e090:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e098:	4291      	cmp	r1, r2
 800e09a:	d1f9      	bne.n	800e090 <memcpy+0xe>
 800e09c:	bd10      	pop	{r4, pc}

0800e09e <quorem>:
 800e09e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a2:	6903      	ldr	r3, [r0, #16]
 800e0a4:	690c      	ldr	r4, [r1, #16]
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	4607      	mov	r7, r0
 800e0aa:	db7e      	blt.n	800e1aa <quorem+0x10c>
 800e0ac:	3c01      	subs	r4, #1
 800e0ae:	f101 0814 	add.w	r8, r1, #20
 800e0b2:	f100 0514 	add.w	r5, r0, #20
 800e0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0d4:	d331      	bcc.n	800e13a <quorem+0x9c>
 800e0d6:	f04f 0e00 	mov.w	lr, #0
 800e0da:	4640      	mov	r0, r8
 800e0dc:	46ac      	mov	ip, r5
 800e0de:	46f2      	mov	sl, lr
 800e0e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0e4:	b293      	uxth	r3, r2
 800e0e6:	fb06 e303 	mla	r3, r6, r3, lr
 800e0ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e0ee:	0c1a      	lsrs	r2, r3, #16
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	ebaa 0303 	sub.w	r3, sl, r3
 800e0f6:	f8dc a000 	ldr.w	sl, [ip]
 800e0fa:	fa13 f38a 	uxtah	r3, r3, sl
 800e0fe:	fb06 220e 	mla	r2, r6, lr, r2
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e10a:	b292      	uxth	r2, r2
 800e10c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e114:	f8bd 3000 	ldrh.w	r3, [sp]
 800e118:	4581      	cmp	r9, r0
 800e11a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e11e:	f84c 3b04 	str.w	r3, [ip], #4
 800e122:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e126:	d2db      	bcs.n	800e0e0 <quorem+0x42>
 800e128:	f855 300b 	ldr.w	r3, [r5, fp]
 800e12c:	b92b      	cbnz	r3, 800e13a <quorem+0x9c>
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	3b04      	subs	r3, #4
 800e132:	429d      	cmp	r5, r3
 800e134:	461a      	mov	r2, r3
 800e136:	d32c      	bcc.n	800e192 <quorem+0xf4>
 800e138:	613c      	str	r4, [r7, #16]
 800e13a:	4638      	mov	r0, r7
 800e13c:	f001 f8f2 	bl	800f324 <__mcmp>
 800e140:	2800      	cmp	r0, #0
 800e142:	db22      	blt.n	800e18a <quorem+0xec>
 800e144:	3601      	adds	r6, #1
 800e146:	4629      	mov	r1, r5
 800e148:	2000      	movs	r0, #0
 800e14a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e14e:	f8d1 c000 	ldr.w	ip, [r1]
 800e152:	b293      	uxth	r3, r2
 800e154:	1ac3      	subs	r3, r0, r3
 800e156:	0c12      	lsrs	r2, r2, #16
 800e158:	fa13 f38c 	uxtah	r3, r3, ip
 800e15c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e164:	b29b      	uxth	r3, r3
 800e166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e16a:	45c1      	cmp	r9, r8
 800e16c:	f841 3b04 	str.w	r3, [r1], #4
 800e170:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e174:	d2e9      	bcs.n	800e14a <quorem+0xac>
 800e176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e17e:	b922      	cbnz	r2, 800e18a <quorem+0xec>
 800e180:	3b04      	subs	r3, #4
 800e182:	429d      	cmp	r5, r3
 800e184:	461a      	mov	r2, r3
 800e186:	d30a      	bcc.n	800e19e <quorem+0x100>
 800e188:	613c      	str	r4, [r7, #16]
 800e18a:	4630      	mov	r0, r6
 800e18c:	b003      	add	sp, #12
 800e18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e192:	6812      	ldr	r2, [r2, #0]
 800e194:	3b04      	subs	r3, #4
 800e196:	2a00      	cmp	r2, #0
 800e198:	d1ce      	bne.n	800e138 <quorem+0x9a>
 800e19a:	3c01      	subs	r4, #1
 800e19c:	e7c9      	b.n	800e132 <quorem+0x94>
 800e19e:	6812      	ldr	r2, [r2, #0]
 800e1a0:	3b04      	subs	r3, #4
 800e1a2:	2a00      	cmp	r2, #0
 800e1a4:	d1f0      	bne.n	800e188 <quorem+0xea>
 800e1a6:	3c01      	subs	r4, #1
 800e1a8:	e7eb      	b.n	800e182 <quorem+0xe4>
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	e7ee      	b.n	800e18c <quorem+0xee>
	...

0800e1b0 <_dtoa_r>:
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	ed2d 8b04 	vpush	{d8-d9}
 800e1b8:	69c5      	ldr	r5, [r0, #28]
 800e1ba:	b093      	sub	sp, #76	; 0x4c
 800e1bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1c0:	ec57 6b10 	vmov	r6, r7, d0
 800e1c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1c8:	9107      	str	r1, [sp, #28]
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	920a      	str	r2, [sp, #40]	; 0x28
 800e1ce:	930d      	str	r3, [sp, #52]	; 0x34
 800e1d0:	b975      	cbnz	r5, 800e1f0 <_dtoa_r+0x40>
 800e1d2:	2010      	movs	r0, #16
 800e1d4:	f7fe ffa4 	bl	800d120 <malloc>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	61e0      	str	r0, [r4, #28]
 800e1dc:	b920      	cbnz	r0, 800e1e8 <_dtoa_r+0x38>
 800e1de:	4bae      	ldr	r3, [pc, #696]	; (800e498 <_dtoa_r+0x2e8>)
 800e1e0:	21ef      	movs	r1, #239	; 0xef
 800e1e2:	48ae      	ldr	r0, [pc, #696]	; (800e49c <_dtoa_r+0x2ec>)
 800e1e4:	f001 fc14 	bl	800fa10 <__assert_func>
 800e1e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1ec:	6005      	str	r5, [r0, #0]
 800e1ee:	60c5      	str	r5, [r0, #12]
 800e1f0:	69e3      	ldr	r3, [r4, #28]
 800e1f2:	6819      	ldr	r1, [r3, #0]
 800e1f4:	b151      	cbz	r1, 800e20c <_dtoa_r+0x5c>
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	604a      	str	r2, [r1, #4]
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	4093      	lsls	r3, r2
 800e1fe:	608b      	str	r3, [r1, #8]
 800e200:	4620      	mov	r0, r4
 800e202:	f000 fe53 	bl	800eeac <_Bfree>
 800e206:	69e3      	ldr	r3, [r4, #28]
 800e208:	2200      	movs	r2, #0
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	1e3b      	subs	r3, r7, #0
 800e20e:	bfbb      	ittet	lt
 800e210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e214:	9303      	strlt	r3, [sp, #12]
 800e216:	2300      	movge	r3, #0
 800e218:	2201      	movlt	r2, #1
 800e21a:	bfac      	ite	ge
 800e21c:	f8c8 3000 	strge.w	r3, [r8]
 800e220:	f8c8 2000 	strlt.w	r2, [r8]
 800e224:	4b9e      	ldr	r3, [pc, #632]	; (800e4a0 <_dtoa_r+0x2f0>)
 800e226:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e22a:	ea33 0308 	bics.w	r3, r3, r8
 800e22e:	d11b      	bne.n	800e268 <_dtoa_r+0xb8>
 800e230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e232:	f242 730f 	movw	r3, #9999	; 0x270f
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e23c:	4333      	orrs	r3, r6
 800e23e:	f000 8593 	beq.w	800ed68 <_dtoa_r+0xbb8>
 800e242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e244:	b963      	cbnz	r3, 800e260 <_dtoa_r+0xb0>
 800e246:	4b97      	ldr	r3, [pc, #604]	; (800e4a4 <_dtoa_r+0x2f4>)
 800e248:	e027      	b.n	800e29a <_dtoa_r+0xea>
 800e24a:	4b97      	ldr	r3, [pc, #604]	; (800e4a8 <_dtoa_r+0x2f8>)
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	3308      	adds	r3, #8
 800e250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	9800      	ldr	r0, [sp, #0]
 800e256:	b013      	add	sp, #76	; 0x4c
 800e258:	ecbd 8b04 	vpop	{d8-d9}
 800e25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e260:	4b90      	ldr	r3, [pc, #576]	; (800e4a4 <_dtoa_r+0x2f4>)
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	3303      	adds	r3, #3
 800e266:	e7f3      	b.n	800e250 <_dtoa_r+0xa0>
 800e268:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e26c:	2200      	movs	r2, #0
 800e26e:	ec51 0b17 	vmov	r0, r1, d7
 800e272:	eeb0 8a47 	vmov.f32	s16, s14
 800e276:	eef0 8a67 	vmov.f32	s17, s15
 800e27a:	2300      	movs	r3, #0
 800e27c:	f7f2 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 800e280:	4681      	mov	r9, r0
 800e282:	b160      	cbz	r0, 800e29e <_dtoa_r+0xee>
 800e284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e286:	2301      	movs	r3, #1
 800e288:	6013      	str	r3, [r2, #0]
 800e28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 8568 	beq.w	800ed62 <_dtoa_r+0xbb2>
 800e292:	4b86      	ldr	r3, [pc, #536]	; (800e4ac <_dtoa_r+0x2fc>)
 800e294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e296:	6013      	str	r3, [r2, #0]
 800e298:	3b01      	subs	r3, #1
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	e7da      	b.n	800e254 <_dtoa_r+0xa4>
 800e29e:	aa10      	add	r2, sp, #64	; 0x40
 800e2a0:	a911      	add	r1, sp, #68	; 0x44
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	eeb0 0a48 	vmov.f32	s0, s16
 800e2a8:	eef0 0a68 	vmov.f32	s1, s17
 800e2ac:	f001 f8e0 	bl	800f470 <__d2b>
 800e2b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e2b4:	4682      	mov	sl, r0
 800e2b6:	2d00      	cmp	r5, #0
 800e2b8:	d07f      	beq.n	800e3ba <_dtoa_r+0x20a>
 800e2ba:	ee18 3a90 	vmov	r3, s17
 800e2be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e2c6:	ec51 0b18 	vmov	r0, r1, d8
 800e2ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e2ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	2200      	movs	r2, #0
 800e2da:	4b75      	ldr	r3, [pc, #468]	; (800e4b0 <_dtoa_r+0x300>)
 800e2dc:	f7f1 ffd4 	bl	8000288 <__aeabi_dsub>
 800e2e0:	a367      	add	r3, pc, #412	; (adr r3, 800e480 <_dtoa_r+0x2d0>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	f7f2 f987 	bl	80005f8 <__aeabi_dmul>
 800e2ea:	a367      	add	r3, pc, #412	; (adr r3, 800e488 <_dtoa_r+0x2d8>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f1 ffcc 	bl	800028c <__adddf3>
 800e2f4:	4606      	mov	r6, r0
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	460f      	mov	r7, r1
 800e2fa:	f7f2 f913 	bl	8000524 <__aeabi_i2d>
 800e2fe:	a364      	add	r3, pc, #400	; (adr r3, 800e490 <_dtoa_r+0x2e0>)
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	f7f2 f978 	bl	80005f8 <__aeabi_dmul>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	4630      	mov	r0, r6
 800e30e:	4639      	mov	r1, r7
 800e310:	f7f1 ffbc 	bl	800028c <__adddf3>
 800e314:	4606      	mov	r6, r0
 800e316:	460f      	mov	r7, r1
 800e318:	f7f2 fc1e 	bl	8000b58 <__aeabi_d2iz>
 800e31c:	2200      	movs	r2, #0
 800e31e:	4683      	mov	fp, r0
 800e320:	2300      	movs	r3, #0
 800e322:	4630      	mov	r0, r6
 800e324:	4639      	mov	r1, r7
 800e326:	f7f2 fbd9 	bl	8000adc <__aeabi_dcmplt>
 800e32a:	b148      	cbz	r0, 800e340 <_dtoa_r+0x190>
 800e32c:	4658      	mov	r0, fp
 800e32e:	f7f2 f8f9 	bl	8000524 <__aeabi_i2d>
 800e332:	4632      	mov	r2, r6
 800e334:	463b      	mov	r3, r7
 800e336:	f7f2 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e33a:	b908      	cbnz	r0, 800e340 <_dtoa_r+0x190>
 800e33c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e340:	f1bb 0f16 	cmp.w	fp, #22
 800e344:	d857      	bhi.n	800e3f6 <_dtoa_r+0x246>
 800e346:	4b5b      	ldr	r3, [pc, #364]	; (800e4b4 <_dtoa_r+0x304>)
 800e348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	ec51 0b18 	vmov	r0, r1, d8
 800e354:	f7f2 fbc2 	bl	8000adc <__aeabi_dcmplt>
 800e358:	2800      	cmp	r0, #0
 800e35a:	d04e      	beq.n	800e3fa <_dtoa_r+0x24a>
 800e35c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e360:	2300      	movs	r3, #0
 800e362:	930c      	str	r3, [sp, #48]	; 0x30
 800e364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e366:	1b5b      	subs	r3, r3, r5
 800e368:	1e5a      	subs	r2, r3, #1
 800e36a:	bf45      	ittet	mi
 800e36c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e370:	9305      	strmi	r3, [sp, #20]
 800e372:	2300      	movpl	r3, #0
 800e374:	2300      	movmi	r3, #0
 800e376:	9206      	str	r2, [sp, #24]
 800e378:	bf54      	ite	pl
 800e37a:	9305      	strpl	r3, [sp, #20]
 800e37c:	9306      	strmi	r3, [sp, #24]
 800e37e:	f1bb 0f00 	cmp.w	fp, #0
 800e382:	db3c      	blt.n	800e3fe <_dtoa_r+0x24e>
 800e384:	9b06      	ldr	r3, [sp, #24]
 800e386:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e38a:	445b      	add	r3, fp
 800e38c:	9306      	str	r3, [sp, #24]
 800e38e:	2300      	movs	r3, #0
 800e390:	9308      	str	r3, [sp, #32]
 800e392:	9b07      	ldr	r3, [sp, #28]
 800e394:	2b09      	cmp	r3, #9
 800e396:	d868      	bhi.n	800e46a <_dtoa_r+0x2ba>
 800e398:	2b05      	cmp	r3, #5
 800e39a:	bfc4      	itt	gt
 800e39c:	3b04      	subgt	r3, #4
 800e39e:	9307      	strgt	r3, [sp, #28]
 800e3a0:	9b07      	ldr	r3, [sp, #28]
 800e3a2:	f1a3 0302 	sub.w	r3, r3, #2
 800e3a6:	bfcc      	ite	gt
 800e3a8:	2500      	movgt	r5, #0
 800e3aa:	2501      	movle	r5, #1
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	f200 8085 	bhi.w	800e4bc <_dtoa_r+0x30c>
 800e3b2:	e8df f003 	tbb	[pc, r3]
 800e3b6:	3b2e      	.short	0x3b2e
 800e3b8:	5839      	.short	0x5839
 800e3ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3be:	441d      	add	r5, r3
 800e3c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3c4:	2b20      	cmp	r3, #32
 800e3c6:	bfc1      	itttt	gt
 800e3c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800e3d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e3d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e3d8:	bfd6      	itet	le
 800e3da:	f1c3 0320 	rsble	r3, r3, #32
 800e3de:	ea48 0003 	orrgt.w	r0, r8, r3
 800e3e2:	fa06 f003 	lslle.w	r0, r6, r3
 800e3e6:	f7f2 f88d 	bl	8000504 <__aeabi_ui2d>
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e3f0:	3d01      	subs	r5, #1
 800e3f2:	920e      	str	r2, [sp, #56]	; 0x38
 800e3f4:	e76f      	b.n	800e2d6 <_dtoa_r+0x126>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e7b3      	b.n	800e362 <_dtoa_r+0x1b2>
 800e3fa:	900c      	str	r0, [sp, #48]	; 0x30
 800e3fc:	e7b2      	b.n	800e364 <_dtoa_r+0x1b4>
 800e3fe:	9b05      	ldr	r3, [sp, #20]
 800e400:	eba3 030b 	sub.w	r3, r3, fp
 800e404:	9305      	str	r3, [sp, #20]
 800e406:	f1cb 0300 	rsb	r3, fp, #0
 800e40a:	9308      	str	r3, [sp, #32]
 800e40c:	2300      	movs	r3, #0
 800e40e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e410:	e7bf      	b.n	800e392 <_dtoa_r+0x1e2>
 800e412:	2300      	movs	r3, #0
 800e414:	9309      	str	r3, [sp, #36]	; 0x24
 800e416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dc52      	bgt.n	800e4c2 <_dtoa_r+0x312>
 800e41c:	2301      	movs	r3, #1
 800e41e:	9301      	str	r3, [sp, #4]
 800e420:	9304      	str	r3, [sp, #16]
 800e422:	461a      	mov	r2, r3
 800e424:	920a      	str	r2, [sp, #40]	; 0x28
 800e426:	e00b      	b.n	800e440 <_dtoa_r+0x290>
 800e428:	2301      	movs	r3, #1
 800e42a:	e7f3      	b.n	800e414 <_dtoa_r+0x264>
 800e42c:	2300      	movs	r3, #0
 800e42e:	9309      	str	r3, [sp, #36]	; 0x24
 800e430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e432:	445b      	add	r3, fp
 800e434:	9301      	str	r3, [sp, #4]
 800e436:	3301      	adds	r3, #1
 800e438:	2b01      	cmp	r3, #1
 800e43a:	9304      	str	r3, [sp, #16]
 800e43c:	bfb8      	it	lt
 800e43e:	2301      	movlt	r3, #1
 800e440:	69e0      	ldr	r0, [r4, #28]
 800e442:	2100      	movs	r1, #0
 800e444:	2204      	movs	r2, #4
 800e446:	f102 0614 	add.w	r6, r2, #20
 800e44a:	429e      	cmp	r6, r3
 800e44c:	d93d      	bls.n	800e4ca <_dtoa_r+0x31a>
 800e44e:	6041      	str	r1, [r0, #4]
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fceb 	bl	800ee2c <_Balloc>
 800e456:	9000      	str	r0, [sp, #0]
 800e458:	2800      	cmp	r0, #0
 800e45a:	d139      	bne.n	800e4d0 <_dtoa_r+0x320>
 800e45c:	4b16      	ldr	r3, [pc, #88]	; (800e4b8 <_dtoa_r+0x308>)
 800e45e:	4602      	mov	r2, r0
 800e460:	f240 11af 	movw	r1, #431	; 0x1af
 800e464:	e6bd      	b.n	800e1e2 <_dtoa_r+0x32>
 800e466:	2301      	movs	r3, #1
 800e468:	e7e1      	b.n	800e42e <_dtoa_r+0x27e>
 800e46a:	2501      	movs	r5, #1
 800e46c:	2300      	movs	r3, #0
 800e46e:	9307      	str	r3, [sp, #28]
 800e470:	9509      	str	r5, [sp, #36]	; 0x24
 800e472:	f04f 33ff 	mov.w	r3, #4294967295
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	9304      	str	r3, [sp, #16]
 800e47a:	2200      	movs	r2, #0
 800e47c:	2312      	movs	r3, #18
 800e47e:	e7d1      	b.n	800e424 <_dtoa_r+0x274>
 800e480:	636f4361 	.word	0x636f4361
 800e484:	3fd287a7 	.word	0x3fd287a7
 800e488:	8b60c8b3 	.word	0x8b60c8b3
 800e48c:	3fc68a28 	.word	0x3fc68a28
 800e490:	509f79fb 	.word	0x509f79fb
 800e494:	3fd34413 	.word	0x3fd34413
 800e498:	0801bcf1 	.word	0x0801bcf1
 800e49c:	0801bd08 	.word	0x0801bd08
 800e4a0:	7ff00000 	.word	0x7ff00000
 800e4a4:	0801bced 	.word	0x0801bced
 800e4a8:	0801bce4 	.word	0x0801bce4
 800e4ac:	0801bcc1 	.word	0x0801bcc1
 800e4b0:	3ff80000 	.word	0x3ff80000
 800e4b4:	0801bdf8 	.word	0x0801bdf8
 800e4b8:	0801bd60 	.word	0x0801bd60
 800e4bc:	2301      	movs	r3, #1
 800e4be:	9309      	str	r3, [sp, #36]	; 0x24
 800e4c0:	e7d7      	b.n	800e472 <_dtoa_r+0x2c2>
 800e4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	9304      	str	r3, [sp, #16]
 800e4c8:	e7ba      	b.n	800e440 <_dtoa_r+0x290>
 800e4ca:	3101      	adds	r1, #1
 800e4cc:	0052      	lsls	r2, r2, #1
 800e4ce:	e7ba      	b.n	800e446 <_dtoa_r+0x296>
 800e4d0:	69e3      	ldr	r3, [r4, #28]
 800e4d2:	9a00      	ldr	r2, [sp, #0]
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	9b04      	ldr	r3, [sp, #16]
 800e4d8:	2b0e      	cmp	r3, #14
 800e4da:	f200 80a8 	bhi.w	800e62e <_dtoa_r+0x47e>
 800e4de:	2d00      	cmp	r5, #0
 800e4e0:	f000 80a5 	beq.w	800e62e <_dtoa_r+0x47e>
 800e4e4:	f1bb 0f00 	cmp.w	fp, #0
 800e4e8:	dd38      	ble.n	800e55c <_dtoa_r+0x3ac>
 800e4ea:	4bc0      	ldr	r3, [pc, #768]	; (800e7ec <_dtoa_r+0x63c>)
 800e4ec:	f00b 020f 	and.w	r2, fp, #15
 800e4f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e4f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e4fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e500:	d019      	beq.n	800e536 <_dtoa_r+0x386>
 800e502:	4bbb      	ldr	r3, [pc, #748]	; (800e7f0 <_dtoa_r+0x640>)
 800e504:	ec51 0b18 	vmov	r0, r1, d8
 800e508:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e50c:	f7f2 f99e 	bl	800084c <__aeabi_ddiv>
 800e510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e514:	f008 080f 	and.w	r8, r8, #15
 800e518:	2503      	movs	r5, #3
 800e51a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e7f0 <_dtoa_r+0x640>
 800e51e:	f1b8 0f00 	cmp.w	r8, #0
 800e522:	d10a      	bne.n	800e53a <_dtoa_r+0x38a>
 800e524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e528:	4632      	mov	r2, r6
 800e52a:	463b      	mov	r3, r7
 800e52c:	f7f2 f98e 	bl	800084c <__aeabi_ddiv>
 800e530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e534:	e02b      	b.n	800e58e <_dtoa_r+0x3de>
 800e536:	2502      	movs	r5, #2
 800e538:	e7ef      	b.n	800e51a <_dtoa_r+0x36a>
 800e53a:	f018 0f01 	tst.w	r8, #1
 800e53e:	d008      	beq.n	800e552 <_dtoa_r+0x3a2>
 800e540:	4630      	mov	r0, r6
 800e542:	4639      	mov	r1, r7
 800e544:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e548:	f7f2 f856 	bl	80005f8 <__aeabi_dmul>
 800e54c:	3501      	adds	r5, #1
 800e54e:	4606      	mov	r6, r0
 800e550:	460f      	mov	r7, r1
 800e552:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e556:	f109 0908 	add.w	r9, r9, #8
 800e55a:	e7e0      	b.n	800e51e <_dtoa_r+0x36e>
 800e55c:	f000 809f 	beq.w	800e69e <_dtoa_r+0x4ee>
 800e560:	f1cb 0600 	rsb	r6, fp, #0
 800e564:	4ba1      	ldr	r3, [pc, #644]	; (800e7ec <_dtoa_r+0x63c>)
 800e566:	4fa2      	ldr	r7, [pc, #648]	; (800e7f0 <_dtoa_r+0x640>)
 800e568:	f006 020f 	and.w	r2, r6, #15
 800e56c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	ec51 0b18 	vmov	r0, r1, d8
 800e578:	f7f2 f83e 	bl	80005f8 <__aeabi_dmul>
 800e57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e580:	1136      	asrs	r6, r6, #4
 800e582:	2300      	movs	r3, #0
 800e584:	2502      	movs	r5, #2
 800e586:	2e00      	cmp	r6, #0
 800e588:	d17e      	bne.n	800e688 <_dtoa_r+0x4d8>
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1d0      	bne.n	800e530 <_dtoa_r+0x380>
 800e58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e590:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 8084 	beq.w	800e6a2 <_dtoa_r+0x4f2>
 800e59a:	4b96      	ldr	r3, [pc, #600]	; (800e7f4 <_dtoa_r+0x644>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	4640      	mov	r0, r8
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	f7f2 fa9b 	bl	8000adc <__aeabi_dcmplt>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d07b      	beq.n	800e6a2 <_dtoa_r+0x4f2>
 800e5aa:	9b04      	ldr	r3, [sp, #16]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d078      	beq.n	800e6a2 <_dtoa_r+0x4f2>
 800e5b0:	9b01      	ldr	r3, [sp, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dd39      	ble.n	800e62a <_dtoa_r+0x47a>
 800e5b6:	4b90      	ldr	r3, [pc, #576]	; (800e7f8 <_dtoa_r+0x648>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4649      	mov	r1, r9
 800e5be:	f7f2 f81b 	bl	80005f8 <__aeabi_dmul>
 800e5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5c6:	9e01      	ldr	r6, [sp, #4]
 800e5c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f7f1 ffa6 	bl	8000524 <__aeabi_i2d>
 800e5d8:	4642      	mov	r2, r8
 800e5da:	464b      	mov	r3, r9
 800e5dc:	f7f2 f80c 	bl	80005f8 <__aeabi_dmul>
 800e5e0:	4b86      	ldr	r3, [pc, #536]	; (800e7fc <_dtoa_r+0x64c>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f7f1 fe52 	bl	800028c <__adddf3>
 800e5e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e5ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5f0:	9303      	str	r3, [sp, #12]
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	d158      	bne.n	800e6a8 <_dtoa_r+0x4f8>
 800e5f6:	4b82      	ldr	r3, [pc, #520]	; (800e800 <_dtoa_r+0x650>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	4649      	mov	r1, r9
 800e5fe:	f7f1 fe43 	bl	8000288 <__aeabi_dsub>
 800e602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e606:	4680      	mov	r8, r0
 800e608:	4689      	mov	r9, r1
 800e60a:	f7f2 fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800e60e:	2800      	cmp	r0, #0
 800e610:	f040 8296 	bne.w	800eb40 <_dtoa_r+0x990>
 800e614:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e618:	4640      	mov	r0, r8
 800e61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e61e:	4649      	mov	r1, r9
 800e620:	f7f2 fa5c 	bl	8000adc <__aeabi_dcmplt>
 800e624:	2800      	cmp	r0, #0
 800e626:	f040 8289 	bne.w	800eb3c <_dtoa_r+0x98c>
 800e62a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e62e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e630:	2b00      	cmp	r3, #0
 800e632:	f2c0 814e 	blt.w	800e8d2 <_dtoa_r+0x722>
 800e636:	f1bb 0f0e 	cmp.w	fp, #14
 800e63a:	f300 814a 	bgt.w	800e8d2 <_dtoa_r+0x722>
 800e63e:	4b6b      	ldr	r3, [pc, #428]	; (800e7ec <_dtoa_r+0x63c>)
 800e640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e644:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f280 80dc 	bge.w	800e808 <_dtoa_r+0x658>
 800e650:	9b04      	ldr	r3, [sp, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	f300 80d8 	bgt.w	800e808 <_dtoa_r+0x658>
 800e658:	f040 826f 	bne.w	800eb3a <_dtoa_r+0x98a>
 800e65c:	4b68      	ldr	r3, [pc, #416]	; (800e800 <_dtoa_r+0x650>)
 800e65e:	2200      	movs	r2, #0
 800e660:	4640      	mov	r0, r8
 800e662:	4649      	mov	r1, r9
 800e664:	f7f1 ffc8 	bl	80005f8 <__aeabi_dmul>
 800e668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e66c:	f7f2 fa4a 	bl	8000b04 <__aeabi_dcmpge>
 800e670:	9e04      	ldr	r6, [sp, #16]
 800e672:	4637      	mov	r7, r6
 800e674:	2800      	cmp	r0, #0
 800e676:	f040 8245 	bne.w	800eb04 <_dtoa_r+0x954>
 800e67a:	9d00      	ldr	r5, [sp, #0]
 800e67c:	2331      	movs	r3, #49	; 0x31
 800e67e:	f805 3b01 	strb.w	r3, [r5], #1
 800e682:	f10b 0b01 	add.w	fp, fp, #1
 800e686:	e241      	b.n	800eb0c <_dtoa_r+0x95c>
 800e688:	07f2      	lsls	r2, r6, #31
 800e68a:	d505      	bpl.n	800e698 <_dtoa_r+0x4e8>
 800e68c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e690:	f7f1 ffb2 	bl	80005f8 <__aeabi_dmul>
 800e694:	3501      	adds	r5, #1
 800e696:	2301      	movs	r3, #1
 800e698:	1076      	asrs	r6, r6, #1
 800e69a:	3708      	adds	r7, #8
 800e69c:	e773      	b.n	800e586 <_dtoa_r+0x3d6>
 800e69e:	2502      	movs	r5, #2
 800e6a0:	e775      	b.n	800e58e <_dtoa_r+0x3de>
 800e6a2:	9e04      	ldr	r6, [sp, #16]
 800e6a4:	465f      	mov	r7, fp
 800e6a6:	e792      	b.n	800e5ce <_dtoa_r+0x41e>
 800e6a8:	9900      	ldr	r1, [sp, #0]
 800e6aa:	4b50      	ldr	r3, [pc, #320]	; (800e7ec <_dtoa_r+0x63c>)
 800e6ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6b0:	4431      	add	r1, r6
 800e6b2:	9102      	str	r1, [sp, #8]
 800e6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6b6:	eeb0 9a47 	vmov.f32	s18, s14
 800e6ba:	eef0 9a67 	vmov.f32	s19, s15
 800e6be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e6c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6c6:	2900      	cmp	r1, #0
 800e6c8:	d044      	beq.n	800e754 <_dtoa_r+0x5a4>
 800e6ca:	494e      	ldr	r1, [pc, #312]	; (800e804 <_dtoa_r+0x654>)
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	f7f2 f8bd 	bl	800084c <__aeabi_ddiv>
 800e6d2:	ec53 2b19 	vmov	r2, r3, d9
 800e6d6:	f7f1 fdd7 	bl	8000288 <__aeabi_dsub>
 800e6da:	9d00      	ldr	r5, [sp, #0]
 800e6dc:	ec41 0b19 	vmov	d9, r0, r1
 800e6e0:	4649      	mov	r1, r9
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	f7f2 fa38 	bl	8000b58 <__aeabi_d2iz>
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	f7f1 ff1b 	bl	8000524 <__aeabi_i2d>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	4649      	mov	r1, r9
 800e6f6:	f7f1 fdc7 	bl	8000288 <__aeabi_dsub>
 800e6fa:	3630      	adds	r6, #48	; 0x30
 800e6fc:	f805 6b01 	strb.w	r6, [r5], #1
 800e700:	ec53 2b19 	vmov	r2, r3, d9
 800e704:	4680      	mov	r8, r0
 800e706:	4689      	mov	r9, r1
 800e708:	f7f2 f9e8 	bl	8000adc <__aeabi_dcmplt>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d164      	bne.n	800e7da <_dtoa_r+0x62a>
 800e710:	4642      	mov	r2, r8
 800e712:	464b      	mov	r3, r9
 800e714:	4937      	ldr	r1, [pc, #220]	; (800e7f4 <_dtoa_r+0x644>)
 800e716:	2000      	movs	r0, #0
 800e718:	f7f1 fdb6 	bl	8000288 <__aeabi_dsub>
 800e71c:	ec53 2b19 	vmov	r2, r3, d9
 800e720:	f7f2 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800e724:	2800      	cmp	r0, #0
 800e726:	f040 80b6 	bne.w	800e896 <_dtoa_r+0x6e6>
 800e72a:	9b02      	ldr	r3, [sp, #8]
 800e72c:	429d      	cmp	r5, r3
 800e72e:	f43f af7c 	beq.w	800e62a <_dtoa_r+0x47a>
 800e732:	4b31      	ldr	r3, [pc, #196]	; (800e7f8 <_dtoa_r+0x648>)
 800e734:	ec51 0b19 	vmov	r0, r1, d9
 800e738:	2200      	movs	r2, #0
 800e73a:	f7f1 ff5d 	bl	80005f8 <__aeabi_dmul>
 800e73e:	4b2e      	ldr	r3, [pc, #184]	; (800e7f8 <_dtoa_r+0x648>)
 800e740:	ec41 0b19 	vmov	d9, r0, r1
 800e744:	2200      	movs	r2, #0
 800e746:	4640      	mov	r0, r8
 800e748:	4649      	mov	r1, r9
 800e74a:	f7f1 ff55 	bl	80005f8 <__aeabi_dmul>
 800e74e:	4680      	mov	r8, r0
 800e750:	4689      	mov	r9, r1
 800e752:	e7c5      	b.n	800e6e0 <_dtoa_r+0x530>
 800e754:	ec51 0b17 	vmov	r0, r1, d7
 800e758:	f7f1 ff4e 	bl	80005f8 <__aeabi_dmul>
 800e75c:	9b02      	ldr	r3, [sp, #8]
 800e75e:	9d00      	ldr	r5, [sp, #0]
 800e760:	930f      	str	r3, [sp, #60]	; 0x3c
 800e762:	ec41 0b19 	vmov	d9, r0, r1
 800e766:	4649      	mov	r1, r9
 800e768:	4640      	mov	r0, r8
 800e76a:	f7f2 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800e76e:	4606      	mov	r6, r0
 800e770:	f7f1 fed8 	bl	8000524 <__aeabi_i2d>
 800e774:	3630      	adds	r6, #48	; 0x30
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4640      	mov	r0, r8
 800e77c:	4649      	mov	r1, r9
 800e77e:	f7f1 fd83 	bl	8000288 <__aeabi_dsub>
 800e782:	f805 6b01 	strb.w	r6, [r5], #1
 800e786:	9b02      	ldr	r3, [sp, #8]
 800e788:	429d      	cmp	r5, r3
 800e78a:	4680      	mov	r8, r0
 800e78c:	4689      	mov	r9, r1
 800e78e:	f04f 0200 	mov.w	r2, #0
 800e792:	d124      	bne.n	800e7de <_dtoa_r+0x62e>
 800e794:	4b1b      	ldr	r3, [pc, #108]	; (800e804 <_dtoa_r+0x654>)
 800e796:	ec51 0b19 	vmov	r0, r1, d9
 800e79a:	f7f1 fd77 	bl	800028c <__adddf3>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	f7f2 f9b7 	bl	8000b18 <__aeabi_dcmpgt>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d173      	bne.n	800e896 <_dtoa_r+0x6e6>
 800e7ae:	ec53 2b19 	vmov	r2, r3, d9
 800e7b2:	4914      	ldr	r1, [pc, #80]	; (800e804 <_dtoa_r+0x654>)
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	f7f1 fd67 	bl	8000288 <__aeabi_dsub>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f2 f98b 	bl	8000adc <__aeabi_dcmplt>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f43f af2f 	beq.w	800e62a <_dtoa_r+0x47a>
 800e7cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e7ce:	1e6b      	subs	r3, r5, #1
 800e7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7d6:	2b30      	cmp	r3, #48	; 0x30
 800e7d8:	d0f8      	beq.n	800e7cc <_dtoa_r+0x61c>
 800e7da:	46bb      	mov	fp, r7
 800e7dc:	e04a      	b.n	800e874 <_dtoa_r+0x6c4>
 800e7de:	4b06      	ldr	r3, [pc, #24]	; (800e7f8 <_dtoa_r+0x648>)
 800e7e0:	f7f1 ff0a 	bl	80005f8 <__aeabi_dmul>
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	4689      	mov	r9, r1
 800e7e8:	e7bd      	b.n	800e766 <_dtoa_r+0x5b6>
 800e7ea:	bf00      	nop
 800e7ec:	0801bdf8 	.word	0x0801bdf8
 800e7f0:	0801bdd0 	.word	0x0801bdd0
 800e7f4:	3ff00000 	.word	0x3ff00000
 800e7f8:	40240000 	.word	0x40240000
 800e7fc:	401c0000 	.word	0x401c0000
 800e800:	40140000 	.word	0x40140000
 800e804:	3fe00000 	.word	0x3fe00000
 800e808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e80c:	9d00      	ldr	r5, [sp, #0]
 800e80e:	4642      	mov	r2, r8
 800e810:	464b      	mov	r3, r9
 800e812:	4630      	mov	r0, r6
 800e814:	4639      	mov	r1, r7
 800e816:	f7f2 f819 	bl	800084c <__aeabi_ddiv>
 800e81a:	f7f2 f99d 	bl	8000b58 <__aeabi_d2iz>
 800e81e:	9001      	str	r0, [sp, #4]
 800e820:	f7f1 fe80 	bl	8000524 <__aeabi_i2d>
 800e824:	4642      	mov	r2, r8
 800e826:	464b      	mov	r3, r9
 800e828:	f7f1 fee6 	bl	80005f8 <__aeabi_dmul>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	4630      	mov	r0, r6
 800e832:	4639      	mov	r1, r7
 800e834:	f7f1 fd28 	bl	8000288 <__aeabi_dsub>
 800e838:	9e01      	ldr	r6, [sp, #4]
 800e83a:	9f04      	ldr	r7, [sp, #16]
 800e83c:	3630      	adds	r6, #48	; 0x30
 800e83e:	f805 6b01 	strb.w	r6, [r5], #1
 800e842:	9e00      	ldr	r6, [sp, #0]
 800e844:	1bae      	subs	r6, r5, r6
 800e846:	42b7      	cmp	r7, r6
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	d134      	bne.n	800e8b8 <_dtoa_r+0x708>
 800e84e:	f7f1 fd1d 	bl	800028c <__adddf3>
 800e852:	4642      	mov	r2, r8
 800e854:	464b      	mov	r3, r9
 800e856:	4606      	mov	r6, r0
 800e858:	460f      	mov	r7, r1
 800e85a:	f7f2 f95d 	bl	8000b18 <__aeabi_dcmpgt>
 800e85e:	b9c8      	cbnz	r0, 800e894 <_dtoa_r+0x6e4>
 800e860:	4642      	mov	r2, r8
 800e862:	464b      	mov	r3, r9
 800e864:	4630      	mov	r0, r6
 800e866:	4639      	mov	r1, r7
 800e868:	f7f2 f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e86c:	b110      	cbz	r0, 800e874 <_dtoa_r+0x6c4>
 800e86e:	9b01      	ldr	r3, [sp, #4]
 800e870:	07db      	lsls	r3, r3, #31
 800e872:	d40f      	bmi.n	800e894 <_dtoa_r+0x6e4>
 800e874:	4651      	mov	r1, sl
 800e876:	4620      	mov	r0, r4
 800e878:	f000 fb18 	bl	800eeac <_Bfree>
 800e87c:	2300      	movs	r3, #0
 800e87e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e880:	702b      	strb	r3, [r5, #0]
 800e882:	f10b 0301 	add.w	r3, fp, #1
 800e886:	6013      	str	r3, [r2, #0]
 800e888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f43f ace2 	beq.w	800e254 <_dtoa_r+0xa4>
 800e890:	601d      	str	r5, [r3, #0]
 800e892:	e4df      	b.n	800e254 <_dtoa_r+0xa4>
 800e894:	465f      	mov	r7, fp
 800e896:	462b      	mov	r3, r5
 800e898:	461d      	mov	r5, r3
 800e89a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e89e:	2a39      	cmp	r2, #57	; 0x39
 800e8a0:	d106      	bne.n	800e8b0 <_dtoa_r+0x700>
 800e8a2:	9a00      	ldr	r2, [sp, #0]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d1f7      	bne.n	800e898 <_dtoa_r+0x6e8>
 800e8a8:	9900      	ldr	r1, [sp, #0]
 800e8aa:	2230      	movs	r2, #48	; 0x30
 800e8ac:	3701      	adds	r7, #1
 800e8ae:	700a      	strb	r2, [r1, #0]
 800e8b0:	781a      	ldrb	r2, [r3, #0]
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	701a      	strb	r2, [r3, #0]
 800e8b6:	e790      	b.n	800e7da <_dtoa_r+0x62a>
 800e8b8:	4ba3      	ldr	r3, [pc, #652]	; (800eb48 <_dtoa_r+0x998>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f7f1 fe9c 	bl	80005f8 <__aeabi_dmul>
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	4606      	mov	r6, r0
 800e8c6:	460f      	mov	r7, r1
 800e8c8:	f7f2 f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d09e      	beq.n	800e80e <_dtoa_r+0x65e>
 800e8d0:	e7d0      	b.n	800e874 <_dtoa_r+0x6c4>
 800e8d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8d4:	2a00      	cmp	r2, #0
 800e8d6:	f000 80ca 	beq.w	800ea6e <_dtoa_r+0x8be>
 800e8da:	9a07      	ldr	r2, [sp, #28]
 800e8dc:	2a01      	cmp	r2, #1
 800e8de:	f300 80ad 	bgt.w	800ea3c <_dtoa_r+0x88c>
 800e8e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	f000 80a5 	beq.w	800ea34 <_dtoa_r+0x884>
 800e8ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8ee:	9e08      	ldr	r6, [sp, #32]
 800e8f0:	9d05      	ldr	r5, [sp, #20]
 800e8f2:	9a05      	ldr	r2, [sp, #20]
 800e8f4:	441a      	add	r2, r3
 800e8f6:	9205      	str	r2, [sp, #20]
 800e8f8:	9a06      	ldr	r2, [sp, #24]
 800e8fa:	2101      	movs	r1, #1
 800e8fc:	441a      	add	r2, r3
 800e8fe:	4620      	mov	r0, r4
 800e900:	9206      	str	r2, [sp, #24]
 800e902:	f000 fb89 	bl	800f018 <__i2b>
 800e906:	4607      	mov	r7, r0
 800e908:	b165      	cbz	r5, 800e924 <_dtoa_r+0x774>
 800e90a:	9b06      	ldr	r3, [sp, #24]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	dd09      	ble.n	800e924 <_dtoa_r+0x774>
 800e910:	42ab      	cmp	r3, r5
 800e912:	9a05      	ldr	r2, [sp, #20]
 800e914:	bfa8      	it	ge
 800e916:	462b      	movge	r3, r5
 800e918:	1ad2      	subs	r2, r2, r3
 800e91a:	9205      	str	r2, [sp, #20]
 800e91c:	9a06      	ldr	r2, [sp, #24]
 800e91e:	1aed      	subs	r5, r5, r3
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	9306      	str	r3, [sp, #24]
 800e924:	9b08      	ldr	r3, [sp, #32]
 800e926:	b1f3      	cbz	r3, 800e966 <_dtoa_r+0x7b6>
 800e928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f000 80a3 	beq.w	800ea76 <_dtoa_r+0x8c6>
 800e930:	2e00      	cmp	r6, #0
 800e932:	dd10      	ble.n	800e956 <_dtoa_r+0x7a6>
 800e934:	4639      	mov	r1, r7
 800e936:	4632      	mov	r2, r6
 800e938:	4620      	mov	r0, r4
 800e93a:	f000 fc2d 	bl	800f198 <__pow5mult>
 800e93e:	4652      	mov	r2, sl
 800e940:	4601      	mov	r1, r0
 800e942:	4607      	mov	r7, r0
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fb7d 	bl	800f044 <__multiply>
 800e94a:	4651      	mov	r1, sl
 800e94c:	4680      	mov	r8, r0
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 faac 	bl	800eeac <_Bfree>
 800e954:	46c2      	mov	sl, r8
 800e956:	9b08      	ldr	r3, [sp, #32]
 800e958:	1b9a      	subs	r2, r3, r6
 800e95a:	d004      	beq.n	800e966 <_dtoa_r+0x7b6>
 800e95c:	4651      	mov	r1, sl
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 fc1a 	bl	800f198 <__pow5mult>
 800e964:	4682      	mov	sl, r0
 800e966:	2101      	movs	r1, #1
 800e968:	4620      	mov	r0, r4
 800e96a:	f000 fb55 	bl	800f018 <__i2b>
 800e96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e970:	2b00      	cmp	r3, #0
 800e972:	4606      	mov	r6, r0
 800e974:	f340 8081 	ble.w	800ea7a <_dtoa_r+0x8ca>
 800e978:	461a      	mov	r2, r3
 800e97a:	4601      	mov	r1, r0
 800e97c:	4620      	mov	r0, r4
 800e97e:	f000 fc0b 	bl	800f198 <__pow5mult>
 800e982:	9b07      	ldr	r3, [sp, #28]
 800e984:	2b01      	cmp	r3, #1
 800e986:	4606      	mov	r6, r0
 800e988:	dd7a      	ble.n	800ea80 <_dtoa_r+0x8d0>
 800e98a:	f04f 0800 	mov.w	r8, #0
 800e98e:	6933      	ldr	r3, [r6, #16]
 800e990:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	f000 faf1 	bl	800ef7c <__hi0bits>
 800e99a:	f1c0 0020 	rsb	r0, r0, #32
 800e99e:	9b06      	ldr	r3, [sp, #24]
 800e9a0:	4418      	add	r0, r3
 800e9a2:	f010 001f 	ands.w	r0, r0, #31
 800e9a6:	f000 8094 	beq.w	800ead2 <_dtoa_r+0x922>
 800e9aa:	f1c0 0320 	rsb	r3, r0, #32
 800e9ae:	2b04      	cmp	r3, #4
 800e9b0:	f340 8085 	ble.w	800eabe <_dtoa_r+0x90e>
 800e9b4:	9b05      	ldr	r3, [sp, #20]
 800e9b6:	f1c0 001c 	rsb	r0, r0, #28
 800e9ba:	4403      	add	r3, r0
 800e9bc:	9305      	str	r3, [sp, #20]
 800e9be:	9b06      	ldr	r3, [sp, #24]
 800e9c0:	4403      	add	r3, r0
 800e9c2:	4405      	add	r5, r0
 800e9c4:	9306      	str	r3, [sp, #24]
 800e9c6:	9b05      	ldr	r3, [sp, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dd05      	ble.n	800e9d8 <_dtoa_r+0x828>
 800e9cc:	4651      	mov	r1, sl
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 fc3b 	bl	800f24c <__lshift>
 800e9d6:	4682      	mov	sl, r0
 800e9d8:	9b06      	ldr	r3, [sp, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	dd05      	ble.n	800e9ea <_dtoa_r+0x83a>
 800e9de:	4631      	mov	r1, r6
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f000 fc32 	bl	800f24c <__lshift>
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d072      	beq.n	800ead6 <_dtoa_r+0x926>
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	4650      	mov	r0, sl
 800e9f4:	f000 fc96 	bl	800f324 <__mcmp>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	da6c      	bge.n	800ead6 <_dtoa_r+0x926>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4651      	mov	r1, sl
 800ea00:	220a      	movs	r2, #10
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 fa74 	bl	800eef0 <__multadd>
 800ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea0e:	4682      	mov	sl, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 81b0 	beq.w	800ed76 <_dtoa_r+0xbc6>
 800ea16:	2300      	movs	r3, #0
 800ea18:	4639      	mov	r1, r7
 800ea1a:	220a      	movs	r2, #10
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f000 fa67 	bl	800eef0 <__multadd>
 800ea22:	9b01      	ldr	r3, [sp, #4]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	4607      	mov	r7, r0
 800ea28:	f300 8096 	bgt.w	800eb58 <_dtoa_r+0x9a8>
 800ea2c:	9b07      	ldr	r3, [sp, #28]
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	dc59      	bgt.n	800eae6 <_dtoa_r+0x936>
 800ea32:	e091      	b.n	800eb58 <_dtoa_r+0x9a8>
 800ea34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea3a:	e758      	b.n	800e8ee <_dtoa_r+0x73e>
 800ea3c:	9b04      	ldr	r3, [sp, #16]
 800ea3e:	1e5e      	subs	r6, r3, #1
 800ea40:	9b08      	ldr	r3, [sp, #32]
 800ea42:	42b3      	cmp	r3, r6
 800ea44:	bfbf      	itttt	lt
 800ea46:	9b08      	ldrlt	r3, [sp, #32]
 800ea48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ea4a:	9608      	strlt	r6, [sp, #32]
 800ea4c:	1af3      	sublt	r3, r6, r3
 800ea4e:	bfb4      	ite	lt
 800ea50:	18d2      	addlt	r2, r2, r3
 800ea52:	1b9e      	subge	r6, r3, r6
 800ea54:	9b04      	ldr	r3, [sp, #16]
 800ea56:	bfbc      	itt	lt
 800ea58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ea5a:	2600      	movlt	r6, #0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bfb7      	itett	lt
 800ea60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ea64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ea68:	1a9d      	sublt	r5, r3, r2
 800ea6a:	2300      	movlt	r3, #0
 800ea6c:	e741      	b.n	800e8f2 <_dtoa_r+0x742>
 800ea6e:	9e08      	ldr	r6, [sp, #32]
 800ea70:	9d05      	ldr	r5, [sp, #20]
 800ea72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ea74:	e748      	b.n	800e908 <_dtoa_r+0x758>
 800ea76:	9a08      	ldr	r2, [sp, #32]
 800ea78:	e770      	b.n	800e95c <_dtoa_r+0x7ac>
 800ea7a:	9b07      	ldr	r3, [sp, #28]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	dc19      	bgt.n	800eab4 <_dtoa_r+0x904>
 800ea80:	9b02      	ldr	r3, [sp, #8]
 800ea82:	b9bb      	cbnz	r3, 800eab4 <_dtoa_r+0x904>
 800ea84:	9b03      	ldr	r3, [sp, #12]
 800ea86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea8a:	b99b      	cbnz	r3, 800eab4 <_dtoa_r+0x904>
 800ea8c:	9b03      	ldr	r3, [sp, #12]
 800ea8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea92:	0d1b      	lsrs	r3, r3, #20
 800ea94:	051b      	lsls	r3, r3, #20
 800ea96:	b183      	cbz	r3, 800eaba <_dtoa_r+0x90a>
 800ea98:	9b05      	ldr	r3, [sp, #20]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	9305      	str	r3, [sp, #20]
 800ea9e:	9b06      	ldr	r3, [sp, #24]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	9306      	str	r3, [sp, #24]
 800eaa4:	f04f 0801 	mov.w	r8, #1
 800eaa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f47f af6f 	bne.w	800e98e <_dtoa_r+0x7de>
 800eab0:	2001      	movs	r0, #1
 800eab2:	e774      	b.n	800e99e <_dtoa_r+0x7ee>
 800eab4:	f04f 0800 	mov.w	r8, #0
 800eab8:	e7f6      	b.n	800eaa8 <_dtoa_r+0x8f8>
 800eaba:	4698      	mov	r8, r3
 800eabc:	e7f4      	b.n	800eaa8 <_dtoa_r+0x8f8>
 800eabe:	d082      	beq.n	800e9c6 <_dtoa_r+0x816>
 800eac0:	9a05      	ldr	r2, [sp, #20]
 800eac2:	331c      	adds	r3, #28
 800eac4:	441a      	add	r2, r3
 800eac6:	9205      	str	r2, [sp, #20]
 800eac8:	9a06      	ldr	r2, [sp, #24]
 800eaca:	441a      	add	r2, r3
 800eacc:	441d      	add	r5, r3
 800eace:	9206      	str	r2, [sp, #24]
 800ead0:	e779      	b.n	800e9c6 <_dtoa_r+0x816>
 800ead2:	4603      	mov	r3, r0
 800ead4:	e7f4      	b.n	800eac0 <_dtoa_r+0x910>
 800ead6:	9b04      	ldr	r3, [sp, #16]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	dc37      	bgt.n	800eb4c <_dtoa_r+0x99c>
 800eadc:	9b07      	ldr	r3, [sp, #28]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	dd34      	ble.n	800eb4c <_dtoa_r+0x99c>
 800eae2:	9b04      	ldr	r3, [sp, #16]
 800eae4:	9301      	str	r3, [sp, #4]
 800eae6:	9b01      	ldr	r3, [sp, #4]
 800eae8:	b963      	cbnz	r3, 800eb04 <_dtoa_r+0x954>
 800eaea:	4631      	mov	r1, r6
 800eaec:	2205      	movs	r2, #5
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f000 f9fe 	bl	800eef0 <__multadd>
 800eaf4:	4601      	mov	r1, r0
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	4650      	mov	r0, sl
 800eafa:	f000 fc13 	bl	800f324 <__mcmp>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	f73f adbb 	bgt.w	800e67a <_dtoa_r+0x4ca>
 800eb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb06:	9d00      	ldr	r5, [sp, #0]
 800eb08:	ea6f 0b03 	mvn.w	fp, r3
 800eb0c:	f04f 0800 	mov.w	r8, #0
 800eb10:	4631      	mov	r1, r6
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 f9ca 	bl	800eeac <_Bfree>
 800eb18:	2f00      	cmp	r7, #0
 800eb1a:	f43f aeab 	beq.w	800e874 <_dtoa_r+0x6c4>
 800eb1e:	f1b8 0f00 	cmp.w	r8, #0
 800eb22:	d005      	beq.n	800eb30 <_dtoa_r+0x980>
 800eb24:	45b8      	cmp	r8, r7
 800eb26:	d003      	beq.n	800eb30 <_dtoa_r+0x980>
 800eb28:	4641      	mov	r1, r8
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 f9be 	bl	800eeac <_Bfree>
 800eb30:	4639      	mov	r1, r7
 800eb32:	4620      	mov	r0, r4
 800eb34:	f000 f9ba 	bl	800eeac <_Bfree>
 800eb38:	e69c      	b.n	800e874 <_dtoa_r+0x6c4>
 800eb3a:	2600      	movs	r6, #0
 800eb3c:	4637      	mov	r7, r6
 800eb3e:	e7e1      	b.n	800eb04 <_dtoa_r+0x954>
 800eb40:	46bb      	mov	fp, r7
 800eb42:	4637      	mov	r7, r6
 800eb44:	e599      	b.n	800e67a <_dtoa_r+0x4ca>
 800eb46:	bf00      	nop
 800eb48:	40240000 	.word	0x40240000
 800eb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 80c8 	beq.w	800ece4 <_dtoa_r+0xb34>
 800eb54:	9b04      	ldr	r3, [sp, #16]
 800eb56:	9301      	str	r3, [sp, #4]
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	dd05      	ble.n	800eb68 <_dtoa_r+0x9b8>
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	462a      	mov	r2, r5
 800eb60:	4620      	mov	r0, r4
 800eb62:	f000 fb73 	bl	800f24c <__lshift>
 800eb66:	4607      	mov	r7, r0
 800eb68:	f1b8 0f00 	cmp.w	r8, #0
 800eb6c:	d05b      	beq.n	800ec26 <_dtoa_r+0xa76>
 800eb6e:	6879      	ldr	r1, [r7, #4]
 800eb70:	4620      	mov	r0, r4
 800eb72:	f000 f95b 	bl	800ee2c <_Balloc>
 800eb76:	4605      	mov	r5, r0
 800eb78:	b928      	cbnz	r0, 800eb86 <_dtoa_r+0x9d6>
 800eb7a:	4b83      	ldr	r3, [pc, #524]	; (800ed88 <_dtoa_r+0xbd8>)
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800eb82:	f7ff bb2e 	b.w	800e1e2 <_dtoa_r+0x32>
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	3202      	adds	r2, #2
 800eb8a:	0092      	lsls	r2, r2, #2
 800eb8c:	f107 010c 	add.w	r1, r7, #12
 800eb90:	300c      	adds	r0, #12
 800eb92:	f7ff fa76 	bl	800e082 <memcpy>
 800eb96:	2201      	movs	r2, #1
 800eb98:	4629      	mov	r1, r5
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f000 fb56 	bl	800f24c <__lshift>
 800eba0:	9b00      	ldr	r3, [sp, #0]
 800eba2:	3301      	adds	r3, #1
 800eba4:	9304      	str	r3, [sp, #16]
 800eba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebaa:	4413      	add	r3, r2
 800ebac:	9308      	str	r3, [sp, #32]
 800ebae:	9b02      	ldr	r3, [sp, #8]
 800ebb0:	f003 0301 	and.w	r3, r3, #1
 800ebb4:	46b8      	mov	r8, r7
 800ebb6:	9306      	str	r3, [sp, #24]
 800ebb8:	4607      	mov	r7, r0
 800ebba:	9b04      	ldr	r3, [sp, #16]
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	4650      	mov	r0, sl
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	f7ff fa6b 	bl	800e09e <quorem>
 800ebc8:	4641      	mov	r1, r8
 800ebca:	9002      	str	r0, [sp, #8]
 800ebcc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ebd0:	4650      	mov	r0, sl
 800ebd2:	f000 fba7 	bl	800f324 <__mcmp>
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	9005      	str	r0, [sp, #20]
 800ebda:	4631      	mov	r1, r6
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f000 fbbd 	bl	800f35c <__mdiff>
 800ebe2:	68c2      	ldr	r2, [r0, #12]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	bb02      	cbnz	r2, 800ec2a <_dtoa_r+0xa7a>
 800ebe8:	4601      	mov	r1, r0
 800ebea:	4650      	mov	r0, sl
 800ebec:	f000 fb9a 	bl	800f324 <__mcmp>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	9209      	str	r2, [sp, #36]	; 0x24
 800ebf8:	f000 f958 	bl	800eeac <_Bfree>
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec00:	9d04      	ldr	r5, [sp, #16]
 800ec02:	ea43 0102 	orr.w	r1, r3, r2
 800ec06:	9b06      	ldr	r3, [sp, #24]
 800ec08:	4319      	orrs	r1, r3
 800ec0a:	d110      	bne.n	800ec2e <_dtoa_r+0xa7e>
 800ec0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ec10:	d029      	beq.n	800ec66 <_dtoa_r+0xab6>
 800ec12:	9b05      	ldr	r3, [sp, #20]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	dd02      	ble.n	800ec1e <_dtoa_r+0xa6e>
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ec1e:	9b01      	ldr	r3, [sp, #4]
 800ec20:	f883 9000 	strb.w	r9, [r3]
 800ec24:	e774      	b.n	800eb10 <_dtoa_r+0x960>
 800ec26:	4638      	mov	r0, r7
 800ec28:	e7ba      	b.n	800eba0 <_dtoa_r+0x9f0>
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	e7e1      	b.n	800ebf2 <_dtoa_r+0xa42>
 800ec2e:	9b05      	ldr	r3, [sp, #20]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	db04      	blt.n	800ec3e <_dtoa_r+0xa8e>
 800ec34:	9907      	ldr	r1, [sp, #28]
 800ec36:	430b      	orrs	r3, r1
 800ec38:	9906      	ldr	r1, [sp, #24]
 800ec3a:	430b      	orrs	r3, r1
 800ec3c:	d120      	bne.n	800ec80 <_dtoa_r+0xad0>
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	dded      	ble.n	800ec1e <_dtoa_r+0xa6e>
 800ec42:	4651      	mov	r1, sl
 800ec44:	2201      	movs	r2, #1
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 fb00 	bl	800f24c <__lshift>
 800ec4c:	4631      	mov	r1, r6
 800ec4e:	4682      	mov	sl, r0
 800ec50:	f000 fb68 	bl	800f324 <__mcmp>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	dc03      	bgt.n	800ec60 <_dtoa_r+0xab0>
 800ec58:	d1e1      	bne.n	800ec1e <_dtoa_r+0xa6e>
 800ec5a:	f019 0f01 	tst.w	r9, #1
 800ec5e:	d0de      	beq.n	800ec1e <_dtoa_r+0xa6e>
 800ec60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ec64:	d1d8      	bne.n	800ec18 <_dtoa_r+0xa68>
 800ec66:	9a01      	ldr	r2, [sp, #4]
 800ec68:	2339      	movs	r3, #57	; 0x39
 800ec6a:	7013      	strb	r3, [r2, #0]
 800ec6c:	462b      	mov	r3, r5
 800ec6e:	461d      	mov	r5, r3
 800ec70:	3b01      	subs	r3, #1
 800ec72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec76:	2a39      	cmp	r2, #57	; 0x39
 800ec78:	d06c      	beq.n	800ed54 <_dtoa_r+0xba4>
 800ec7a:	3201      	adds	r2, #1
 800ec7c:	701a      	strb	r2, [r3, #0]
 800ec7e:	e747      	b.n	800eb10 <_dtoa_r+0x960>
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	dd07      	ble.n	800ec94 <_dtoa_r+0xae4>
 800ec84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ec88:	d0ed      	beq.n	800ec66 <_dtoa_r+0xab6>
 800ec8a:	9a01      	ldr	r2, [sp, #4]
 800ec8c:	f109 0301 	add.w	r3, r9, #1
 800ec90:	7013      	strb	r3, [r2, #0]
 800ec92:	e73d      	b.n	800eb10 <_dtoa_r+0x960>
 800ec94:	9b04      	ldr	r3, [sp, #16]
 800ec96:	9a08      	ldr	r2, [sp, #32]
 800ec98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d043      	beq.n	800ed28 <_dtoa_r+0xb78>
 800eca0:	4651      	mov	r1, sl
 800eca2:	2300      	movs	r3, #0
 800eca4:	220a      	movs	r2, #10
 800eca6:	4620      	mov	r0, r4
 800eca8:	f000 f922 	bl	800eef0 <__multadd>
 800ecac:	45b8      	cmp	r8, r7
 800ecae:	4682      	mov	sl, r0
 800ecb0:	f04f 0300 	mov.w	r3, #0
 800ecb4:	f04f 020a 	mov.w	r2, #10
 800ecb8:	4641      	mov	r1, r8
 800ecba:	4620      	mov	r0, r4
 800ecbc:	d107      	bne.n	800ecce <_dtoa_r+0xb1e>
 800ecbe:	f000 f917 	bl	800eef0 <__multadd>
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	9b04      	ldr	r3, [sp, #16]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	9304      	str	r3, [sp, #16]
 800eccc:	e775      	b.n	800ebba <_dtoa_r+0xa0a>
 800ecce:	f000 f90f 	bl	800eef0 <__multadd>
 800ecd2:	4639      	mov	r1, r7
 800ecd4:	4680      	mov	r8, r0
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	220a      	movs	r2, #10
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f000 f908 	bl	800eef0 <__multadd>
 800ece0:	4607      	mov	r7, r0
 800ece2:	e7f0      	b.n	800ecc6 <_dtoa_r+0xb16>
 800ece4:	9b04      	ldr	r3, [sp, #16]
 800ece6:	9301      	str	r3, [sp, #4]
 800ece8:	9d00      	ldr	r5, [sp, #0]
 800ecea:	4631      	mov	r1, r6
 800ecec:	4650      	mov	r0, sl
 800ecee:	f7ff f9d6 	bl	800e09e <quorem>
 800ecf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ecf6:	9b00      	ldr	r3, [sp, #0]
 800ecf8:	f805 9b01 	strb.w	r9, [r5], #1
 800ecfc:	1aea      	subs	r2, r5, r3
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	4293      	cmp	r3, r2
 800ed02:	dd07      	ble.n	800ed14 <_dtoa_r+0xb64>
 800ed04:	4651      	mov	r1, sl
 800ed06:	2300      	movs	r3, #0
 800ed08:	220a      	movs	r2, #10
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 f8f0 	bl	800eef0 <__multadd>
 800ed10:	4682      	mov	sl, r0
 800ed12:	e7ea      	b.n	800ecea <_dtoa_r+0xb3a>
 800ed14:	9b01      	ldr	r3, [sp, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	bfc8      	it	gt
 800ed1a:	461d      	movgt	r5, r3
 800ed1c:	9b00      	ldr	r3, [sp, #0]
 800ed1e:	bfd8      	it	le
 800ed20:	2501      	movle	r5, #1
 800ed22:	441d      	add	r5, r3
 800ed24:	f04f 0800 	mov.w	r8, #0
 800ed28:	4651      	mov	r1, sl
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f000 fa8d 	bl	800f24c <__lshift>
 800ed32:	4631      	mov	r1, r6
 800ed34:	4682      	mov	sl, r0
 800ed36:	f000 faf5 	bl	800f324 <__mcmp>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	dc96      	bgt.n	800ec6c <_dtoa_r+0xabc>
 800ed3e:	d102      	bne.n	800ed46 <_dtoa_r+0xb96>
 800ed40:	f019 0f01 	tst.w	r9, #1
 800ed44:	d192      	bne.n	800ec6c <_dtoa_r+0xabc>
 800ed46:	462b      	mov	r3, r5
 800ed48:	461d      	mov	r5, r3
 800ed4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed4e:	2a30      	cmp	r2, #48	; 0x30
 800ed50:	d0fa      	beq.n	800ed48 <_dtoa_r+0xb98>
 800ed52:	e6dd      	b.n	800eb10 <_dtoa_r+0x960>
 800ed54:	9a00      	ldr	r2, [sp, #0]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d189      	bne.n	800ec6e <_dtoa_r+0xabe>
 800ed5a:	f10b 0b01 	add.w	fp, fp, #1
 800ed5e:	2331      	movs	r3, #49	; 0x31
 800ed60:	e796      	b.n	800ec90 <_dtoa_r+0xae0>
 800ed62:	4b0a      	ldr	r3, [pc, #40]	; (800ed8c <_dtoa_r+0xbdc>)
 800ed64:	f7ff ba99 	b.w	800e29a <_dtoa_r+0xea>
 800ed68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f47f aa6d 	bne.w	800e24a <_dtoa_r+0x9a>
 800ed70:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <_dtoa_r+0xbe0>)
 800ed72:	f7ff ba92 	b.w	800e29a <_dtoa_r+0xea>
 800ed76:	9b01      	ldr	r3, [sp, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	dcb5      	bgt.n	800ece8 <_dtoa_r+0xb38>
 800ed7c:	9b07      	ldr	r3, [sp, #28]
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	f73f aeb1 	bgt.w	800eae6 <_dtoa_r+0x936>
 800ed84:	e7b0      	b.n	800ece8 <_dtoa_r+0xb38>
 800ed86:	bf00      	nop
 800ed88:	0801bd60 	.word	0x0801bd60
 800ed8c:	0801bcc0 	.word	0x0801bcc0
 800ed90:	0801bce4 	.word	0x0801bce4

0800ed94 <_free_r>:
 800ed94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed96:	2900      	cmp	r1, #0
 800ed98:	d044      	beq.n	800ee24 <_free_r+0x90>
 800ed9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed9e:	9001      	str	r0, [sp, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f1a1 0404 	sub.w	r4, r1, #4
 800eda6:	bfb8      	it	lt
 800eda8:	18e4      	addlt	r4, r4, r3
 800edaa:	f7fe fa61 	bl	800d270 <__malloc_lock>
 800edae:	4a1e      	ldr	r2, [pc, #120]	; (800ee28 <_free_r+0x94>)
 800edb0:	9801      	ldr	r0, [sp, #4]
 800edb2:	6813      	ldr	r3, [r2, #0]
 800edb4:	b933      	cbnz	r3, 800edc4 <_free_r+0x30>
 800edb6:	6063      	str	r3, [r4, #4]
 800edb8:	6014      	str	r4, [r2, #0]
 800edba:	b003      	add	sp, #12
 800edbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edc0:	f7fe ba5c 	b.w	800d27c <__malloc_unlock>
 800edc4:	42a3      	cmp	r3, r4
 800edc6:	d908      	bls.n	800edda <_free_r+0x46>
 800edc8:	6825      	ldr	r5, [r4, #0]
 800edca:	1961      	adds	r1, r4, r5
 800edcc:	428b      	cmp	r3, r1
 800edce:	bf01      	itttt	eq
 800edd0:	6819      	ldreq	r1, [r3, #0]
 800edd2:	685b      	ldreq	r3, [r3, #4]
 800edd4:	1949      	addeq	r1, r1, r5
 800edd6:	6021      	streq	r1, [r4, #0]
 800edd8:	e7ed      	b.n	800edb6 <_free_r+0x22>
 800edda:	461a      	mov	r2, r3
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	b10b      	cbz	r3, 800ede4 <_free_r+0x50>
 800ede0:	42a3      	cmp	r3, r4
 800ede2:	d9fa      	bls.n	800edda <_free_r+0x46>
 800ede4:	6811      	ldr	r1, [r2, #0]
 800ede6:	1855      	adds	r5, r2, r1
 800ede8:	42a5      	cmp	r5, r4
 800edea:	d10b      	bne.n	800ee04 <_free_r+0x70>
 800edec:	6824      	ldr	r4, [r4, #0]
 800edee:	4421      	add	r1, r4
 800edf0:	1854      	adds	r4, r2, r1
 800edf2:	42a3      	cmp	r3, r4
 800edf4:	6011      	str	r1, [r2, #0]
 800edf6:	d1e0      	bne.n	800edba <_free_r+0x26>
 800edf8:	681c      	ldr	r4, [r3, #0]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	6053      	str	r3, [r2, #4]
 800edfe:	440c      	add	r4, r1
 800ee00:	6014      	str	r4, [r2, #0]
 800ee02:	e7da      	b.n	800edba <_free_r+0x26>
 800ee04:	d902      	bls.n	800ee0c <_free_r+0x78>
 800ee06:	230c      	movs	r3, #12
 800ee08:	6003      	str	r3, [r0, #0]
 800ee0a:	e7d6      	b.n	800edba <_free_r+0x26>
 800ee0c:	6825      	ldr	r5, [r4, #0]
 800ee0e:	1961      	adds	r1, r4, r5
 800ee10:	428b      	cmp	r3, r1
 800ee12:	bf04      	itt	eq
 800ee14:	6819      	ldreq	r1, [r3, #0]
 800ee16:	685b      	ldreq	r3, [r3, #4]
 800ee18:	6063      	str	r3, [r4, #4]
 800ee1a:	bf04      	itt	eq
 800ee1c:	1949      	addeq	r1, r1, r5
 800ee1e:	6021      	streq	r1, [r4, #0]
 800ee20:	6054      	str	r4, [r2, #4]
 800ee22:	e7ca      	b.n	800edba <_free_r+0x26>
 800ee24:	b003      	add	sp, #12
 800ee26:	bd30      	pop	{r4, r5, pc}
 800ee28:	20003418 	.word	0x20003418

0800ee2c <_Balloc>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	69c6      	ldr	r6, [r0, #28]
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	b976      	cbnz	r6, 800ee54 <_Balloc+0x28>
 800ee36:	2010      	movs	r0, #16
 800ee38:	f7fe f972 	bl	800d120 <malloc>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	61e0      	str	r0, [r4, #28]
 800ee40:	b920      	cbnz	r0, 800ee4c <_Balloc+0x20>
 800ee42:	4b18      	ldr	r3, [pc, #96]	; (800eea4 <_Balloc+0x78>)
 800ee44:	4818      	ldr	r0, [pc, #96]	; (800eea8 <_Balloc+0x7c>)
 800ee46:	216b      	movs	r1, #107	; 0x6b
 800ee48:	f000 fde2 	bl	800fa10 <__assert_func>
 800ee4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee50:	6006      	str	r6, [r0, #0]
 800ee52:	60c6      	str	r6, [r0, #12]
 800ee54:	69e6      	ldr	r6, [r4, #28]
 800ee56:	68f3      	ldr	r3, [r6, #12]
 800ee58:	b183      	cbz	r3, 800ee7c <_Balloc+0x50>
 800ee5a:	69e3      	ldr	r3, [r4, #28]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee62:	b9b8      	cbnz	r0, 800ee94 <_Balloc+0x68>
 800ee64:	2101      	movs	r1, #1
 800ee66:	fa01 f605 	lsl.w	r6, r1, r5
 800ee6a:	1d72      	adds	r2, r6, #5
 800ee6c:	0092      	lsls	r2, r2, #2
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 fdec 	bl	800fa4c <_calloc_r>
 800ee74:	b160      	cbz	r0, 800ee90 <_Balloc+0x64>
 800ee76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee7a:	e00e      	b.n	800ee9a <_Balloc+0x6e>
 800ee7c:	2221      	movs	r2, #33	; 0x21
 800ee7e:	2104      	movs	r1, #4
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 fde3 	bl	800fa4c <_calloc_r>
 800ee86:	69e3      	ldr	r3, [r4, #28]
 800ee88:	60f0      	str	r0, [r6, #12]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1e4      	bne.n	800ee5a <_Balloc+0x2e>
 800ee90:	2000      	movs	r0, #0
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	6802      	ldr	r2, [r0, #0]
 800ee96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eea0:	e7f7      	b.n	800ee92 <_Balloc+0x66>
 800eea2:	bf00      	nop
 800eea4:	0801bcf1 	.word	0x0801bcf1
 800eea8:	0801bd71 	.word	0x0801bd71

0800eeac <_Bfree>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	69c6      	ldr	r6, [r0, #28]
 800eeb0:	4605      	mov	r5, r0
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	b976      	cbnz	r6, 800eed4 <_Bfree+0x28>
 800eeb6:	2010      	movs	r0, #16
 800eeb8:	f7fe f932 	bl	800d120 <malloc>
 800eebc:	4602      	mov	r2, r0
 800eebe:	61e8      	str	r0, [r5, #28]
 800eec0:	b920      	cbnz	r0, 800eecc <_Bfree+0x20>
 800eec2:	4b09      	ldr	r3, [pc, #36]	; (800eee8 <_Bfree+0x3c>)
 800eec4:	4809      	ldr	r0, [pc, #36]	; (800eeec <_Bfree+0x40>)
 800eec6:	218f      	movs	r1, #143	; 0x8f
 800eec8:	f000 fda2 	bl	800fa10 <__assert_func>
 800eecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eed0:	6006      	str	r6, [r0, #0]
 800eed2:	60c6      	str	r6, [r0, #12]
 800eed4:	b13c      	cbz	r4, 800eee6 <_Bfree+0x3a>
 800eed6:	69eb      	ldr	r3, [r5, #28]
 800eed8:	6862      	ldr	r2, [r4, #4]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eee0:	6021      	str	r1, [r4, #0]
 800eee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eee6:	bd70      	pop	{r4, r5, r6, pc}
 800eee8:	0801bcf1 	.word	0x0801bcf1
 800eeec:	0801bd71 	.word	0x0801bd71

0800eef0 <__multadd>:
 800eef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef4:	690d      	ldr	r5, [r1, #16]
 800eef6:	4607      	mov	r7, r0
 800eef8:	460c      	mov	r4, r1
 800eefa:	461e      	mov	r6, r3
 800eefc:	f101 0c14 	add.w	ip, r1, #20
 800ef00:	2000      	movs	r0, #0
 800ef02:	f8dc 3000 	ldr.w	r3, [ip]
 800ef06:	b299      	uxth	r1, r3
 800ef08:	fb02 6101 	mla	r1, r2, r1, r6
 800ef0c:	0c1e      	lsrs	r6, r3, #16
 800ef0e:	0c0b      	lsrs	r3, r1, #16
 800ef10:	fb02 3306 	mla	r3, r2, r6, r3
 800ef14:	b289      	uxth	r1, r1
 800ef16:	3001      	adds	r0, #1
 800ef18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef1c:	4285      	cmp	r5, r0
 800ef1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ef22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef26:	dcec      	bgt.n	800ef02 <__multadd+0x12>
 800ef28:	b30e      	cbz	r6, 800ef6e <__multadd+0x7e>
 800ef2a:	68a3      	ldr	r3, [r4, #8]
 800ef2c:	42ab      	cmp	r3, r5
 800ef2e:	dc19      	bgt.n	800ef64 <__multadd+0x74>
 800ef30:	6861      	ldr	r1, [r4, #4]
 800ef32:	4638      	mov	r0, r7
 800ef34:	3101      	adds	r1, #1
 800ef36:	f7ff ff79 	bl	800ee2c <_Balloc>
 800ef3a:	4680      	mov	r8, r0
 800ef3c:	b928      	cbnz	r0, 800ef4a <__multadd+0x5a>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	4b0c      	ldr	r3, [pc, #48]	; (800ef74 <__multadd+0x84>)
 800ef42:	480d      	ldr	r0, [pc, #52]	; (800ef78 <__multadd+0x88>)
 800ef44:	21ba      	movs	r1, #186	; 0xba
 800ef46:	f000 fd63 	bl	800fa10 <__assert_func>
 800ef4a:	6922      	ldr	r2, [r4, #16]
 800ef4c:	3202      	adds	r2, #2
 800ef4e:	f104 010c 	add.w	r1, r4, #12
 800ef52:	0092      	lsls	r2, r2, #2
 800ef54:	300c      	adds	r0, #12
 800ef56:	f7ff f894 	bl	800e082 <memcpy>
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	f7ff ffa5 	bl	800eeac <_Bfree>
 800ef62:	4644      	mov	r4, r8
 800ef64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef68:	3501      	adds	r5, #1
 800ef6a:	615e      	str	r6, [r3, #20]
 800ef6c:	6125      	str	r5, [r4, #16]
 800ef6e:	4620      	mov	r0, r4
 800ef70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef74:	0801bd60 	.word	0x0801bd60
 800ef78:	0801bd71 	.word	0x0801bd71

0800ef7c <__hi0bits>:
 800ef7c:	0c03      	lsrs	r3, r0, #16
 800ef7e:	041b      	lsls	r3, r3, #16
 800ef80:	b9d3      	cbnz	r3, 800efb8 <__hi0bits+0x3c>
 800ef82:	0400      	lsls	r0, r0, #16
 800ef84:	2310      	movs	r3, #16
 800ef86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef8a:	bf04      	itt	eq
 800ef8c:	0200      	lsleq	r0, r0, #8
 800ef8e:	3308      	addeq	r3, #8
 800ef90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef94:	bf04      	itt	eq
 800ef96:	0100      	lsleq	r0, r0, #4
 800ef98:	3304      	addeq	r3, #4
 800ef9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef9e:	bf04      	itt	eq
 800efa0:	0080      	lsleq	r0, r0, #2
 800efa2:	3302      	addeq	r3, #2
 800efa4:	2800      	cmp	r0, #0
 800efa6:	db05      	blt.n	800efb4 <__hi0bits+0x38>
 800efa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800efac:	f103 0301 	add.w	r3, r3, #1
 800efb0:	bf08      	it	eq
 800efb2:	2320      	moveq	r3, #32
 800efb4:	4618      	mov	r0, r3
 800efb6:	4770      	bx	lr
 800efb8:	2300      	movs	r3, #0
 800efba:	e7e4      	b.n	800ef86 <__hi0bits+0xa>

0800efbc <__lo0bits>:
 800efbc:	6803      	ldr	r3, [r0, #0]
 800efbe:	f013 0207 	ands.w	r2, r3, #7
 800efc2:	d00c      	beq.n	800efde <__lo0bits+0x22>
 800efc4:	07d9      	lsls	r1, r3, #31
 800efc6:	d422      	bmi.n	800f00e <__lo0bits+0x52>
 800efc8:	079a      	lsls	r2, r3, #30
 800efca:	bf49      	itett	mi
 800efcc:	085b      	lsrmi	r3, r3, #1
 800efce:	089b      	lsrpl	r3, r3, #2
 800efd0:	6003      	strmi	r3, [r0, #0]
 800efd2:	2201      	movmi	r2, #1
 800efd4:	bf5c      	itt	pl
 800efd6:	6003      	strpl	r3, [r0, #0]
 800efd8:	2202      	movpl	r2, #2
 800efda:	4610      	mov	r0, r2
 800efdc:	4770      	bx	lr
 800efde:	b299      	uxth	r1, r3
 800efe0:	b909      	cbnz	r1, 800efe6 <__lo0bits+0x2a>
 800efe2:	0c1b      	lsrs	r3, r3, #16
 800efe4:	2210      	movs	r2, #16
 800efe6:	b2d9      	uxtb	r1, r3
 800efe8:	b909      	cbnz	r1, 800efee <__lo0bits+0x32>
 800efea:	3208      	adds	r2, #8
 800efec:	0a1b      	lsrs	r3, r3, #8
 800efee:	0719      	lsls	r1, r3, #28
 800eff0:	bf04      	itt	eq
 800eff2:	091b      	lsreq	r3, r3, #4
 800eff4:	3204      	addeq	r2, #4
 800eff6:	0799      	lsls	r1, r3, #30
 800eff8:	bf04      	itt	eq
 800effa:	089b      	lsreq	r3, r3, #2
 800effc:	3202      	addeq	r2, #2
 800effe:	07d9      	lsls	r1, r3, #31
 800f000:	d403      	bmi.n	800f00a <__lo0bits+0x4e>
 800f002:	085b      	lsrs	r3, r3, #1
 800f004:	f102 0201 	add.w	r2, r2, #1
 800f008:	d003      	beq.n	800f012 <__lo0bits+0x56>
 800f00a:	6003      	str	r3, [r0, #0]
 800f00c:	e7e5      	b.n	800efda <__lo0bits+0x1e>
 800f00e:	2200      	movs	r2, #0
 800f010:	e7e3      	b.n	800efda <__lo0bits+0x1e>
 800f012:	2220      	movs	r2, #32
 800f014:	e7e1      	b.n	800efda <__lo0bits+0x1e>
	...

0800f018 <__i2b>:
 800f018:	b510      	push	{r4, lr}
 800f01a:	460c      	mov	r4, r1
 800f01c:	2101      	movs	r1, #1
 800f01e:	f7ff ff05 	bl	800ee2c <_Balloc>
 800f022:	4602      	mov	r2, r0
 800f024:	b928      	cbnz	r0, 800f032 <__i2b+0x1a>
 800f026:	4b05      	ldr	r3, [pc, #20]	; (800f03c <__i2b+0x24>)
 800f028:	4805      	ldr	r0, [pc, #20]	; (800f040 <__i2b+0x28>)
 800f02a:	f240 1145 	movw	r1, #325	; 0x145
 800f02e:	f000 fcef 	bl	800fa10 <__assert_func>
 800f032:	2301      	movs	r3, #1
 800f034:	6144      	str	r4, [r0, #20]
 800f036:	6103      	str	r3, [r0, #16]
 800f038:	bd10      	pop	{r4, pc}
 800f03a:	bf00      	nop
 800f03c:	0801bd60 	.word	0x0801bd60
 800f040:	0801bd71 	.word	0x0801bd71

0800f044 <__multiply>:
 800f044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	4691      	mov	r9, r2
 800f04a:	690a      	ldr	r2, [r1, #16]
 800f04c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f050:	429a      	cmp	r2, r3
 800f052:	bfb8      	it	lt
 800f054:	460b      	movlt	r3, r1
 800f056:	460c      	mov	r4, r1
 800f058:	bfbc      	itt	lt
 800f05a:	464c      	movlt	r4, r9
 800f05c:	4699      	movlt	r9, r3
 800f05e:	6927      	ldr	r7, [r4, #16]
 800f060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f064:	68a3      	ldr	r3, [r4, #8]
 800f066:	6861      	ldr	r1, [r4, #4]
 800f068:	eb07 060a 	add.w	r6, r7, sl
 800f06c:	42b3      	cmp	r3, r6
 800f06e:	b085      	sub	sp, #20
 800f070:	bfb8      	it	lt
 800f072:	3101      	addlt	r1, #1
 800f074:	f7ff feda 	bl	800ee2c <_Balloc>
 800f078:	b930      	cbnz	r0, 800f088 <__multiply+0x44>
 800f07a:	4602      	mov	r2, r0
 800f07c:	4b44      	ldr	r3, [pc, #272]	; (800f190 <__multiply+0x14c>)
 800f07e:	4845      	ldr	r0, [pc, #276]	; (800f194 <__multiply+0x150>)
 800f080:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f084:	f000 fcc4 	bl	800fa10 <__assert_func>
 800f088:	f100 0514 	add.w	r5, r0, #20
 800f08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f090:	462b      	mov	r3, r5
 800f092:	2200      	movs	r2, #0
 800f094:	4543      	cmp	r3, r8
 800f096:	d321      	bcc.n	800f0dc <__multiply+0x98>
 800f098:	f104 0314 	add.w	r3, r4, #20
 800f09c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f0a0:	f109 0314 	add.w	r3, r9, #20
 800f0a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f0a8:	9202      	str	r2, [sp, #8]
 800f0aa:	1b3a      	subs	r2, r7, r4
 800f0ac:	3a15      	subs	r2, #21
 800f0ae:	f022 0203 	bic.w	r2, r2, #3
 800f0b2:	3204      	adds	r2, #4
 800f0b4:	f104 0115 	add.w	r1, r4, #21
 800f0b8:	428f      	cmp	r7, r1
 800f0ba:	bf38      	it	cc
 800f0bc:	2204      	movcc	r2, #4
 800f0be:	9201      	str	r2, [sp, #4]
 800f0c0:	9a02      	ldr	r2, [sp, #8]
 800f0c2:	9303      	str	r3, [sp, #12]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d80c      	bhi.n	800f0e2 <__multiply+0x9e>
 800f0c8:	2e00      	cmp	r6, #0
 800f0ca:	dd03      	ble.n	800f0d4 <__multiply+0x90>
 800f0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d05b      	beq.n	800f18c <__multiply+0x148>
 800f0d4:	6106      	str	r6, [r0, #16]
 800f0d6:	b005      	add	sp, #20
 800f0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0dc:	f843 2b04 	str.w	r2, [r3], #4
 800f0e0:	e7d8      	b.n	800f094 <__multiply+0x50>
 800f0e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f0e6:	f1ba 0f00 	cmp.w	sl, #0
 800f0ea:	d024      	beq.n	800f136 <__multiply+0xf2>
 800f0ec:	f104 0e14 	add.w	lr, r4, #20
 800f0f0:	46a9      	mov	r9, r5
 800f0f2:	f04f 0c00 	mov.w	ip, #0
 800f0f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f0fa:	f8d9 1000 	ldr.w	r1, [r9]
 800f0fe:	fa1f fb82 	uxth.w	fp, r2
 800f102:	b289      	uxth	r1, r1
 800f104:	fb0a 110b 	mla	r1, sl, fp, r1
 800f108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f10c:	f8d9 2000 	ldr.w	r2, [r9]
 800f110:	4461      	add	r1, ip
 800f112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f116:	fb0a c20b 	mla	r2, sl, fp, ip
 800f11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f11e:	b289      	uxth	r1, r1
 800f120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f124:	4577      	cmp	r7, lr
 800f126:	f849 1b04 	str.w	r1, [r9], #4
 800f12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f12e:	d8e2      	bhi.n	800f0f6 <__multiply+0xb2>
 800f130:	9a01      	ldr	r2, [sp, #4]
 800f132:	f845 c002 	str.w	ip, [r5, r2]
 800f136:	9a03      	ldr	r2, [sp, #12]
 800f138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f13c:	3304      	adds	r3, #4
 800f13e:	f1b9 0f00 	cmp.w	r9, #0
 800f142:	d021      	beq.n	800f188 <__multiply+0x144>
 800f144:	6829      	ldr	r1, [r5, #0]
 800f146:	f104 0c14 	add.w	ip, r4, #20
 800f14a:	46ae      	mov	lr, r5
 800f14c:	f04f 0a00 	mov.w	sl, #0
 800f150:	f8bc b000 	ldrh.w	fp, [ip]
 800f154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f158:	fb09 220b 	mla	r2, r9, fp, r2
 800f15c:	4452      	add	r2, sl
 800f15e:	b289      	uxth	r1, r1
 800f160:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f164:	f84e 1b04 	str.w	r1, [lr], #4
 800f168:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f16c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f170:	f8be 1000 	ldrh.w	r1, [lr]
 800f174:	fb09 110a 	mla	r1, r9, sl, r1
 800f178:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f17c:	4567      	cmp	r7, ip
 800f17e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f182:	d8e5      	bhi.n	800f150 <__multiply+0x10c>
 800f184:	9a01      	ldr	r2, [sp, #4]
 800f186:	50a9      	str	r1, [r5, r2]
 800f188:	3504      	adds	r5, #4
 800f18a:	e799      	b.n	800f0c0 <__multiply+0x7c>
 800f18c:	3e01      	subs	r6, #1
 800f18e:	e79b      	b.n	800f0c8 <__multiply+0x84>
 800f190:	0801bd60 	.word	0x0801bd60
 800f194:	0801bd71 	.word	0x0801bd71

0800f198 <__pow5mult>:
 800f198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f19c:	4615      	mov	r5, r2
 800f19e:	f012 0203 	ands.w	r2, r2, #3
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	460f      	mov	r7, r1
 800f1a6:	d007      	beq.n	800f1b8 <__pow5mult+0x20>
 800f1a8:	4c25      	ldr	r4, [pc, #148]	; (800f240 <__pow5mult+0xa8>)
 800f1aa:	3a01      	subs	r2, #1
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1b2:	f7ff fe9d 	bl	800eef0 <__multadd>
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	10ad      	asrs	r5, r5, #2
 800f1ba:	d03d      	beq.n	800f238 <__pow5mult+0xa0>
 800f1bc:	69f4      	ldr	r4, [r6, #28]
 800f1be:	b97c      	cbnz	r4, 800f1e0 <__pow5mult+0x48>
 800f1c0:	2010      	movs	r0, #16
 800f1c2:	f7fd ffad 	bl	800d120 <malloc>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	61f0      	str	r0, [r6, #28]
 800f1ca:	b928      	cbnz	r0, 800f1d8 <__pow5mult+0x40>
 800f1cc:	4b1d      	ldr	r3, [pc, #116]	; (800f244 <__pow5mult+0xac>)
 800f1ce:	481e      	ldr	r0, [pc, #120]	; (800f248 <__pow5mult+0xb0>)
 800f1d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f1d4:	f000 fc1c 	bl	800fa10 <__assert_func>
 800f1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1dc:	6004      	str	r4, [r0, #0]
 800f1de:	60c4      	str	r4, [r0, #12]
 800f1e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1e8:	b94c      	cbnz	r4, 800f1fe <__pow5mult+0x66>
 800f1ea:	f240 2171 	movw	r1, #625	; 0x271
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f7ff ff12 	bl	800f018 <__i2b>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	f04f 0900 	mov.w	r9, #0
 800f202:	07eb      	lsls	r3, r5, #31
 800f204:	d50a      	bpl.n	800f21c <__pow5mult+0x84>
 800f206:	4639      	mov	r1, r7
 800f208:	4622      	mov	r2, r4
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7ff ff1a 	bl	800f044 <__multiply>
 800f210:	4639      	mov	r1, r7
 800f212:	4680      	mov	r8, r0
 800f214:	4630      	mov	r0, r6
 800f216:	f7ff fe49 	bl	800eeac <_Bfree>
 800f21a:	4647      	mov	r7, r8
 800f21c:	106d      	asrs	r5, r5, #1
 800f21e:	d00b      	beq.n	800f238 <__pow5mult+0xa0>
 800f220:	6820      	ldr	r0, [r4, #0]
 800f222:	b938      	cbnz	r0, 800f234 <__pow5mult+0x9c>
 800f224:	4622      	mov	r2, r4
 800f226:	4621      	mov	r1, r4
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff ff0b 	bl	800f044 <__multiply>
 800f22e:	6020      	str	r0, [r4, #0]
 800f230:	f8c0 9000 	str.w	r9, [r0]
 800f234:	4604      	mov	r4, r0
 800f236:	e7e4      	b.n	800f202 <__pow5mult+0x6a>
 800f238:	4638      	mov	r0, r7
 800f23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23e:	bf00      	nop
 800f240:	0801bec0 	.word	0x0801bec0
 800f244:	0801bcf1 	.word	0x0801bcf1
 800f248:	0801bd71 	.word	0x0801bd71

0800f24c <__lshift>:
 800f24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f250:	460c      	mov	r4, r1
 800f252:	6849      	ldr	r1, [r1, #4]
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	4607      	mov	r7, r0
 800f25e:	4691      	mov	r9, r2
 800f260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f264:	f108 0601 	add.w	r6, r8, #1
 800f268:	42b3      	cmp	r3, r6
 800f26a:	db0b      	blt.n	800f284 <__lshift+0x38>
 800f26c:	4638      	mov	r0, r7
 800f26e:	f7ff fddd 	bl	800ee2c <_Balloc>
 800f272:	4605      	mov	r5, r0
 800f274:	b948      	cbnz	r0, 800f28a <__lshift+0x3e>
 800f276:	4602      	mov	r2, r0
 800f278:	4b28      	ldr	r3, [pc, #160]	; (800f31c <__lshift+0xd0>)
 800f27a:	4829      	ldr	r0, [pc, #164]	; (800f320 <__lshift+0xd4>)
 800f27c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f280:	f000 fbc6 	bl	800fa10 <__assert_func>
 800f284:	3101      	adds	r1, #1
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	e7ee      	b.n	800f268 <__lshift+0x1c>
 800f28a:	2300      	movs	r3, #0
 800f28c:	f100 0114 	add.w	r1, r0, #20
 800f290:	f100 0210 	add.w	r2, r0, #16
 800f294:	4618      	mov	r0, r3
 800f296:	4553      	cmp	r3, sl
 800f298:	db33      	blt.n	800f302 <__lshift+0xb6>
 800f29a:	6920      	ldr	r0, [r4, #16]
 800f29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2a0:	f104 0314 	add.w	r3, r4, #20
 800f2a4:	f019 091f 	ands.w	r9, r9, #31
 800f2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2b0:	d02b      	beq.n	800f30a <__lshift+0xbe>
 800f2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800f2b6:	468a      	mov	sl, r1
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	6818      	ldr	r0, [r3, #0]
 800f2bc:	fa00 f009 	lsl.w	r0, r0, r9
 800f2c0:	4310      	orrs	r0, r2
 800f2c2:	f84a 0b04 	str.w	r0, [sl], #4
 800f2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ca:	459c      	cmp	ip, r3
 800f2cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800f2d0:	d8f3      	bhi.n	800f2ba <__lshift+0x6e>
 800f2d2:	ebac 0304 	sub.w	r3, ip, r4
 800f2d6:	3b15      	subs	r3, #21
 800f2d8:	f023 0303 	bic.w	r3, r3, #3
 800f2dc:	3304      	adds	r3, #4
 800f2de:	f104 0015 	add.w	r0, r4, #21
 800f2e2:	4584      	cmp	ip, r0
 800f2e4:	bf38      	it	cc
 800f2e6:	2304      	movcc	r3, #4
 800f2e8:	50ca      	str	r2, [r1, r3]
 800f2ea:	b10a      	cbz	r2, 800f2f0 <__lshift+0xa4>
 800f2ec:	f108 0602 	add.w	r6, r8, #2
 800f2f0:	3e01      	subs	r6, #1
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	612e      	str	r6, [r5, #16]
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	f7ff fdd8 	bl	800eeac <_Bfree>
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f302:	f842 0f04 	str.w	r0, [r2, #4]!
 800f306:	3301      	adds	r3, #1
 800f308:	e7c5      	b.n	800f296 <__lshift+0x4a>
 800f30a:	3904      	subs	r1, #4
 800f30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f310:	f841 2f04 	str.w	r2, [r1, #4]!
 800f314:	459c      	cmp	ip, r3
 800f316:	d8f9      	bhi.n	800f30c <__lshift+0xc0>
 800f318:	e7ea      	b.n	800f2f0 <__lshift+0xa4>
 800f31a:	bf00      	nop
 800f31c:	0801bd60 	.word	0x0801bd60
 800f320:	0801bd71 	.word	0x0801bd71

0800f324 <__mcmp>:
 800f324:	b530      	push	{r4, r5, lr}
 800f326:	6902      	ldr	r2, [r0, #16]
 800f328:	690c      	ldr	r4, [r1, #16]
 800f32a:	1b12      	subs	r2, r2, r4
 800f32c:	d10e      	bne.n	800f34c <__mcmp+0x28>
 800f32e:	f100 0314 	add.w	r3, r0, #20
 800f332:	3114      	adds	r1, #20
 800f334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f33c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f344:	42a5      	cmp	r5, r4
 800f346:	d003      	beq.n	800f350 <__mcmp+0x2c>
 800f348:	d305      	bcc.n	800f356 <__mcmp+0x32>
 800f34a:	2201      	movs	r2, #1
 800f34c:	4610      	mov	r0, r2
 800f34e:	bd30      	pop	{r4, r5, pc}
 800f350:	4283      	cmp	r3, r0
 800f352:	d3f3      	bcc.n	800f33c <__mcmp+0x18>
 800f354:	e7fa      	b.n	800f34c <__mcmp+0x28>
 800f356:	f04f 32ff 	mov.w	r2, #4294967295
 800f35a:	e7f7      	b.n	800f34c <__mcmp+0x28>

0800f35c <__mdiff>:
 800f35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f360:	460c      	mov	r4, r1
 800f362:	4606      	mov	r6, r0
 800f364:	4611      	mov	r1, r2
 800f366:	4620      	mov	r0, r4
 800f368:	4690      	mov	r8, r2
 800f36a:	f7ff ffdb 	bl	800f324 <__mcmp>
 800f36e:	1e05      	subs	r5, r0, #0
 800f370:	d110      	bne.n	800f394 <__mdiff+0x38>
 800f372:	4629      	mov	r1, r5
 800f374:	4630      	mov	r0, r6
 800f376:	f7ff fd59 	bl	800ee2c <_Balloc>
 800f37a:	b930      	cbnz	r0, 800f38a <__mdiff+0x2e>
 800f37c:	4b3a      	ldr	r3, [pc, #232]	; (800f468 <__mdiff+0x10c>)
 800f37e:	4602      	mov	r2, r0
 800f380:	f240 2137 	movw	r1, #567	; 0x237
 800f384:	4839      	ldr	r0, [pc, #228]	; (800f46c <__mdiff+0x110>)
 800f386:	f000 fb43 	bl	800fa10 <__assert_func>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f394:	bfa4      	itt	ge
 800f396:	4643      	movge	r3, r8
 800f398:	46a0      	movge	r8, r4
 800f39a:	4630      	mov	r0, r6
 800f39c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3a0:	bfa6      	itte	ge
 800f3a2:	461c      	movge	r4, r3
 800f3a4:	2500      	movge	r5, #0
 800f3a6:	2501      	movlt	r5, #1
 800f3a8:	f7ff fd40 	bl	800ee2c <_Balloc>
 800f3ac:	b920      	cbnz	r0, 800f3b8 <__mdiff+0x5c>
 800f3ae:	4b2e      	ldr	r3, [pc, #184]	; (800f468 <__mdiff+0x10c>)
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	f240 2145 	movw	r1, #581	; 0x245
 800f3b6:	e7e5      	b.n	800f384 <__mdiff+0x28>
 800f3b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f3bc:	6926      	ldr	r6, [r4, #16]
 800f3be:	60c5      	str	r5, [r0, #12]
 800f3c0:	f104 0914 	add.w	r9, r4, #20
 800f3c4:	f108 0514 	add.w	r5, r8, #20
 800f3c8:	f100 0e14 	add.w	lr, r0, #20
 800f3cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f3d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f3d4:	f108 0210 	add.w	r2, r8, #16
 800f3d8:	46f2      	mov	sl, lr
 800f3da:	2100      	movs	r1, #0
 800f3dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f3e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f3e4:	fa11 f88b 	uxtah	r8, r1, fp
 800f3e8:	b299      	uxth	r1, r3
 800f3ea:	0c1b      	lsrs	r3, r3, #16
 800f3ec:	eba8 0801 	sub.w	r8, r8, r1
 800f3f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f3f8:	fa1f f888 	uxth.w	r8, r8
 800f3fc:	1419      	asrs	r1, r3, #16
 800f3fe:	454e      	cmp	r6, r9
 800f400:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f404:	f84a 3b04 	str.w	r3, [sl], #4
 800f408:	d8e8      	bhi.n	800f3dc <__mdiff+0x80>
 800f40a:	1b33      	subs	r3, r6, r4
 800f40c:	3b15      	subs	r3, #21
 800f40e:	f023 0303 	bic.w	r3, r3, #3
 800f412:	3304      	adds	r3, #4
 800f414:	3415      	adds	r4, #21
 800f416:	42a6      	cmp	r6, r4
 800f418:	bf38      	it	cc
 800f41a:	2304      	movcc	r3, #4
 800f41c:	441d      	add	r5, r3
 800f41e:	4473      	add	r3, lr
 800f420:	469e      	mov	lr, r3
 800f422:	462e      	mov	r6, r5
 800f424:	4566      	cmp	r6, ip
 800f426:	d30e      	bcc.n	800f446 <__mdiff+0xea>
 800f428:	f10c 0203 	add.w	r2, ip, #3
 800f42c:	1b52      	subs	r2, r2, r5
 800f42e:	f022 0203 	bic.w	r2, r2, #3
 800f432:	3d03      	subs	r5, #3
 800f434:	45ac      	cmp	ip, r5
 800f436:	bf38      	it	cc
 800f438:	2200      	movcc	r2, #0
 800f43a:	4413      	add	r3, r2
 800f43c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f440:	b17a      	cbz	r2, 800f462 <__mdiff+0x106>
 800f442:	6107      	str	r7, [r0, #16]
 800f444:	e7a4      	b.n	800f390 <__mdiff+0x34>
 800f446:	f856 8b04 	ldr.w	r8, [r6], #4
 800f44a:	fa11 f288 	uxtah	r2, r1, r8
 800f44e:	1414      	asrs	r4, r2, #16
 800f450:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f454:	b292      	uxth	r2, r2
 800f456:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f45a:	f84e 2b04 	str.w	r2, [lr], #4
 800f45e:	1421      	asrs	r1, r4, #16
 800f460:	e7e0      	b.n	800f424 <__mdiff+0xc8>
 800f462:	3f01      	subs	r7, #1
 800f464:	e7ea      	b.n	800f43c <__mdiff+0xe0>
 800f466:	bf00      	nop
 800f468:	0801bd60 	.word	0x0801bd60
 800f46c:	0801bd71 	.word	0x0801bd71

0800f470 <__d2b>:
 800f470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f474:	460f      	mov	r7, r1
 800f476:	2101      	movs	r1, #1
 800f478:	ec59 8b10 	vmov	r8, r9, d0
 800f47c:	4616      	mov	r6, r2
 800f47e:	f7ff fcd5 	bl	800ee2c <_Balloc>
 800f482:	4604      	mov	r4, r0
 800f484:	b930      	cbnz	r0, 800f494 <__d2b+0x24>
 800f486:	4602      	mov	r2, r0
 800f488:	4b24      	ldr	r3, [pc, #144]	; (800f51c <__d2b+0xac>)
 800f48a:	4825      	ldr	r0, [pc, #148]	; (800f520 <__d2b+0xb0>)
 800f48c:	f240 310f 	movw	r1, #783	; 0x30f
 800f490:	f000 fabe 	bl	800fa10 <__assert_func>
 800f494:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f49c:	bb2d      	cbnz	r5, 800f4ea <__d2b+0x7a>
 800f49e:	9301      	str	r3, [sp, #4]
 800f4a0:	f1b8 0300 	subs.w	r3, r8, #0
 800f4a4:	d026      	beq.n	800f4f4 <__d2b+0x84>
 800f4a6:	4668      	mov	r0, sp
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	f7ff fd87 	bl	800efbc <__lo0bits>
 800f4ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4b2:	b1e8      	cbz	r0, 800f4f0 <__d2b+0x80>
 800f4b4:	f1c0 0320 	rsb	r3, r0, #32
 800f4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4bc:	430b      	orrs	r3, r1
 800f4be:	40c2      	lsrs	r2, r0
 800f4c0:	6163      	str	r3, [r4, #20]
 800f4c2:	9201      	str	r2, [sp, #4]
 800f4c4:	9b01      	ldr	r3, [sp, #4]
 800f4c6:	61a3      	str	r3, [r4, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	bf14      	ite	ne
 800f4cc:	2202      	movne	r2, #2
 800f4ce:	2201      	moveq	r2, #1
 800f4d0:	6122      	str	r2, [r4, #16]
 800f4d2:	b1bd      	cbz	r5, 800f504 <__d2b+0x94>
 800f4d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f4d8:	4405      	add	r5, r0
 800f4da:	603d      	str	r5, [r7, #0]
 800f4dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f4e0:	6030      	str	r0, [r6, #0]
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4ee:	e7d6      	b.n	800f49e <__d2b+0x2e>
 800f4f0:	6161      	str	r1, [r4, #20]
 800f4f2:	e7e7      	b.n	800f4c4 <__d2b+0x54>
 800f4f4:	a801      	add	r0, sp, #4
 800f4f6:	f7ff fd61 	bl	800efbc <__lo0bits>
 800f4fa:	9b01      	ldr	r3, [sp, #4]
 800f4fc:	6163      	str	r3, [r4, #20]
 800f4fe:	3020      	adds	r0, #32
 800f500:	2201      	movs	r2, #1
 800f502:	e7e5      	b.n	800f4d0 <__d2b+0x60>
 800f504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f50c:	6038      	str	r0, [r7, #0]
 800f50e:	6918      	ldr	r0, [r3, #16]
 800f510:	f7ff fd34 	bl	800ef7c <__hi0bits>
 800f514:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f518:	e7e2      	b.n	800f4e0 <__d2b+0x70>
 800f51a:	bf00      	nop
 800f51c:	0801bd60 	.word	0x0801bd60
 800f520:	0801bd71 	.word	0x0801bd71

0800f524 <__sfputc_r>:
 800f524:	6893      	ldr	r3, [r2, #8]
 800f526:	3b01      	subs	r3, #1
 800f528:	2b00      	cmp	r3, #0
 800f52a:	b410      	push	{r4}
 800f52c:	6093      	str	r3, [r2, #8]
 800f52e:	da08      	bge.n	800f542 <__sfputc_r+0x1e>
 800f530:	6994      	ldr	r4, [r2, #24]
 800f532:	42a3      	cmp	r3, r4
 800f534:	db01      	blt.n	800f53a <__sfputc_r+0x16>
 800f536:	290a      	cmp	r1, #10
 800f538:	d103      	bne.n	800f542 <__sfputc_r+0x1e>
 800f53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f53e:	f7fe bc7c 	b.w	800de3a <__swbuf_r>
 800f542:	6813      	ldr	r3, [r2, #0]
 800f544:	1c58      	adds	r0, r3, #1
 800f546:	6010      	str	r0, [r2, #0]
 800f548:	7019      	strb	r1, [r3, #0]
 800f54a:	4608      	mov	r0, r1
 800f54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <__sfputs_r>:
 800f552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f554:	4606      	mov	r6, r0
 800f556:	460f      	mov	r7, r1
 800f558:	4614      	mov	r4, r2
 800f55a:	18d5      	adds	r5, r2, r3
 800f55c:	42ac      	cmp	r4, r5
 800f55e:	d101      	bne.n	800f564 <__sfputs_r+0x12>
 800f560:	2000      	movs	r0, #0
 800f562:	e007      	b.n	800f574 <__sfputs_r+0x22>
 800f564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f568:	463a      	mov	r2, r7
 800f56a:	4630      	mov	r0, r6
 800f56c:	f7ff ffda 	bl	800f524 <__sfputc_r>
 800f570:	1c43      	adds	r3, r0, #1
 800f572:	d1f3      	bne.n	800f55c <__sfputs_r+0xa>
 800f574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f578 <_vfiprintf_r>:
 800f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57c:	460d      	mov	r5, r1
 800f57e:	b09d      	sub	sp, #116	; 0x74
 800f580:	4614      	mov	r4, r2
 800f582:	4698      	mov	r8, r3
 800f584:	4606      	mov	r6, r0
 800f586:	b118      	cbz	r0, 800f590 <_vfiprintf_r+0x18>
 800f588:	6a03      	ldr	r3, [r0, #32]
 800f58a:	b90b      	cbnz	r3, 800f590 <_vfiprintf_r+0x18>
 800f58c:	f7fe fb6e 	bl	800dc6c <__sinit>
 800f590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f592:	07d9      	lsls	r1, r3, #31
 800f594:	d405      	bmi.n	800f5a2 <_vfiprintf_r+0x2a>
 800f596:	89ab      	ldrh	r3, [r5, #12]
 800f598:	059a      	lsls	r2, r3, #22
 800f59a:	d402      	bmi.n	800f5a2 <_vfiprintf_r+0x2a>
 800f59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f59e:	f7fe fd6e 	bl	800e07e <__retarget_lock_acquire_recursive>
 800f5a2:	89ab      	ldrh	r3, [r5, #12]
 800f5a4:	071b      	lsls	r3, r3, #28
 800f5a6:	d501      	bpl.n	800f5ac <_vfiprintf_r+0x34>
 800f5a8:	692b      	ldr	r3, [r5, #16]
 800f5aa:	b99b      	cbnz	r3, 800f5d4 <_vfiprintf_r+0x5c>
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f7fe fc80 	bl	800deb4 <__swsetup_r>
 800f5b4:	b170      	cbz	r0, 800f5d4 <_vfiprintf_r+0x5c>
 800f5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5b8:	07dc      	lsls	r4, r3, #31
 800f5ba:	d504      	bpl.n	800f5c6 <_vfiprintf_r+0x4e>
 800f5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c0:	b01d      	add	sp, #116	; 0x74
 800f5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c6:	89ab      	ldrh	r3, [r5, #12]
 800f5c8:	0598      	lsls	r0, r3, #22
 800f5ca:	d4f7      	bmi.n	800f5bc <_vfiprintf_r+0x44>
 800f5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5ce:	f7fe fd57 	bl	800e080 <__retarget_lock_release_recursive>
 800f5d2:	e7f3      	b.n	800f5bc <_vfiprintf_r+0x44>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d8:	2320      	movs	r3, #32
 800f5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5e2:	2330      	movs	r3, #48	; 0x30
 800f5e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f798 <_vfiprintf_r+0x220>
 800f5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ec:	f04f 0901 	mov.w	r9, #1
 800f5f0:	4623      	mov	r3, r4
 800f5f2:	469a      	mov	sl, r3
 800f5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5f8:	b10a      	cbz	r2, 800f5fe <_vfiprintf_r+0x86>
 800f5fa:	2a25      	cmp	r2, #37	; 0x25
 800f5fc:	d1f9      	bne.n	800f5f2 <_vfiprintf_r+0x7a>
 800f5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f602:	d00b      	beq.n	800f61c <_vfiprintf_r+0xa4>
 800f604:	465b      	mov	r3, fp
 800f606:	4622      	mov	r2, r4
 800f608:	4629      	mov	r1, r5
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7ff ffa1 	bl	800f552 <__sfputs_r>
 800f610:	3001      	adds	r0, #1
 800f612:	f000 80a9 	beq.w	800f768 <_vfiprintf_r+0x1f0>
 800f616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f618:	445a      	add	r2, fp
 800f61a:	9209      	str	r2, [sp, #36]	; 0x24
 800f61c:	f89a 3000 	ldrb.w	r3, [sl]
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 80a1 	beq.w	800f768 <_vfiprintf_r+0x1f0>
 800f626:	2300      	movs	r3, #0
 800f628:	f04f 32ff 	mov.w	r2, #4294967295
 800f62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f630:	f10a 0a01 	add.w	sl, sl, #1
 800f634:	9304      	str	r3, [sp, #16]
 800f636:	9307      	str	r3, [sp, #28]
 800f638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f63c:	931a      	str	r3, [sp, #104]	; 0x68
 800f63e:	4654      	mov	r4, sl
 800f640:	2205      	movs	r2, #5
 800f642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f646:	4854      	ldr	r0, [pc, #336]	; (800f798 <_vfiprintf_r+0x220>)
 800f648:	f7f0 fdc2 	bl	80001d0 <memchr>
 800f64c:	9a04      	ldr	r2, [sp, #16]
 800f64e:	b9d8      	cbnz	r0, 800f688 <_vfiprintf_r+0x110>
 800f650:	06d1      	lsls	r1, r2, #27
 800f652:	bf44      	itt	mi
 800f654:	2320      	movmi	r3, #32
 800f656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f65a:	0713      	lsls	r3, r2, #28
 800f65c:	bf44      	itt	mi
 800f65e:	232b      	movmi	r3, #43	; 0x2b
 800f660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f664:	f89a 3000 	ldrb.w	r3, [sl]
 800f668:	2b2a      	cmp	r3, #42	; 0x2a
 800f66a:	d015      	beq.n	800f698 <_vfiprintf_r+0x120>
 800f66c:	9a07      	ldr	r2, [sp, #28]
 800f66e:	4654      	mov	r4, sl
 800f670:	2000      	movs	r0, #0
 800f672:	f04f 0c0a 	mov.w	ip, #10
 800f676:	4621      	mov	r1, r4
 800f678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f67c:	3b30      	subs	r3, #48	; 0x30
 800f67e:	2b09      	cmp	r3, #9
 800f680:	d94d      	bls.n	800f71e <_vfiprintf_r+0x1a6>
 800f682:	b1b0      	cbz	r0, 800f6b2 <_vfiprintf_r+0x13a>
 800f684:	9207      	str	r2, [sp, #28]
 800f686:	e014      	b.n	800f6b2 <_vfiprintf_r+0x13a>
 800f688:	eba0 0308 	sub.w	r3, r0, r8
 800f68c:	fa09 f303 	lsl.w	r3, r9, r3
 800f690:	4313      	orrs	r3, r2
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	46a2      	mov	sl, r4
 800f696:	e7d2      	b.n	800f63e <_vfiprintf_r+0xc6>
 800f698:	9b03      	ldr	r3, [sp, #12]
 800f69a:	1d19      	adds	r1, r3, #4
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	9103      	str	r1, [sp, #12]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bfbb      	ittet	lt
 800f6a4:	425b      	neglt	r3, r3
 800f6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f6aa:	9307      	strge	r3, [sp, #28]
 800f6ac:	9307      	strlt	r3, [sp, #28]
 800f6ae:	bfb8      	it	lt
 800f6b0:	9204      	strlt	r2, [sp, #16]
 800f6b2:	7823      	ldrb	r3, [r4, #0]
 800f6b4:	2b2e      	cmp	r3, #46	; 0x2e
 800f6b6:	d10c      	bne.n	800f6d2 <_vfiprintf_r+0x15a>
 800f6b8:	7863      	ldrb	r3, [r4, #1]
 800f6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f6bc:	d134      	bne.n	800f728 <_vfiprintf_r+0x1b0>
 800f6be:	9b03      	ldr	r3, [sp, #12]
 800f6c0:	1d1a      	adds	r2, r3, #4
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	9203      	str	r2, [sp, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	bfb8      	it	lt
 800f6ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6ce:	3402      	adds	r4, #2
 800f6d0:	9305      	str	r3, [sp, #20]
 800f6d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f7a8 <_vfiprintf_r+0x230>
 800f6d6:	7821      	ldrb	r1, [r4, #0]
 800f6d8:	2203      	movs	r2, #3
 800f6da:	4650      	mov	r0, sl
 800f6dc:	f7f0 fd78 	bl	80001d0 <memchr>
 800f6e0:	b138      	cbz	r0, 800f6f2 <_vfiprintf_r+0x17a>
 800f6e2:	9b04      	ldr	r3, [sp, #16]
 800f6e4:	eba0 000a 	sub.w	r0, r0, sl
 800f6e8:	2240      	movs	r2, #64	; 0x40
 800f6ea:	4082      	lsls	r2, r0
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	3401      	adds	r4, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f6:	4829      	ldr	r0, [pc, #164]	; (800f79c <_vfiprintf_r+0x224>)
 800f6f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6fc:	2206      	movs	r2, #6
 800f6fe:	f7f0 fd67 	bl	80001d0 <memchr>
 800f702:	2800      	cmp	r0, #0
 800f704:	d03f      	beq.n	800f786 <_vfiprintf_r+0x20e>
 800f706:	4b26      	ldr	r3, [pc, #152]	; (800f7a0 <_vfiprintf_r+0x228>)
 800f708:	bb1b      	cbnz	r3, 800f752 <_vfiprintf_r+0x1da>
 800f70a:	9b03      	ldr	r3, [sp, #12]
 800f70c:	3307      	adds	r3, #7
 800f70e:	f023 0307 	bic.w	r3, r3, #7
 800f712:	3308      	adds	r3, #8
 800f714:	9303      	str	r3, [sp, #12]
 800f716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f718:	443b      	add	r3, r7
 800f71a:	9309      	str	r3, [sp, #36]	; 0x24
 800f71c:	e768      	b.n	800f5f0 <_vfiprintf_r+0x78>
 800f71e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f722:	460c      	mov	r4, r1
 800f724:	2001      	movs	r0, #1
 800f726:	e7a6      	b.n	800f676 <_vfiprintf_r+0xfe>
 800f728:	2300      	movs	r3, #0
 800f72a:	3401      	adds	r4, #1
 800f72c:	9305      	str	r3, [sp, #20]
 800f72e:	4619      	mov	r1, r3
 800f730:	f04f 0c0a 	mov.w	ip, #10
 800f734:	4620      	mov	r0, r4
 800f736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f73a:	3a30      	subs	r2, #48	; 0x30
 800f73c:	2a09      	cmp	r2, #9
 800f73e:	d903      	bls.n	800f748 <_vfiprintf_r+0x1d0>
 800f740:	2b00      	cmp	r3, #0
 800f742:	d0c6      	beq.n	800f6d2 <_vfiprintf_r+0x15a>
 800f744:	9105      	str	r1, [sp, #20]
 800f746:	e7c4      	b.n	800f6d2 <_vfiprintf_r+0x15a>
 800f748:	fb0c 2101 	mla	r1, ip, r1, r2
 800f74c:	4604      	mov	r4, r0
 800f74e:	2301      	movs	r3, #1
 800f750:	e7f0      	b.n	800f734 <_vfiprintf_r+0x1bc>
 800f752:	ab03      	add	r3, sp, #12
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	462a      	mov	r2, r5
 800f758:	4b12      	ldr	r3, [pc, #72]	; (800f7a4 <_vfiprintf_r+0x22c>)
 800f75a:	a904      	add	r1, sp, #16
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7fd fe33 	bl	800d3c8 <_printf_float>
 800f762:	4607      	mov	r7, r0
 800f764:	1c78      	adds	r0, r7, #1
 800f766:	d1d6      	bne.n	800f716 <_vfiprintf_r+0x19e>
 800f768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f76a:	07d9      	lsls	r1, r3, #31
 800f76c:	d405      	bmi.n	800f77a <_vfiprintf_r+0x202>
 800f76e:	89ab      	ldrh	r3, [r5, #12]
 800f770:	059a      	lsls	r2, r3, #22
 800f772:	d402      	bmi.n	800f77a <_vfiprintf_r+0x202>
 800f774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f776:	f7fe fc83 	bl	800e080 <__retarget_lock_release_recursive>
 800f77a:	89ab      	ldrh	r3, [r5, #12]
 800f77c:	065b      	lsls	r3, r3, #25
 800f77e:	f53f af1d 	bmi.w	800f5bc <_vfiprintf_r+0x44>
 800f782:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f784:	e71c      	b.n	800f5c0 <_vfiprintf_r+0x48>
 800f786:	ab03      	add	r3, sp, #12
 800f788:	9300      	str	r3, [sp, #0]
 800f78a:	462a      	mov	r2, r5
 800f78c:	4b05      	ldr	r3, [pc, #20]	; (800f7a4 <_vfiprintf_r+0x22c>)
 800f78e:	a904      	add	r1, sp, #16
 800f790:	4630      	mov	r0, r6
 800f792:	f7fe f8bd 	bl	800d910 <_printf_i>
 800f796:	e7e4      	b.n	800f762 <_vfiprintf_r+0x1ea>
 800f798:	0801becc 	.word	0x0801becc
 800f79c:	0801bed6 	.word	0x0801bed6
 800f7a0:	0800d3c9 	.word	0x0800d3c9
 800f7a4:	0800f553 	.word	0x0800f553
 800f7a8:	0801bed2 	.word	0x0801bed2

0800f7ac <__sflush_r>:
 800f7ac:	898a      	ldrh	r2, [r1, #12]
 800f7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	0710      	lsls	r0, r2, #28
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	d458      	bmi.n	800f86c <__sflush_r+0xc0>
 800f7ba:	684b      	ldr	r3, [r1, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	dc05      	bgt.n	800f7cc <__sflush_r+0x20>
 800f7c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	dc02      	bgt.n	800f7cc <__sflush_r+0x20>
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7ce:	2e00      	cmp	r6, #0
 800f7d0:	d0f9      	beq.n	800f7c6 <__sflush_r+0x1a>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7d8:	682f      	ldr	r7, [r5, #0]
 800f7da:	6a21      	ldr	r1, [r4, #32]
 800f7dc:	602b      	str	r3, [r5, #0]
 800f7de:	d032      	beq.n	800f846 <__sflush_r+0x9a>
 800f7e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	075a      	lsls	r2, r3, #29
 800f7e6:	d505      	bpl.n	800f7f4 <__sflush_r+0x48>
 800f7e8:	6863      	ldr	r3, [r4, #4]
 800f7ea:	1ac0      	subs	r0, r0, r3
 800f7ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7ee:	b10b      	cbz	r3, 800f7f4 <__sflush_r+0x48>
 800f7f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7f2:	1ac0      	subs	r0, r0, r3
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7fa:	6a21      	ldr	r1, [r4, #32]
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b0      	blx	r6
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	d106      	bne.n	800f814 <__sflush_r+0x68>
 800f806:	6829      	ldr	r1, [r5, #0]
 800f808:	291d      	cmp	r1, #29
 800f80a:	d82b      	bhi.n	800f864 <__sflush_r+0xb8>
 800f80c:	4a29      	ldr	r2, [pc, #164]	; (800f8b4 <__sflush_r+0x108>)
 800f80e:	410a      	asrs	r2, r1
 800f810:	07d6      	lsls	r6, r2, #31
 800f812:	d427      	bmi.n	800f864 <__sflush_r+0xb8>
 800f814:	2200      	movs	r2, #0
 800f816:	6062      	str	r2, [r4, #4]
 800f818:	04d9      	lsls	r1, r3, #19
 800f81a:	6922      	ldr	r2, [r4, #16]
 800f81c:	6022      	str	r2, [r4, #0]
 800f81e:	d504      	bpl.n	800f82a <__sflush_r+0x7e>
 800f820:	1c42      	adds	r2, r0, #1
 800f822:	d101      	bne.n	800f828 <__sflush_r+0x7c>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	b903      	cbnz	r3, 800f82a <__sflush_r+0x7e>
 800f828:	6560      	str	r0, [r4, #84]	; 0x54
 800f82a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f82c:	602f      	str	r7, [r5, #0]
 800f82e:	2900      	cmp	r1, #0
 800f830:	d0c9      	beq.n	800f7c6 <__sflush_r+0x1a>
 800f832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f836:	4299      	cmp	r1, r3
 800f838:	d002      	beq.n	800f840 <__sflush_r+0x94>
 800f83a:	4628      	mov	r0, r5
 800f83c:	f7ff faaa 	bl	800ed94 <_free_r>
 800f840:	2000      	movs	r0, #0
 800f842:	6360      	str	r0, [r4, #52]	; 0x34
 800f844:	e7c0      	b.n	800f7c8 <__sflush_r+0x1c>
 800f846:	2301      	movs	r3, #1
 800f848:	4628      	mov	r0, r5
 800f84a:	47b0      	blx	r6
 800f84c:	1c41      	adds	r1, r0, #1
 800f84e:	d1c8      	bne.n	800f7e2 <__sflush_r+0x36>
 800f850:	682b      	ldr	r3, [r5, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d0c5      	beq.n	800f7e2 <__sflush_r+0x36>
 800f856:	2b1d      	cmp	r3, #29
 800f858:	d001      	beq.n	800f85e <__sflush_r+0xb2>
 800f85a:	2b16      	cmp	r3, #22
 800f85c:	d101      	bne.n	800f862 <__sflush_r+0xb6>
 800f85e:	602f      	str	r7, [r5, #0]
 800f860:	e7b1      	b.n	800f7c6 <__sflush_r+0x1a>
 800f862:	89a3      	ldrh	r3, [r4, #12]
 800f864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f868:	81a3      	strh	r3, [r4, #12]
 800f86a:	e7ad      	b.n	800f7c8 <__sflush_r+0x1c>
 800f86c:	690f      	ldr	r7, [r1, #16]
 800f86e:	2f00      	cmp	r7, #0
 800f870:	d0a9      	beq.n	800f7c6 <__sflush_r+0x1a>
 800f872:	0793      	lsls	r3, r2, #30
 800f874:	680e      	ldr	r6, [r1, #0]
 800f876:	bf08      	it	eq
 800f878:	694b      	ldreq	r3, [r1, #20]
 800f87a:	600f      	str	r7, [r1, #0]
 800f87c:	bf18      	it	ne
 800f87e:	2300      	movne	r3, #0
 800f880:	eba6 0807 	sub.w	r8, r6, r7
 800f884:	608b      	str	r3, [r1, #8]
 800f886:	f1b8 0f00 	cmp.w	r8, #0
 800f88a:	dd9c      	ble.n	800f7c6 <__sflush_r+0x1a>
 800f88c:	6a21      	ldr	r1, [r4, #32]
 800f88e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f890:	4643      	mov	r3, r8
 800f892:	463a      	mov	r2, r7
 800f894:	4628      	mov	r0, r5
 800f896:	47b0      	blx	r6
 800f898:	2800      	cmp	r0, #0
 800f89a:	dc06      	bgt.n	800f8aa <__sflush_r+0xfe>
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a2:	81a3      	strh	r3, [r4, #12]
 800f8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a8:	e78e      	b.n	800f7c8 <__sflush_r+0x1c>
 800f8aa:	4407      	add	r7, r0
 800f8ac:	eba8 0800 	sub.w	r8, r8, r0
 800f8b0:	e7e9      	b.n	800f886 <__sflush_r+0xda>
 800f8b2:	bf00      	nop
 800f8b4:	dfbffffe 	.word	0xdfbffffe

0800f8b8 <_fflush_r>:
 800f8b8:	b538      	push	{r3, r4, r5, lr}
 800f8ba:	690b      	ldr	r3, [r1, #16]
 800f8bc:	4605      	mov	r5, r0
 800f8be:	460c      	mov	r4, r1
 800f8c0:	b913      	cbnz	r3, 800f8c8 <_fflush_r+0x10>
 800f8c2:	2500      	movs	r5, #0
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	b118      	cbz	r0, 800f8d2 <_fflush_r+0x1a>
 800f8ca:	6a03      	ldr	r3, [r0, #32]
 800f8cc:	b90b      	cbnz	r3, 800f8d2 <_fflush_r+0x1a>
 800f8ce:	f7fe f9cd 	bl	800dc6c <__sinit>
 800f8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d0f3      	beq.n	800f8c2 <_fflush_r+0xa>
 800f8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8dc:	07d0      	lsls	r0, r2, #31
 800f8de:	d404      	bmi.n	800f8ea <_fflush_r+0x32>
 800f8e0:	0599      	lsls	r1, r3, #22
 800f8e2:	d402      	bmi.n	800f8ea <_fflush_r+0x32>
 800f8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8e6:	f7fe fbca 	bl	800e07e <__retarget_lock_acquire_recursive>
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	4621      	mov	r1, r4
 800f8ee:	f7ff ff5d 	bl	800f7ac <__sflush_r>
 800f8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8f4:	07da      	lsls	r2, r3, #31
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	d4e4      	bmi.n	800f8c4 <_fflush_r+0xc>
 800f8fa:	89a3      	ldrh	r3, [r4, #12]
 800f8fc:	059b      	lsls	r3, r3, #22
 800f8fe:	d4e1      	bmi.n	800f8c4 <_fflush_r+0xc>
 800f900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f902:	f7fe fbbd 	bl	800e080 <__retarget_lock_release_recursive>
 800f906:	e7dd      	b.n	800f8c4 <_fflush_r+0xc>

0800f908 <__swhatbuf_r>:
 800f908:	b570      	push	{r4, r5, r6, lr}
 800f90a:	460c      	mov	r4, r1
 800f90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f910:	2900      	cmp	r1, #0
 800f912:	b096      	sub	sp, #88	; 0x58
 800f914:	4615      	mov	r5, r2
 800f916:	461e      	mov	r6, r3
 800f918:	da0d      	bge.n	800f936 <__swhatbuf_r+0x2e>
 800f91a:	89a3      	ldrh	r3, [r4, #12]
 800f91c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f920:	f04f 0100 	mov.w	r1, #0
 800f924:	bf0c      	ite	eq
 800f926:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f92a:	2340      	movne	r3, #64	; 0x40
 800f92c:	2000      	movs	r0, #0
 800f92e:	6031      	str	r1, [r6, #0]
 800f930:	602b      	str	r3, [r5, #0]
 800f932:	b016      	add	sp, #88	; 0x58
 800f934:	bd70      	pop	{r4, r5, r6, pc}
 800f936:	466a      	mov	r2, sp
 800f938:	f000 f848 	bl	800f9cc <_fstat_r>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	dbec      	blt.n	800f91a <__swhatbuf_r+0x12>
 800f940:	9901      	ldr	r1, [sp, #4]
 800f942:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f946:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f94a:	4259      	negs	r1, r3
 800f94c:	4159      	adcs	r1, r3
 800f94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f952:	e7eb      	b.n	800f92c <__swhatbuf_r+0x24>

0800f954 <__smakebuf_r>:
 800f954:	898b      	ldrh	r3, [r1, #12]
 800f956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f958:	079d      	lsls	r5, r3, #30
 800f95a:	4606      	mov	r6, r0
 800f95c:	460c      	mov	r4, r1
 800f95e:	d507      	bpl.n	800f970 <__smakebuf_r+0x1c>
 800f960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f964:	6023      	str	r3, [r4, #0]
 800f966:	6123      	str	r3, [r4, #16]
 800f968:	2301      	movs	r3, #1
 800f96a:	6163      	str	r3, [r4, #20]
 800f96c:	b002      	add	sp, #8
 800f96e:	bd70      	pop	{r4, r5, r6, pc}
 800f970:	ab01      	add	r3, sp, #4
 800f972:	466a      	mov	r2, sp
 800f974:	f7ff ffc8 	bl	800f908 <__swhatbuf_r>
 800f978:	9900      	ldr	r1, [sp, #0]
 800f97a:	4605      	mov	r5, r0
 800f97c:	4630      	mov	r0, r6
 800f97e:	f7fd fbf7 	bl	800d170 <_malloc_r>
 800f982:	b948      	cbnz	r0, 800f998 <__smakebuf_r+0x44>
 800f984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f988:	059a      	lsls	r2, r3, #22
 800f98a:	d4ef      	bmi.n	800f96c <__smakebuf_r+0x18>
 800f98c:	f023 0303 	bic.w	r3, r3, #3
 800f990:	f043 0302 	orr.w	r3, r3, #2
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	e7e3      	b.n	800f960 <__smakebuf_r+0xc>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	6020      	str	r0, [r4, #0]
 800f99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9a0:	81a3      	strh	r3, [r4, #12]
 800f9a2:	9b00      	ldr	r3, [sp, #0]
 800f9a4:	6163      	str	r3, [r4, #20]
 800f9a6:	9b01      	ldr	r3, [sp, #4]
 800f9a8:	6120      	str	r0, [r4, #16]
 800f9aa:	b15b      	cbz	r3, 800f9c4 <__smakebuf_r+0x70>
 800f9ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f000 f81d 	bl	800f9f0 <_isatty_r>
 800f9b6:	b128      	cbz	r0, 800f9c4 <__smakebuf_r+0x70>
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	f023 0303 	bic.w	r3, r3, #3
 800f9be:	f043 0301 	orr.w	r3, r3, #1
 800f9c2:	81a3      	strh	r3, [r4, #12]
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	431d      	orrs	r5, r3
 800f9c8:	81a5      	strh	r5, [r4, #12]
 800f9ca:	e7cf      	b.n	800f96c <__smakebuf_r+0x18>

0800f9cc <_fstat_r>:
 800f9cc:	b538      	push	{r3, r4, r5, lr}
 800f9ce:	4d07      	ldr	r5, [pc, #28]	; (800f9ec <_fstat_r+0x20>)
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	4608      	mov	r0, r1
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	602b      	str	r3, [r5, #0]
 800f9da:	f000 fa07 	bl	800fdec <_fstat>
 800f9de:	1c43      	adds	r3, r0, #1
 800f9e0:	d102      	bne.n	800f9e8 <_fstat_r+0x1c>
 800f9e2:	682b      	ldr	r3, [r5, #0]
 800f9e4:	b103      	cbz	r3, 800f9e8 <_fstat_r+0x1c>
 800f9e6:	6023      	str	r3, [r4, #0]
 800f9e8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ea:	bf00      	nop
 800f9ec:	2000355c 	.word	0x2000355c

0800f9f0 <_isatty_r>:
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	4d06      	ldr	r5, [pc, #24]	; (800fa0c <_isatty_r+0x1c>)
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	602b      	str	r3, [r5, #0]
 800f9fc:	f000 fa06 	bl	800fe0c <_isatty>
 800fa00:	1c43      	adds	r3, r0, #1
 800fa02:	d102      	bne.n	800fa0a <_isatty_r+0x1a>
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	b103      	cbz	r3, 800fa0a <_isatty_r+0x1a>
 800fa08:	6023      	str	r3, [r4, #0]
 800fa0a:	bd38      	pop	{r3, r4, r5, pc}
 800fa0c:	2000355c 	.word	0x2000355c

0800fa10 <__assert_func>:
 800fa10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa12:	4614      	mov	r4, r2
 800fa14:	461a      	mov	r2, r3
 800fa16:	4b09      	ldr	r3, [pc, #36]	; (800fa3c <__assert_func+0x2c>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	68d8      	ldr	r0, [r3, #12]
 800fa1e:	b14c      	cbz	r4, 800fa34 <__assert_func+0x24>
 800fa20:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <__assert_func+0x30>)
 800fa22:	9100      	str	r1, [sp, #0]
 800fa24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa28:	4906      	ldr	r1, [pc, #24]	; (800fa44 <__assert_func+0x34>)
 800fa2a:	462b      	mov	r3, r5
 800fa2c:	f000 f844 	bl	800fab8 <fiprintf>
 800fa30:	f000 f854 	bl	800fadc <abort>
 800fa34:	4b04      	ldr	r3, [pc, #16]	; (800fa48 <__assert_func+0x38>)
 800fa36:	461c      	mov	r4, r3
 800fa38:	e7f3      	b.n	800fa22 <__assert_func+0x12>
 800fa3a:	bf00      	nop
 800fa3c:	20000c18 	.word	0x20000c18
 800fa40:	0801bee7 	.word	0x0801bee7
 800fa44:	0801bef4 	.word	0x0801bef4
 800fa48:	0801bf22 	.word	0x0801bf22

0800fa4c <_calloc_r>:
 800fa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa4e:	fba1 2402 	umull	r2, r4, r1, r2
 800fa52:	b94c      	cbnz	r4, 800fa68 <_calloc_r+0x1c>
 800fa54:	4611      	mov	r1, r2
 800fa56:	9201      	str	r2, [sp, #4]
 800fa58:	f7fd fb8a 	bl	800d170 <_malloc_r>
 800fa5c:	9a01      	ldr	r2, [sp, #4]
 800fa5e:	4605      	mov	r5, r0
 800fa60:	b930      	cbnz	r0, 800fa70 <_calloc_r+0x24>
 800fa62:	4628      	mov	r0, r5
 800fa64:	b003      	add	sp, #12
 800fa66:	bd30      	pop	{r4, r5, pc}
 800fa68:	220c      	movs	r2, #12
 800fa6a:	6002      	str	r2, [r0, #0]
 800fa6c:	2500      	movs	r5, #0
 800fa6e:	e7f8      	b.n	800fa62 <_calloc_r+0x16>
 800fa70:	4621      	mov	r1, r4
 800fa72:	f7fe fa77 	bl	800df64 <memset>
 800fa76:	e7f4      	b.n	800fa62 <_calloc_r+0x16>

0800fa78 <__ascii_mbtowc>:
 800fa78:	b082      	sub	sp, #8
 800fa7a:	b901      	cbnz	r1, 800fa7e <__ascii_mbtowc+0x6>
 800fa7c:	a901      	add	r1, sp, #4
 800fa7e:	b142      	cbz	r2, 800fa92 <__ascii_mbtowc+0x1a>
 800fa80:	b14b      	cbz	r3, 800fa96 <__ascii_mbtowc+0x1e>
 800fa82:	7813      	ldrb	r3, [r2, #0]
 800fa84:	600b      	str	r3, [r1, #0]
 800fa86:	7812      	ldrb	r2, [r2, #0]
 800fa88:	1e10      	subs	r0, r2, #0
 800fa8a:	bf18      	it	ne
 800fa8c:	2001      	movne	r0, #1
 800fa8e:	b002      	add	sp, #8
 800fa90:	4770      	bx	lr
 800fa92:	4610      	mov	r0, r2
 800fa94:	e7fb      	b.n	800fa8e <__ascii_mbtowc+0x16>
 800fa96:	f06f 0001 	mvn.w	r0, #1
 800fa9a:	e7f8      	b.n	800fa8e <__ascii_mbtowc+0x16>

0800fa9c <__ascii_wctomb>:
 800fa9c:	b149      	cbz	r1, 800fab2 <__ascii_wctomb+0x16>
 800fa9e:	2aff      	cmp	r2, #255	; 0xff
 800faa0:	bf85      	ittet	hi
 800faa2:	238a      	movhi	r3, #138	; 0x8a
 800faa4:	6003      	strhi	r3, [r0, #0]
 800faa6:	700a      	strbls	r2, [r1, #0]
 800faa8:	f04f 30ff 	movhi.w	r0, #4294967295
 800faac:	bf98      	it	ls
 800faae:	2001      	movls	r0, #1
 800fab0:	4770      	bx	lr
 800fab2:	4608      	mov	r0, r1
 800fab4:	4770      	bx	lr
	...

0800fab8 <fiprintf>:
 800fab8:	b40e      	push	{r1, r2, r3}
 800faba:	b503      	push	{r0, r1, lr}
 800fabc:	4601      	mov	r1, r0
 800fabe:	ab03      	add	r3, sp, #12
 800fac0:	4805      	ldr	r0, [pc, #20]	; (800fad8 <fiprintf+0x20>)
 800fac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fac6:	6800      	ldr	r0, [r0, #0]
 800fac8:	9301      	str	r3, [sp, #4]
 800faca:	f7ff fd55 	bl	800f578 <_vfiprintf_r>
 800face:	b002      	add	sp, #8
 800fad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fad4:	b003      	add	sp, #12
 800fad6:	4770      	bx	lr
 800fad8:	20000c18 	.word	0x20000c18

0800fadc <abort>:
 800fadc:	b508      	push	{r3, lr}
 800fade:	2006      	movs	r0, #6
 800fae0:	f000 f82c 	bl	800fb3c <raise>
 800fae4:	2001      	movs	r0, #1
 800fae6:	f000 f9b1 	bl	800fe4c <_exit>

0800faea <_raise_r>:
 800faea:	291f      	cmp	r1, #31
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4604      	mov	r4, r0
 800faf0:	460d      	mov	r5, r1
 800faf2:	d904      	bls.n	800fafe <_raise_r+0x14>
 800faf4:	2316      	movs	r3, #22
 800faf6:	6003      	str	r3, [r0, #0]
 800faf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fafc:	bd38      	pop	{r3, r4, r5, pc}
 800fafe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fb00:	b112      	cbz	r2, 800fb08 <_raise_r+0x1e>
 800fb02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb06:	b94b      	cbnz	r3, 800fb1c <_raise_r+0x32>
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 f831 	bl	800fb70 <_getpid_r>
 800fb0e:	462a      	mov	r2, r5
 800fb10:	4601      	mov	r1, r0
 800fb12:	4620      	mov	r0, r4
 800fb14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb18:	f000 b818 	b.w	800fb4c <_kill_r>
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d00a      	beq.n	800fb36 <_raise_r+0x4c>
 800fb20:	1c59      	adds	r1, r3, #1
 800fb22:	d103      	bne.n	800fb2c <_raise_r+0x42>
 800fb24:	2316      	movs	r3, #22
 800fb26:	6003      	str	r3, [r0, #0]
 800fb28:	2001      	movs	r0, #1
 800fb2a:	e7e7      	b.n	800fafc <_raise_r+0x12>
 800fb2c:	2400      	movs	r4, #0
 800fb2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb32:	4628      	mov	r0, r5
 800fb34:	4798      	blx	r3
 800fb36:	2000      	movs	r0, #0
 800fb38:	e7e0      	b.n	800fafc <_raise_r+0x12>
	...

0800fb3c <raise>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <raise+0xc>)
 800fb3e:	4601      	mov	r1, r0
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	f7ff bfd2 	b.w	800faea <_raise_r>
 800fb46:	bf00      	nop
 800fb48:	20000c18 	.word	0x20000c18

0800fb4c <_kill_r>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	4d07      	ldr	r5, [pc, #28]	; (800fb6c <_kill_r+0x20>)
 800fb50:	2300      	movs	r3, #0
 800fb52:	4604      	mov	r4, r0
 800fb54:	4608      	mov	r0, r1
 800fb56:	4611      	mov	r1, r2
 800fb58:	602b      	str	r3, [r5, #0]
 800fb5a:	f000 f95f 	bl	800fe1c <_kill>
 800fb5e:	1c43      	adds	r3, r0, #1
 800fb60:	d102      	bne.n	800fb68 <_kill_r+0x1c>
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	b103      	cbz	r3, 800fb68 <_kill_r+0x1c>
 800fb66:	6023      	str	r3, [r4, #0]
 800fb68:	bd38      	pop	{r3, r4, r5, pc}
 800fb6a:	bf00      	nop
 800fb6c:	2000355c 	.word	0x2000355c

0800fb70 <_getpid_r>:
 800fb70:	f000 b944 	b.w	800fdfc <_getpid>

0800fb74 <expf>:
 800fb74:	b508      	push	{r3, lr}
 800fb76:	ed2d 8b02 	vpush	{d8}
 800fb7a:	eef0 8a40 	vmov.f32	s17, s0
 800fb7e:	f000 f85f 	bl	800fc40 <__ieee754_expf>
 800fb82:	eeb0 8a40 	vmov.f32	s16, s0
 800fb86:	eeb0 0a68 	vmov.f32	s0, s17
 800fb8a:	f000 f829 	bl	800fbe0 <finitef>
 800fb8e:	b160      	cbz	r0, 800fbaa <expf+0x36>
 800fb90:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fbd0 <expf+0x5c>
 800fb94:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb9c:	dd0a      	ble.n	800fbb4 <expf+0x40>
 800fb9e:	f7fe fa43 	bl	800e028 <__errno>
 800fba2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800fbd4 <expf+0x60>
 800fba6:	2322      	movs	r3, #34	; 0x22
 800fba8:	6003      	str	r3, [r0, #0]
 800fbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800fbae:	ecbd 8b02 	vpop	{d8}
 800fbb2:	bd08      	pop	{r3, pc}
 800fbb4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fbd8 <expf+0x64>
 800fbb8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc0:	d5f3      	bpl.n	800fbaa <expf+0x36>
 800fbc2:	f7fe fa31 	bl	800e028 <__errno>
 800fbc6:	2322      	movs	r3, #34	; 0x22
 800fbc8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800fbdc <expf+0x68>
 800fbcc:	6003      	str	r3, [r0, #0]
 800fbce:	e7ec      	b.n	800fbaa <expf+0x36>
 800fbd0:	42b17217 	.word	0x42b17217
 800fbd4:	7f800000 	.word	0x7f800000
 800fbd8:	c2cff1b5 	.word	0xc2cff1b5
 800fbdc:	00000000 	.word	0x00000000

0800fbe0 <finitef>:
 800fbe0:	b082      	sub	sp, #8
 800fbe2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fbe6:	9801      	ldr	r0, [sp, #4]
 800fbe8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fbec:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fbf0:	bfac      	ite	ge
 800fbf2:	2000      	movge	r0, #0
 800fbf4:	2001      	movlt	r0, #1
 800fbf6:	b002      	add	sp, #8
 800fbf8:	4770      	bx	lr

0800fbfa <with_errnof>:
 800fbfa:	b513      	push	{r0, r1, r4, lr}
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fc02:	f7fe fa11 	bl	800e028 <__errno>
 800fc06:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fc0a:	6004      	str	r4, [r0, #0]
 800fc0c:	b002      	add	sp, #8
 800fc0e:	bd10      	pop	{r4, pc}

0800fc10 <xflowf>:
 800fc10:	b130      	cbz	r0, 800fc20 <xflowf+0x10>
 800fc12:	eef1 7a40 	vneg.f32	s15, s0
 800fc16:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc1a:	2022      	movs	r0, #34	; 0x22
 800fc1c:	f7ff bfed 	b.w	800fbfa <with_errnof>
 800fc20:	eef0 7a40 	vmov.f32	s15, s0
 800fc24:	e7f7      	b.n	800fc16 <xflowf+0x6>
	...

0800fc28 <__math_uflowf>:
 800fc28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc30 <__math_uflowf+0x8>
 800fc2c:	f7ff bff0 	b.w	800fc10 <xflowf>
 800fc30:	10000000 	.word	0x10000000

0800fc34 <__math_oflowf>:
 800fc34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc3c <__math_oflowf+0x8>
 800fc38:	f7ff bfea 	b.w	800fc10 <xflowf>
 800fc3c:	70000000 	.word	0x70000000

0800fc40 <__ieee754_expf>:
 800fc40:	ee10 2a10 	vmov	r2, s0
 800fc44:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800fc48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fc4c:	d902      	bls.n	800fc54 <__ieee754_expf+0x14>
 800fc4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc52:	4770      	bx	lr
 800fc54:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800fc58:	d106      	bne.n	800fc68 <__ieee754_expf+0x28>
 800fc5a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800fd94 <__ieee754_expf+0x154>
 800fc5e:	2900      	cmp	r1, #0
 800fc60:	bf18      	it	ne
 800fc62:	eeb0 0a67 	vmovne.f32	s0, s15
 800fc66:	4770      	bx	lr
 800fc68:	484b      	ldr	r0, [pc, #300]	; (800fd98 <__ieee754_expf+0x158>)
 800fc6a:	4282      	cmp	r2, r0
 800fc6c:	dd02      	ble.n	800fc74 <__ieee754_expf+0x34>
 800fc6e:	2000      	movs	r0, #0
 800fc70:	f7ff bfe0 	b.w	800fc34 <__math_oflowf>
 800fc74:	2a00      	cmp	r2, #0
 800fc76:	da05      	bge.n	800fc84 <__ieee754_expf+0x44>
 800fc78:	4a48      	ldr	r2, [pc, #288]	; (800fd9c <__ieee754_expf+0x15c>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d902      	bls.n	800fc84 <__ieee754_expf+0x44>
 800fc7e:	2000      	movs	r0, #0
 800fc80:	f7ff bfd2 	b.w	800fc28 <__math_uflowf>
 800fc84:	4a46      	ldr	r2, [pc, #280]	; (800fda0 <__ieee754_expf+0x160>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fc8c:	d952      	bls.n	800fd34 <__ieee754_expf+0xf4>
 800fc8e:	4a45      	ldr	r2, [pc, #276]	; (800fda4 <__ieee754_expf+0x164>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800fc96:	d834      	bhi.n	800fd02 <__ieee754_expf+0xc2>
 800fc98:	4b43      	ldr	r3, [pc, #268]	; (800fda8 <__ieee754_expf+0x168>)
 800fc9a:	4413      	add	r3, r2
 800fc9c:	ed93 7a00 	vldr	s14, [r3]
 800fca0:	4b42      	ldr	r3, [pc, #264]	; (800fdac <__ieee754_expf+0x16c>)
 800fca2:	4413      	add	r3, r2
 800fca4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800fca8:	f1c1 0201 	rsb	r2, r1, #1
 800fcac:	edd3 7a00 	vldr	s15, [r3]
 800fcb0:	1a52      	subs	r2, r2, r1
 800fcb2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800fcb6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800fcba:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800fdb0 <__ieee754_expf+0x170>
 800fcbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fdb4 <__ieee754_expf+0x174>
 800fcc2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800fcc6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800fdb8 <__ieee754_expf+0x178>
 800fcca:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fcce:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fdbc <__ieee754_expf+0x17c>
 800fcd2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800fcd6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800fdc0 <__ieee754_expf+0x180>
 800fcda:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fcde:	eef0 6a40 	vmov.f32	s13, s0
 800fce2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800fce6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fcea:	ee20 5a26 	vmul.f32	s10, s0, s13
 800fcee:	bb92      	cbnz	r2, 800fd56 <__ieee754_expf+0x116>
 800fcf0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800fcf4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800fcf8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fcfc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800fd00:	4770      	bx	lr
 800fd02:	4b30      	ldr	r3, [pc, #192]	; (800fdc4 <__ieee754_expf+0x184>)
 800fd04:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800fdc8 <__ieee754_expf+0x188>
 800fd08:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fdcc <__ieee754_expf+0x18c>
 800fd0c:	4413      	add	r3, r2
 800fd0e:	edd3 7a00 	vldr	s15, [r3]
 800fd12:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fd16:	eeb0 7a40 	vmov.f32	s14, s0
 800fd1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd1e:	ee17 2a90 	vmov	r2, s15
 800fd22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd26:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800fd2a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800fdd0 <__ieee754_expf+0x190>
 800fd2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fd32:	e7be      	b.n	800fcb2 <__ieee754_expf+0x72>
 800fd34:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800fd38:	d20b      	bcs.n	800fd52 <__ieee754_expf+0x112>
 800fd3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800fdd4 <__ieee754_expf+0x194>
 800fd3e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800fd42:	eef4 6ae5 	vcmpe.f32	s13, s11
 800fd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4a:	dd02      	ble.n	800fd52 <__ieee754_expf+0x112>
 800fd4c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800fd50:	4770      	bx	lr
 800fd52:	2200      	movs	r2, #0
 800fd54:	e7af      	b.n	800fcb6 <__ieee754_expf+0x76>
 800fd56:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fd5a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800fd5e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800fd62:	bfb8      	it	lt
 800fd64:	3264      	addlt	r2, #100	; 0x64
 800fd66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fd6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd6e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fd72:	ee17 3a90 	vmov	r3, s15
 800fd76:	bfab      	itete	ge
 800fd78:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800fd7c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800fd80:	ee00 3a10 	vmovge	s0, r3
 800fd84:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800fdd8 <__ieee754_expf+0x198>
 800fd88:	bfbc      	itt	lt
 800fd8a:	ee00 3a10 	vmovlt	s0, r3
 800fd8e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800fd92:	4770      	bx	lr
 800fd94:	00000000 	.word	0x00000000
 800fd98:	42b17217 	.word	0x42b17217
 800fd9c:	42cff1b5 	.word	0x42cff1b5
 800fda0:	3eb17218 	.word	0x3eb17218
 800fda4:	3f851591 	.word	0x3f851591
 800fda8:	0801c02c 	.word	0x0801c02c
 800fdac:	0801c034 	.word	0x0801c034
 800fdb0:	3331bb4c 	.word	0x3331bb4c
 800fdb4:	b5ddea0e 	.word	0xb5ddea0e
 800fdb8:	388ab355 	.word	0x388ab355
 800fdbc:	bb360b61 	.word	0xbb360b61
 800fdc0:	3e2aaaab 	.word	0x3e2aaaab
 800fdc4:	0801c024 	.word	0x0801c024
 800fdc8:	3fb8aa3b 	.word	0x3fb8aa3b
 800fdcc:	3f317180 	.word	0x3f317180
 800fdd0:	3717f7d1 	.word	0x3717f7d1
 800fdd4:	7149f2ca 	.word	0x7149f2ca
 800fdd8:	0d800000 	.word	0x0d800000

0800fddc <_close>:
 800fddc:	4b02      	ldr	r3, [pc, #8]	; (800fde8 <_close+0xc>)
 800fdde:	2258      	movs	r2, #88	; 0x58
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	f04f 30ff 	mov.w	r0, #4294967295
 800fde6:	4770      	bx	lr
 800fde8:	2000355c 	.word	0x2000355c

0800fdec <_fstat>:
 800fdec:	4b02      	ldr	r3, [pc, #8]	; (800fdf8 <_fstat+0xc>)
 800fdee:	2258      	movs	r2, #88	; 0x58
 800fdf0:	601a      	str	r2, [r3, #0]
 800fdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf6:	4770      	bx	lr
 800fdf8:	2000355c 	.word	0x2000355c

0800fdfc <_getpid>:
 800fdfc:	4b02      	ldr	r3, [pc, #8]	; (800fe08 <_getpid+0xc>)
 800fdfe:	2258      	movs	r2, #88	; 0x58
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	f04f 30ff 	mov.w	r0, #4294967295
 800fe06:	4770      	bx	lr
 800fe08:	2000355c 	.word	0x2000355c

0800fe0c <_isatty>:
 800fe0c:	4b02      	ldr	r3, [pc, #8]	; (800fe18 <_isatty+0xc>)
 800fe0e:	2258      	movs	r2, #88	; 0x58
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	2000      	movs	r0, #0
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	2000355c 	.word	0x2000355c

0800fe1c <_kill>:
 800fe1c:	4b02      	ldr	r3, [pc, #8]	; (800fe28 <_kill+0xc>)
 800fe1e:	2258      	movs	r2, #88	; 0x58
 800fe20:	601a      	str	r2, [r3, #0]
 800fe22:	f04f 30ff 	mov.w	r0, #4294967295
 800fe26:	4770      	bx	lr
 800fe28:	2000355c 	.word	0x2000355c

0800fe2c <_lseek>:
 800fe2c:	4b02      	ldr	r3, [pc, #8]	; (800fe38 <_lseek+0xc>)
 800fe2e:	2258      	movs	r2, #88	; 0x58
 800fe30:	601a      	str	r2, [r3, #0]
 800fe32:	f04f 30ff 	mov.w	r0, #4294967295
 800fe36:	4770      	bx	lr
 800fe38:	2000355c 	.word	0x2000355c

0800fe3c <_read>:
 800fe3c:	4b02      	ldr	r3, [pc, #8]	; (800fe48 <_read+0xc>)
 800fe3e:	2258      	movs	r2, #88	; 0x58
 800fe40:	601a      	str	r2, [r3, #0]
 800fe42:	f04f 30ff 	mov.w	r0, #4294967295
 800fe46:	4770      	bx	lr
 800fe48:	2000355c 	.word	0x2000355c

0800fe4c <_exit>:
 800fe4c:	e7fe      	b.n	800fe4c <_exit>
	...

0800fe50 <_init>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	bf00      	nop
 800fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe56:	bc08      	pop	{r3}
 800fe58:	469e      	mov	lr, r3
 800fe5a:	4770      	bx	lr

0800fe5c <_fini>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	bf00      	nop
 800fe60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe62:	bc08      	pop	{r3}
 800fe64:	469e      	mov	lr, r3
 800fe66:	4770      	bx	lr
